// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetesingressnginx

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-kubernetes-ingress-nginx/sdk/go/kubernetes-ingress-nginx/internal"
	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type Autoscaling struct {
	Annotations                       map[string]string    `pulumi:"annotations"`
	ControllerAutoscalingBehavior     *AutoscalingBehavior `pulumi:"controllerAutoscalingBehavior"`
	Enabled                           *bool                `pulumi:"enabled"`
	MaxReplicas                       *int                 `pulumi:"maxReplicas"`
	MinReplicas                       *int                 `pulumi:"minReplicas"`
	TargetCPUUtilizationPercentage    *int                 `pulumi:"targetCPUUtilizationPercentage"`
	TargetMemoryUtilizationPercentage *int                 `pulumi:"targetMemoryUtilizationPercentage"`
}

// AutoscalingInput is an input type that accepts AutoscalingArgs and AutoscalingOutput values.
// You can construct a concrete instance of `AutoscalingInput` via:
//
//	AutoscalingArgs{...}
type AutoscalingInput interface {
	pulumi.Input

	ToAutoscalingOutput() AutoscalingOutput
	ToAutoscalingOutputWithContext(context.Context) AutoscalingOutput
}

type AutoscalingArgs struct {
	Annotations                       pulumi.StringMapInput       `pulumi:"annotations"`
	ControllerAutoscalingBehavior     AutoscalingBehaviorPtrInput `pulumi:"controllerAutoscalingBehavior"`
	Enabled                           pulumi.BoolPtrInput         `pulumi:"enabled"`
	MaxReplicas                       pulumi.IntPtrInput          `pulumi:"maxReplicas"`
	MinReplicas                       pulumi.IntPtrInput          `pulumi:"minReplicas"`
	TargetCPUUtilizationPercentage    pulumi.IntPtrInput          `pulumi:"targetCPUUtilizationPercentage"`
	TargetMemoryUtilizationPercentage pulumi.IntPtrInput          `pulumi:"targetMemoryUtilizationPercentage"`
}

func (AutoscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Autoscaling)(nil)).Elem()
}

func (i AutoscalingArgs) ToAutoscalingOutput() AutoscalingOutput {
	return i.ToAutoscalingOutputWithContext(context.Background())
}

func (i AutoscalingArgs) ToAutoscalingOutputWithContext(ctx context.Context) AutoscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingOutput)
}

func (i AutoscalingArgs) ToAutoscalingPtrOutput() AutoscalingPtrOutput {
	return i.ToAutoscalingPtrOutputWithContext(context.Background())
}

func (i AutoscalingArgs) ToAutoscalingPtrOutputWithContext(ctx context.Context) AutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingOutput).ToAutoscalingPtrOutputWithContext(ctx)
}

// AutoscalingPtrInput is an input type that accepts AutoscalingArgs, AutoscalingPtr and AutoscalingPtrOutput values.
// You can construct a concrete instance of `AutoscalingPtrInput` via:
//
//	        AutoscalingArgs{...}
//
//	or:
//
//	        nil
type AutoscalingPtrInput interface {
	pulumi.Input

	ToAutoscalingPtrOutput() AutoscalingPtrOutput
	ToAutoscalingPtrOutputWithContext(context.Context) AutoscalingPtrOutput
}

type autoscalingPtrType AutoscalingArgs

func AutoscalingPtr(v *AutoscalingArgs) AutoscalingPtrInput {
	return (*autoscalingPtrType)(v)
}

func (*autoscalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Autoscaling)(nil)).Elem()
}

func (i *autoscalingPtrType) ToAutoscalingPtrOutput() AutoscalingPtrOutput {
	return i.ToAutoscalingPtrOutputWithContext(context.Background())
}

func (i *autoscalingPtrType) ToAutoscalingPtrOutputWithContext(ctx context.Context) AutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPtrOutput)
}

type AutoscalingOutput struct{ *pulumi.OutputState }

func (AutoscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Autoscaling)(nil)).Elem()
}

func (o AutoscalingOutput) ToAutoscalingOutput() AutoscalingOutput {
	return o
}

func (o AutoscalingOutput) ToAutoscalingOutputWithContext(ctx context.Context) AutoscalingOutput {
	return o
}

func (o AutoscalingOutput) ToAutoscalingPtrOutput() AutoscalingPtrOutput {
	return o.ToAutoscalingPtrOutputWithContext(context.Background())
}

func (o AutoscalingOutput) ToAutoscalingPtrOutputWithContext(ctx context.Context) AutoscalingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Autoscaling) *Autoscaling {
		return &v
	}).(AutoscalingPtrOutput)
}

func (o AutoscalingOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v Autoscaling) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o AutoscalingOutput) ControllerAutoscalingBehavior() AutoscalingBehaviorPtrOutput {
	return o.ApplyT(func(v Autoscaling) *AutoscalingBehavior { return v.ControllerAutoscalingBehavior }).(AutoscalingBehaviorPtrOutput)
}

func (o AutoscalingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Autoscaling) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o AutoscalingOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Autoscaling) *int { return v.MaxReplicas }).(pulumi.IntPtrOutput)
}

func (o AutoscalingOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Autoscaling) *int { return v.MinReplicas }).(pulumi.IntPtrOutput)
}

func (o AutoscalingOutput) TargetCPUUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Autoscaling) *int { return v.TargetCPUUtilizationPercentage }).(pulumi.IntPtrOutput)
}

func (o AutoscalingOutput) TargetMemoryUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Autoscaling) *int { return v.TargetMemoryUtilizationPercentage }).(pulumi.IntPtrOutput)
}

type AutoscalingPtrOutput struct{ *pulumi.OutputState }

func (AutoscalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Autoscaling)(nil)).Elem()
}

func (o AutoscalingPtrOutput) ToAutoscalingPtrOutput() AutoscalingPtrOutput {
	return o
}

func (o AutoscalingPtrOutput) ToAutoscalingPtrOutputWithContext(ctx context.Context) AutoscalingPtrOutput {
	return o
}

func (o AutoscalingPtrOutput) Elem() AutoscalingOutput {
	return o.ApplyT(func(v *Autoscaling) Autoscaling {
		if v != nil {
			return *v
		}
		var ret Autoscaling
		return ret
	}).(AutoscalingOutput)
}

func (o AutoscalingPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Autoscaling) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o AutoscalingPtrOutput) ControllerAutoscalingBehavior() AutoscalingBehaviorPtrOutput {
	return o.ApplyT(func(v *Autoscaling) *AutoscalingBehavior {
		if v == nil {
			return nil
		}
		return v.ControllerAutoscalingBehavior
	}).(AutoscalingBehaviorPtrOutput)
}

func (o AutoscalingPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Autoscaling) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o AutoscalingPtrOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Autoscaling) *int {
		if v == nil {
			return nil
		}
		return v.MaxReplicas
	}).(pulumi.IntPtrOutput)
}

func (o AutoscalingPtrOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Autoscaling) *int {
		if v == nil {
			return nil
		}
		return v.MinReplicas
	}).(pulumi.IntPtrOutput)
}

func (o AutoscalingPtrOutput) TargetCPUUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Autoscaling) *int {
		if v == nil {
			return nil
		}
		return v.TargetCPUUtilizationPercentage
	}).(pulumi.IntPtrOutput)
}

func (o AutoscalingPtrOutput) TargetMemoryUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Autoscaling) *int {
		if v == nil {
			return nil
		}
		return v.TargetMemoryUtilizationPercentage
	}).(pulumi.IntPtrOutput)
}

type AutoscalingBehavior struct {
	ScaleDown *AutoscalingBehaviorScaling `pulumi:"scaleDown"`
	ScaleUp   *AutoscalingBehaviorScaling `pulumi:"scaleUp"`
}

// AutoscalingBehaviorInput is an input type that accepts AutoscalingBehaviorArgs and AutoscalingBehaviorOutput values.
// You can construct a concrete instance of `AutoscalingBehaviorInput` via:
//
//	AutoscalingBehaviorArgs{...}
type AutoscalingBehaviorInput interface {
	pulumi.Input

	ToAutoscalingBehaviorOutput() AutoscalingBehaviorOutput
	ToAutoscalingBehaviorOutputWithContext(context.Context) AutoscalingBehaviorOutput
}

type AutoscalingBehaviorArgs struct {
	ScaleDown AutoscalingBehaviorScalingPtrInput `pulumi:"scaleDown"`
	ScaleUp   AutoscalingBehaviorScalingPtrInput `pulumi:"scaleUp"`
}

func (AutoscalingBehaviorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingBehavior)(nil)).Elem()
}

func (i AutoscalingBehaviorArgs) ToAutoscalingBehaviorOutput() AutoscalingBehaviorOutput {
	return i.ToAutoscalingBehaviorOutputWithContext(context.Background())
}

func (i AutoscalingBehaviorArgs) ToAutoscalingBehaviorOutputWithContext(ctx context.Context) AutoscalingBehaviorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingBehaviorOutput)
}

func (i AutoscalingBehaviorArgs) ToAutoscalingBehaviorPtrOutput() AutoscalingBehaviorPtrOutput {
	return i.ToAutoscalingBehaviorPtrOutputWithContext(context.Background())
}

func (i AutoscalingBehaviorArgs) ToAutoscalingBehaviorPtrOutputWithContext(ctx context.Context) AutoscalingBehaviorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingBehaviorOutput).ToAutoscalingBehaviorPtrOutputWithContext(ctx)
}

// AutoscalingBehaviorPtrInput is an input type that accepts AutoscalingBehaviorArgs, AutoscalingBehaviorPtr and AutoscalingBehaviorPtrOutput values.
// You can construct a concrete instance of `AutoscalingBehaviorPtrInput` via:
//
//	        AutoscalingBehaviorArgs{...}
//
//	or:
//
//	        nil
type AutoscalingBehaviorPtrInput interface {
	pulumi.Input

	ToAutoscalingBehaviorPtrOutput() AutoscalingBehaviorPtrOutput
	ToAutoscalingBehaviorPtrOutputWithContext(context.Context) AutoscalingBehaviorPtrOutput
}

type autoscalingBehaviorPtrType AutoscalingBehaviorArgs

func AutoscalingBehaviorPtr(v *AutoscalingBehaviorArgs) AutoscalingBehaviorPtrInput {
	return (*autoscalingBehaviorPtrType)(v)
}

func (*autoscalingBehaviorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingBehavior)(nil)).Elem()
}

func (i *autoscalingBehaviorPtrType) ToAutoscalingBehaviorPtrOutput() AutoscalingBehaviorPtrOutput {
	return i.ToAutoscalingBehaviorPtrOutputWithContext(context.Background())
}

func (i *autoscalingBehaviorPtrType) ToAutoscalingBehaviorPtrOutputWithContext(ctx context.Context) AutoscalingBehaviorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingBehaviorPtrOutput)
}

type AutoscalingBehaviorOutput struct{ *pulumi.OutputState }

func (AutoscalingBehaviorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingBehavior)(nil)).Elem()
}

func (o AutoscalingBehaviorOutput) ToAutoscalingBehaviorOutput() AutoscalingBehaviorOutput {
	return o
}

func (o AutoscalingBehaviorOutput) ToAutoscalingBehaviorOutputWithContext(ctx context.Context) AutoscalingBehaviorOutput {
	return o
}

func (o AutoscalingBehaviorOutput) ToAutoscalingBehaviorPtrOutput() AutoscalingBehaviorPtrOutput {
	return o.ToAutoscalingBehaviorPtrOutputWithContext(context.Background())
}

func (o AutoscalingBehaviorOutput) ToAutoscalingBehaviorPtrOutputWithContext(ctx context.Context) AutoscalingBehaviorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoscalingBehavior) *AutoscalingBehavior {
		return &v
	}).(AutoscalingBehaviorPtrOutput)
}

func (o AutoscalingBehaviorOutput) ScaleDown() AutoscalingBehaviorScalingPtrOutput {
	return o.ApplyT(func(v AutoscalingBehavior) *AutoscalingBehaviorScaling { return v.ScaleDown }).(AutoscalingBehaviorScalingPtrOutput)
}

func (o AutoscalingBehaviorOutput) ScaleUp() AutoscalingBehaviorScalingPtrOutput {
	return o.ApplyT(func(v AutoscalingBehavior) *AutoscalingBehaviorScaling { return v.ScaleUp }).(AutoscalingBehaviorScalingPtrOutput)
}

type AutoscalingBehaviorPtrOutput struct{ *pulumi.OutputState }

func (AutoscalingBehaviorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingBehavior)(nil)).Elem()
}

func (o AutoscalingBehaviorPtrOutput) ToAutoscalingBehaviorPtrOutput() AutoscalingBehaviorPtrOutput {
	return o
}

func (o AutoscalingBehaviorPtrOutput) ToAutoscalingBehaviorPtrOutputWithContext(ctx context.Context) AutoscalingBehaviorPtrOutput {
	return o
}

func (o AutoscalingBehaviorPtrOutput) Elem() AutoscalingBehaviorOutput {
	return o.ApplyT(func(v *AutoscalingBehavior) AutoscalingBehavior {
		if v != nil {
			return *v
		}
		var ret AutoscalingBehavior
		return ret
	}).(AutoscalingBehaviorOutput)
}

func (o AutoscalingBehaviorPtrOutput) ScaleDown() AutoscalingBehaviorScalingPtrOutput {
	return o.ApplyT(func(v *AutoscalingBehavior) *AutoscalingBehaviorScaling {
		if v == nil {
			return nil
		}
		return v.ScaleDown
	}).(AutoscalingBehaviorScalingPtrOutput)
}

func (o AutoscalingBehaviorPtrOutput) ScaleUp() AutoscalingBehaviorScalingPtrOutput {
	return o.ApplyT(func(v *AutoscalingBehavior) *AutoscalingBehaviorScaling {
		if v == nil {
			return nil
		}
		return v.ScaleUp
	}).(AutoscalingBehaviorScalingPtrOutput)
}

type AutoscalingBehaviorScaling struct {
	Policies                   []AutoscalingBehaviorScalingPolicy `pulumi:"policies"`
	StabilizationWindowSeconds *int                               `pulumi:"stabilizationWindowSeconds"`
}

// AutoscalingBehaviorScalingInput is an input type that accepts AutoscalingBehaviorScalingArgs and AutoscalingBehaviorScalingOutput values.
// You can construct a concrete instance of `AutoscalingBehaviorScalingInput` via:
//
//	AutoscalingBehaviorScalingArgs{...}
type AutoscalingBehaviorScalingInput interface {
	pulumi.Input

	ToAutoscalingBehaviorScalingOutput() AutoscalingBehaviorScalingOutput
	ToAutoscalingBehaviorScalingOutputWithContext(context.Context) AutoscalingBehaviorScalingOutput
}

type AutoscalingBehaviorScalingArgs struct {
	Policies                   AutoscalingBehaviorScalingPolicyArrayInput `pulumi:"policies"`
	StabilizationWindowSeconds pulumi.IntPtrInput                         `pulumi:"stabilizationWindowSeconds"`
}

func (AutoscalingBehaviorScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingBehaviorScaling)(nil)).Elem()
}

func (i AutoscalingBehaviorScalingArgs) ToAutoscalingBehaviorScalingOutput() AutoscalingBehaviorScalingOutput {
	return i.ToAutoscalingBehaviorScalingOutputWithContext(context.Background())
}

func (i AutoscalingBehaviorScalingArgs) ToAutoscalingBehaviorScalingOutputWithContext(ctx context.Context) AutoscalingBehaviorScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingBehaviorScalingOutput)
}

func (i AutoscalingBehaviorScalingArgs) ToAutoscalingBehaviorScalingPtrOutput() AutoscalingBehaviorScalingPtrOutput {
	return i.ToAutoscalingBehaviorScalingPtrOutputWithContext(context.Background())
}

func (i AutoscalingBehaviorScalingArgs) ToAutoscalingBehaviorScalingPtrOutputWithContext(ctx context.Context) AutoscalingBehaviorScalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingBehaviorScalingOutput).ToAutoscalingBehaviorScalingPtrOutputWithContext(ctx)
}

// AutoscalingBehaviorScalingPtrInput is an input type that accepts AutoscalingBehaviorScalingArgs, AutoscalingBehaviorScalingPtr and AutoscalingBehaviorScalingPtrOutput values.
// You can construct a concrete instance of `AutoscalingBehaviorScalingPtrInput` via:
//
//	        AutoscalingBehaviorScalingArgs{...}
//
//	or:
//
//	        nil
type AutoscalingBehaviorScalingPtrInput interface {
	pulumi.Input

	ToAutoscalingBehaviorScalingPtrOutput() AutoscalingBehaviorScalingPtrOutput
	ToAutoscalingBehaviorScalingPtrOutputWithContext(context.Context) AutoscalingBehaviorScalingPtrOutput
}

type autoscalingBehaviorScalingPtrType AutoscalingBehaviorScalingArgs

func AutoscalingBehaviorScalingPtr(v *AutoscalingBehaviorScalingArgs) AutoscalingBehaviorScalingPtrInput {
	return (*autoscalingBehaviorScalingPtrType)(v)
}

func (*autoscalingBehaviorScalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingBehaviorScaling)(nil)).Elem()
}

func (i *autoscalingBehaviorScalingPtrType) ToAutoscalingBehaviorScalingPtrOutput() AutoscalingBehaviorScalingPtrOutput {
	return i.ToAutoscalingBehaviorScalingPtrOutputWithContext(context.Background())
}

func (i *autoscalingBehaviorScalingPtrType) ToAutoscalingBehaviorScalingPtrOutputWithContext(ctx context.Context) AutoscalingBehaviorScalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingBehaviorScalingPtrOutput)
}

type AutoscalingBehaviorScalingOutput struct{ *pulumi.OutputState }

func (AutoscalingBehaviorScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingBehaviorScaling)(nil)).Elem()
}

func (o AutoscalingBehaviorScalingOutput) ToAutoscalingBehaviorScalingOutput() AutoscalingBehaviorScalingOutput {
	return o
}

func (o AutoscalingBehaviorScalingOutput) ToAutoscalingBehaviorScalingOutputWithContext(ctx context.Context) AutoscalingBehaviorScalingOutput {
	return o
}

func (o AutoscalingBehaviorScalingOutput) ToAutoscalingBehaviorScalingPtrOutput() AutoscalingBehaviorScalingPtrOutput {
	return o.ToAutoscalingBehaviorScalingPtrOutputWithContext(context.Background())
}

func (o AutoscalingBehaviorScalingOutput) ToAutoscalingBehaviorScalingPtrOutputWithContext(ctx context.Context) AutoscalingBehaviorScalingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoscalingBehaviorScaling) *AutoscalingBehaviorScaling {
		return &v
	}).(AutoscalingBehaviorScalingPtrOutput)
}

func (o AutoscalingBehaviorScalingOutput) Policies() AutoscalingBehaviorScalingPolicyArrayOutput {
	return o.ApplyT(func(v AutoscalingBehaviorScaling) []AutoscalingBehaviorScalingPolicy { return v.Policies }).(AutoscalingBehaviorScalingPolicyArrayOutput)
}

func (o AutoscalingBehaviorScalingOutput) StabilizationWindowSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscalingBehaviorScaling) *int { return v.StabilizationWindowSeconds }).(pulumi.IntPtrOutput)
}

type AutoscalingBehaviorScalingPtrOutput struct{ *pulumi.OutputState }

func (AutoscalingBehaviorScalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingBehaviorScaling)(nil)).Elem()
}

func (o AutoscalingBehaviorScalingPtrOutput) ToAutoscalingBehaviorScalingPtrOutput() AutoscalingBehaviorScalingPtrOutput {
	return o
}

func (o AutoscalingBehaviorScalingPtrOutput) ToAutoscalingBehaviorScalingPtrOutputWithContext(ctx context.Context) AutoscalingBehaviorScalingPtrOutput {
	return o
}

func (o AutoscalingBehaviorScalingPtrOutput) Elem() AutoscalingBehaviorScalingOutput {
	return o.ApplyT(func(v *AutoscalingBehaviorScaling) AutoscalingBehaviorScaling {
		if v != nil {
			return *v
		}
		var ret AutoscalingBehaviorScaling
		return ret
	}).(AutoscalingBehaviorScalingOutput)
}

func (o AutoscalingBehaviorScalingPtrOutput) Policies() AutoscalingBehaviorScalingPolicyArrayOutput {
	return o.ApplyT(func(v *AutoscalingBehaviorScaling) []AutoscalingBehaviorScalingPolicy {
		if v == nil {
			return nil
		}
		return v.Policies
	}).(AutoscalingBehaviorScalingPolicyArrayOutput)
}

func (o AutoscalingBehaviorScalingPtrOutput) StabilizationWindowSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalingBehaviorScaling) *int {
		if v == nil {
			return nil
		}
		return v.StabilizationWindowSeconds
	}).(pulumi.IntPtrOutput)
}

type AutoscalingBehaviorScalingPolicy struct {
	PeriodSeconds *int    `pulumi:"periodSeconds"`
	Type          *string `pulumi:"type"`
	Value         *int    `pulumi:"value"`
}

// AutoscalingBehaviorScalingPolicyInput is an input type that accepts AutoscalingBehaviorScalingPolicyArgs and AutoscalingBehaviorScalingPolicyOutput values.
// You can construct a concrete instance of `AutoscalingBehaviorScalingPolicyInput` via:
//
//	AutoscalingBehaviorScalingPolicyArgs{...}
type AutoscalingBehaviorScalingPolicyInput interface {
	pulumi.Input

	ToAutoscalingBehaviorScalingPolicyOutput() AutoscalingBehaviorScalingPolicyOutput
	ToAutoscalingBehaviorScalingPolicyOutputWithContext(context.Context) AutoscalingBehaviorScalingPolicyOutput
}

type AutoscalingBehaviorScalingPolicyArgs struct {
	PeriodSeconds pulumi.IntPtrInput    `pulumi:"periodSeconds"`
	Type          pulumi.StringPtrInput `pulumi:"type"`
	Value         pulumi.IntPtrInput    `pulumi:"value"`
}

func (AutoscalingBehaviorScalingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingBehaviorScalingPolicy)(nil)).Elem()
}

func (i AutoscalingBehaviorScalingPolicyArgs) ToAutoscalingBehaviorScalingPolicyOutput() AutoscalingBehaviorScalingPolicyOutput {
	return i.ToAutoscalingBehaviorScalingPolicyOutputWithContext(context.Background())
}

func (i AutoscalingBehaviorScalingPolicyArgs) ToAutoscalingBehaviorScalingPolicyOutputWithContext(ctx context.Context) AutoscalingBehaviorScalingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingBehaviorScalingPolicyOutput)
}

// AutoscalingBehaviorScalingPolicyArrayInput is an input type that accepts AutoscalingBehaviorScalingPolicyArray and AutoscalingBehaviorScalingPolicyArrayOutput values.
// You can construct a concrete instance of `AutoscalingBehaviorScalingPolicyArrayInput` via:
//
//	AutoscalingBehaviorScalingPolicyArray{ AutoscalingBehaviorScalingPolicyArgs{...} }
type AutoscalingBehaviorScalingPolicyArrayInput interface {
	pulumi.Input

	ToAutoscalingBehaviorScalingPolicyArrayOutput() AutoscalingBehaviorScalingPolicyArrayOutput
	ToAutoscalingBehaviorScalingPolicyArrayOutputWithContext(context.Context) AutoscalingBehaviorScalingPolicyArrayOutput
}

type AutoscalingBehaviorScalingPolicyArray []AutoscalingBehaviorScalingPolicyInput

func (AutoscalingBehaviorScalingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscalingBehaviorScalingPolicy)(nil)).Elem()
}

func (i AutoscalingBehaviorScalingPolicyArray) ToAutoscalingBehaviorScalingPolicyArrayOutput() AutoscalingBehaviorScalingPolicyArrayOutput {
	return i.ToAutoscalingBehaviorScalingPolicyArrayOutputWithContext(context.Background())
}

func (i AutoscalingBehaviorScalingPolicyArray) ToAutoscalingBehaviorScalingPolicyArrayOutputWithContext(ctx context.Context) AutoscalingBehaviorScalingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingBehaviorScalingPolicyArrayOutput)
}

type AutoscalingBehaviorScalingPolicyOutput struct{ *pulumi.OutputState }

func (AutoscalingBehaviorScalingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingBehaviorScalingPolicy)(nil)).Elem()
}

func (o AutoscalingBehaviorScalingPolicyOutput) ToAutoscalingBehaviorScalingPolicyOutput() AutoscalingBehaviorScalingPolicyOutput {
	return o
}

func (o AutoscalingBehaviorScalingPolicyOutput) ToAutoscalingBehaviorScalingPolicyOutputWithContext(ctx context.Context) AutoscalingBehaviorScalingPolicyOutput {
	return o
}

func (o AutoscalingBehaviorScalingPolicyOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscalingBehaviorScalingPolicy) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

func (o AutoscalingBehaviorScalingPolicyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscalingBehaviorScalingPolicy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o AutoscalingBehaviorScalingPolicyOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscalingBehaviorScalingPolicy) *int { return v.Value }).(pulumi.IntPtrOutput)
}

type AutoscalingBehaviorScalingPolicyArrayOutput struct{ *pulumi.OutputState }

func (AutoscalingBehaviorScalingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscalingBehaviorScalingPolicy)(nil)).Elem()
}

func (o AutoscalingBehaviorScalingPolicyArrayOutput) ToAutoscalingBehaviorScalingPolicyArrayOutput() AutoscalingBehaviorScalingPolicyArrayOutput {
	return o
}

func (o AutoscalingBehaviorScalingPolicyArrayOutput) ToAutoscalingBehaviorScalingPolicyArrayOutputWithContext(ctx context.Context) AutoscalingBehaviorScalingPolicyArrayOutput {
	return o
}

func (o AutoscalingBehaviorScalingPolicyArrayOutput) Index(i pulumi.IntInput) AutoscalingBehaviorScalingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutoscalingBehaviorScalingPolicy {
		return vs[0].([]AutoscalingBehaviorScalingPolicy)[vs[1].(int)]
	}).(AutoscalingBehaviorScalingPolicyOutput)
}

type AutoscalingTemplate struct {
	Pods *AutoscalingTemplatePods `pulumi:"pods"`
	Type *string                  `pulumi:"type"`
}

// AutoscalingTemplateInput is an input type that accepts AutoscalingTemplateArgs and AutoscalingTemplateOutput values.
// You can construct a concrete instance of `AutoscalingTemplateInput` via:
//
//	AutoscalingTemplateArgs{...}
type AutoscalingTemplateInput interface {
	pulumi.Input

	ToAutoscalingTemplateOutput() AutoscalingTemplateOutput
	ToAutoscalingTemplateOutputWithContext(context.Context) AutoscalingTemplateOutput
}

type AutoscalingTemplateArgs struct {
	Pods AutoscalingTemplatePodsPtrInput `pulumi:"pods"`
	Type pulumi.StringPtrInput           `pulumi:"type"`
}

func (AutoscalingTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingTemplate)(nil)).Elem()
}

func (i AutoscalingTemplateArgs) ToAutoscalingTemplateOutput() AutoscalingTemplateOutput {
	return i.ToAutoscalingTemplateOutputWithContext(context.Background())
}

func (i AutoscalingTemplateArgs) ToAutoscalingTemplateOutputWithContext(ctx context.Context) AutoscalingTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingTemplateOutput)
}

// AutoscalingTemplateArrayInput is an input type that accepts AutoscalingTemplateArray and AutoscalingTemplateArrayOutput values.
// You can construct a concrete instance of `AutoscalingTemplateArrayInput` via:
//
//	AutoscalingTemplateArray{ AutoscalingTemplateArgs{...} }
type AutoscalingTemplateArrayInput interface {
	pulumi.Input

	ToAutoscalingTemplateArrayOutput() AutoscalingTemplateArrayOutput
	ToAutoscalingTemplateArrayOutputWithContext(context.Context) AutoscalingTemplateArrayOutput
}

type AutoscalingTemplateArray []AutoscalingTemplateInput

func (AutoscalingTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscalingTemplate)(nil)).Elem()
}

func (i AutoscalingTemplateArray) ToAutoscalingTemplateArrayOutput() AutoscalingTemplateArrayOutput {
	return i.ToAutoscalingTemplateArrayOutputWithContext(context.Background())
}

func (i AutoscalingTemplateArray) ToAutoscalingTemplateArrayOutputWithContext(ctx context.Context) AutoscalingTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingTemplateArrayOutput)
}

type AutoscalingTemplateOutput struct{ *pulumi.OutputState }

func (AutoscalingTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingTemplate)(nil)).Elem()
}

func (o AutoscalingTemplateOutput) ToAutoscalingTemplateOutput() AutoscalingTemplateOutput {
	return o
}

func (o AutoscalingTemplateOutput) ToAutoscalingTemplateOutputWithContext(ctx context.Context) AutoscalingTemplateOutput {
	return o
}

func (o AutoscalingTemplateOutput) Pods() AutoscalingTemplatePodsPtrOutput {
	return o.ApplyT(func(v AutoscalingTemplate) *AutoscalingTemplatePods { return v.Pods }).(AutoscalingTemplatePodsPtrOutput)
}

func (o AutoscalingTemplateOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscalingTemplate) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type AutoscalingTemplateArrayOutput struct{ *pulumi.OutputState }

func (AutoscalingTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscalingTemplate)(nil)).Elem()
}

func (o AutoscalingTemplateArrayOutput) ToAutoscalingTemplateArrayOutput() AutoscalingTemplateArrayOutput {
	return o
}

func (o AutoscalingTemplateArrayOutput) ToAutoscalingTemplateArrayOutputWithContext(ctx context.Context) AutoscalingTemplateArrayOutput {
	return o
}

func (o AutoscalingTemplateArrayOutput) Index(i pulumi.IntInput) AutoscalingTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutoscalingTemplate {
		return vs[0].([]AutoscalingTemplate)[vs[1].(int)]
	}).(AutoscalingTemplateOutput)
}

type AutoscalingTemplatePods struct {
	Metric *AutoscalingTemplatePodsMetric `pulumi:"metric"`
	Target *AutoscalingTemplatePodsTarget `pulumi:"target"`
}

// AutoscalingTemplatePodsInput is an input type that accepts AutoscalingTemplatePodsArgs and AutoscalingTemplatePodsOutput values.
// You can construct a concrete instance of `AutoscalingTemplatePodsInput` via:
//
//	AutoscalingTemplatePodsArgs{...}
type AutoscalingTemplatePodsInput interface {
	pulumi.Input

	ToAutoscalingTemplatePodsOutput() AutoscalingTemplatePodsOutput
	ToAutoscalingTemplatePodsOutputWithContext(context.Context) AutoscalingTemplatePodsOutput
}

type AutoscalingTemplatePodsArgs struct {
	Metric AutoscalingTemplatePodsMetricPtrInput `pulumi:"metric"`
	Target AutoscalingTemplatePodsTargetPtrInput `pulumi:"target"`
}

func (AutoscalingTemplatePodsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingTemplatePods)(nil)).Elem()
}

func (i AutoscalingTemplatePodsArgs) ToAutoscalingTemplatePodsOutput() AutoscalingTemplatePodsOutput {
	return i.ToAutoscalingTemplatePodsOutputWithContext(context.Background())
}

func (i AutoscalingTemplatePodsArgs) ToAutoscalingTemplatePodsOutputWithContext(ctx context.Context) AutoscalingTemplatePodsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingTemplatePodsOutput)
}

func (i AutoscalingTemplatePodsArgs) ToAutoscalingTemplatePodsPtrOutput() AutoscalingTemplatePodsPtrOutput {
	return i.ToAutoscalingTemplatePodsPtrOutputWithContext(context.Background())
}

func (i AutoscalingTemplatePodsArgs) ToAutoscalingTemplatePodsPtrOutputWithContext(ctx context.Context) AutoscalingTemplatePodsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingTemplatePodsOutput).ToAutoscalingTemplatePodsPtrOutputWithContext(ctx)
}

// AutoscalingTemplatePodsPtrInput is an input type that accepts AutoscalingTemplatePodsArgs, AutoscalingTemplatePodsPtr and AutoscalingTemplatePodsPtrOutput values.
// You can construct a concrete instance of `AutoscalingTemplatePodsPtrInput` via:
//
//	        AutoscalingTemplatePodsArgs{...}
//
//	or:
//
//	        nil
type AutoscalingTemplatePodsPtrInput interface {
	pulumi.Input

	ToAutoscalingTemplatePodsPtrOutput() AutoscalingTemplatePodsPtrOutput
	ToAutoscalingTemplatePodsPtrOutputWithContext(context.Context) AutoscalingTemplatePodsPtrOutput
}

type autoscalingTemplatePodsPtrType AutoscalingTemplatePodsArgs

func AutoscalingTemplatePodsPtr(v *AutoscalingTemplatePodsArgs) AutoscalingTemplatePodsPtrInput {
	return (*autoscalingTemplatePodsPtrType)(v)
}

func (*autoscalingTemplatePodsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingTemplatePods)(nil)).Elem()
}

func (i *autoscalingTemplatePodsPtrType) ToAutoscalingTemplatePodsPtrOutput() AutoscalingTemplatePodsPtrOutput {
	return i.ToAutoscalingTemplatePodsPtrOutputWithContext(context.Background())
}

func (i *autoscalingTemplatePodsPtrType) ToAutoscalingTemplatePodsPtrOutputWithContext(ctx context.Context) AutoscalingTemplatePodsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingTemplatePodsPtrOutput)
}

type AutoscalingTemplatePodsOutput struct{ *pulumi.OutputState }

func (AutoscalingTemplatePodsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingTemplatePods)(nil)).Elem()
}

func (o AutoscalingTemplatePodsOutput) ToAutoscalingTemplatePodsOutput() AutoscalingTemplatePodsOutput {
	return o
}

func (o AutoscalingTemplatePodsOutput) ToAutoscalingTemplatePodsOutputWithContext(ctx context.Context) AutoscalingTemplatePodsOutput {
	return o
}

func (o AutoscalingTemplatePodsOutput) ToAutoscalingTemplatePodsPtrOutput() AutoscalingTemplatePodsPtrOutput {
	return o.ToAutoscalingTemplatePodsPtrOutputWithContext(context.Background())
}

func (o AutoscalingTemplatePodsOutput) ToAutoscalingTemplatePodsPtrOutputWithContext(ctx context.Context) AutoscalingTemplatePodsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoscalingTemplatePods) *AutoscalingTemplatePods {
		return &v
	}).(AutoscalingTemplatePodsPtrOutput)
}

func (o AutoscalingTemplatePodsOutput) Metric() AutoscalingTemplatePodsMetricPtrOutput {
	return o.ApplyT(func(v AutoscalingTemplatePods) *AutoscalingTemplatePodsMetric { return v.Metric }).(AutoscalingTemplatePodsMetricPtrOutput)
}

func (o AutoscalingTemplatePodsOutput) Target() AutoscalingTemplatePodsTargetPtrOutput {
	return o.ApplyT(func(v AutoscalingTemplatePods) *AutoscalingTemplatePodsTarget { return v.Target }).(AutoscalingTemplatePodsTargetPtrOutput)
}

type AutoscalingTemplatePodsPtrOutput struct{ *pulumi.OutputState }

func (AutoscalingTemplatePodsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingTemplatePods)(nil)).Elem()
}

func (o AutoscalingTemplatePodsPtrOutput) ToAutoscalingTemplatePodsPtrOutput() AutoscalingTemplatePodsPtrOutput {
	return o
}

func (o AutoscalingTemplatePodsPtrOutput) ToAutoscalingTemplatePodsPtrOutputWithContext(ctx context.Context) AutoscalingTemplatePodsPtrOutput {
	return o
}

func (o AutoscalingTemplatePodsPtrOutput) Elem() AutoscalingTemplatePodsOutput {
	return o.ApplyT(func(v *AutoscalingTemplatePods) AutoscalingTemplatePods {
		if v != nil {
			return *v
		}
		var ret AutoscalingTemplatePods
		return ret
	}).(AutoscalingTemplatePodsOutput)
}

func (o AutoscalingTemplatePodsPtrOutput) Metric() AutoscalingTemplatePodsMetricPtrOutput {
	return o.ApplyT(func(v *AutoscalingTemplatePods) *AutoscalingTemplatePodsMetric {
		if v == nil {
			return nil
		}
		return v.Metric
	}).(AutoscalingTemplatePodsMetricPtrOutput)
}

func (o AutoscalingTemplatePodsPtrOutput) Target() AutoscalingTemplatePodsTargetPtrOutput {
	return o.ApplyT(func(v *AutoscalingTemplatePods) *AutoscalingTemplatePodsTarget {
		if v == nil {
			return nil
		}
		return v.Target
	}).(AutoscalingTemplatePodsTargetPtrOutput)
}

type AutoscalingTemplatePodsMetric struct {
	Name *string `pulumi:"name"`
}

// AutoscalingTemplatePodsMetricInput is an input type that accepts AutoscalingTemplatePodsMetricArgs and AutoscalingTemplatePodsMetricOutput values.
// You can construct a concrete instance of `AutoscalingTemplatePodsMetricInput` via:
//
//	AutoscalingTemplatePodsMetricArgs{...}
type AutoscalingTemplatePodsMetricInput interface {
	pulumi.Input

	ToAutoscalingTemplatePodsMetricOutput() AutoscalingTemplatePodsMetricOutput
	ToAutoscalingTemplatePodsMetricOutputWithContext(context.Context) AutoscalingTemplatePodsMetricOutput
}

type AutoscalingTemplatePodsMetricArgs struct {
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AutoscalingTemplatePodsMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingTemplatePodsMetric)(nil)).Elem()
}

func (i AutoscalingTemplatePodsMetricArgs) ToAutoscalingTemplatePodsMetricOutput() AutoscalingTemplatePodsMetricOutput {
	return i.ToAutoscalingTemplatePodsMetricOutputWithContext(context.Background())
}

func (i AutoscalingTemplatePodsMetricArgs) ToAutoscalingTemplatePodsMetricOutputWithContext(ctx context.Context) AutoscalingTemplatePodsMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingTemplatePodsMetricOutput)
}

func (i AutoscalingTemplatePodsMetricArgs) ToAutoscalingTemplatePodsMetricPtrOutput() AutoscalingTemplatePodsMetricPtrOutput {
	return i.ToAutoscalingTemplatePodsMetricPtrOutputWithContext(context.Background())
}

func (i AutoscalingTemplatePodsMetricArgs) ToAutoscalingTemplatePodsMetricPtrOutputWithContext(ctx context.Context) AutoscalingTemplatePodsMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingTemplatePodsMetricOutput).ToAutoscalingTemplatePodsMetricPtrOutputWithContext(ctx)
}

// AutoscalingTemplatePodsMetricPtrInput is an input type that accepts AutoscalingTemplatePodsMetricArgs, AutoscalingTemplatePodsMetricPtr and AutoscalingTemplatePodsMetricPtrOutput values.
// You can construct a concrete instance of `AutoscalingTemplatePodsMetricPtrInput` via:
//
//	        AutoscalingTemplatePodsMetricArgs{...}
//
//	or:
//
//	        nil
type AutoscalingTemplatePodsMetricPtrInput interface {
	pulumi.Input

	ToAutoscalingTemplatePodsMetricPtrOutput() AutoscalingTemplatePodsMetricPtrOutput
	ToAutoscalingTemplatePodsMetricPtrOutputWithContext(context.Context) AutoscalingTemplatePodsMetricPtrOutput
}

type autoscalingTemplatePodsMetricPtrType AutoscalingTemplatePodsMetricArgs

func AutoscalingTemplatePodsMetricPtr(v *AutoscalingTemplatePodsMetricArgs) AutoscalingTemplatePodsMetricPtrInput {
	return (*autoscalingTemplatePodsMetricPtrType)(v)
}

func (*autoscalingTemplatePodsMetricPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingTemplatePodsMetric)(nil)).Elem()
}

func (i *autoscalingTemplatePodsMetricPtrType) ToAutoscalingTemplatePodsMetricPtrOutput() AutoscalingTemplatePodsMetricPtrOutput {
	return i.ToAutoscalingTemplatePodsMetricPtrOutputWithContext(context.Background())
}

func (i *autoscalingTemplatePodsMetricPtrType) ToAutoscalingTemplatePodsMetricPtrOutputWithContext(ctx context.Context) AutoscalingTemplatePodsMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingTemplatePodsMetricPtrOutput)
}

type AutoscalingTemplatePodsMetricOutput struct{ *pulumi.OutputState }

func (AutoscalingTemplatePodsMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingTemplatePodsMetric)(nil)).Elem()
}

func (o AutoscalingTemplatePodsMetricOutput) ToAutoscalingTemplatePodsMetricOutput() AutoscalingTemplatePodsMetricOutput {
	return o
}

func (o AutoscalingTemplatePodsMetricOutput) ToAutoscalingTemplatePodsMetricOutputWithContext(ctx context.Context) AutoscalingTemplatePodsMetricOutput {
	return o
}

func (o AutoscalingTemplatePodsMetricOutput) ToAutoscalingTemplatePodsMetricPtrOutput() AutoscalingTemplatePodsMetricPtrOutput {
	return o.ToAutoscalingTemplatePodsMetricPtrOutputWithContext(context.Background())
}

func (o AutoscalingTemplatePodsMetricOutput) ToAutoscalingTemplatePodsMetricPtrOutputWithContext(ctx context.Context) AutoscalingTemplatePodsMetricPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoscalingTemplatePodsMetric) *AutoscalingTemplatePodsMetric {
		return &v
	}).(AutoscalingTemplatePodsMetricPtrOutput)
}

func (o AutoscalingTemplatePodsMetricOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscalingTemplatePodsMetric) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AutoscalingTemplatePodsMetricPtrOutput struct{ *pulumi.OutputState }

func (AutoscalingTemplatePodsMetricPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingTemplatePodsMetric)(nil)).Elem()
}

func (o AutoscalingTemplatePodsMetricPtrOutput) ToAutoscalingTemplatePodsMetricPtrOutput() AutoscalingTemplatePodsMetricPtrOutput {
	return o
}

func (o AutoscalingTemplatePodsMetricPtrOutput) ToAutoscalingTemplatePodsMetricPtrOutputWithContext(ctx context.Context) AutoscalingTemplatePodsMetricPtrOutput {
	return o
}

func (o AutoscalingTemplatePodsMetricPtrOutput) Elem() AutoscalingTemplatePodsMetricOutput {
	return o.ApplyT(func(v *AutoscalingTemplatePodsMetric) AutoscalingTemplatePodsMetric {
		if v != nil {
			return *v
		}
		var ret AutoscalingTemplatePodsMetric
		return ret
	}).(AutoscalingTemplatePodsMetricOutput)
}

func (o AutoscalingTemplatePodsMetricPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoscalingTemplatePodsMetric) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type AutoscalingTemplatePodsTarget struct {
	AverageValue *string `pulumi:"averageValue"`
	Type         *string `pulumi:"type"`
}

// AutoscalingTemplatePodsTargetInput is an input type that accepts AutoscalingTemplatePodsTargetArgs and AutoscalingTemplatePodsTargetOutput values.
// You can construct a concrete instance of `AutoscalingTemplatePodsTargetInput` via:
//
//	AutoscalingTemplatePodsTargetArgs{...}
type AutoscalingTemplatePodsTargetInput interface {
	pulumi.Input

	ToAutoscalingTemplatePodsTargetOutput() AutoscalingTemplatePodsTargetOutput
	ToAutoscalingTemplatePodsTargetOutputWithContext(context.Context) AutoscalingTemplatePodsTargetOutput
}

type AutoscalingTemplatePodsTargetArgs struct {
	AverageValue pulumi.StringPtrInput `pulumi:"averageValue"`
	Type         pulumi.StringPtrInput `pulumi:"type"`
}

func (AutoscalingTemplatePodsTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingTemplatePodsTarget)(nil)).Elem()
}

func (i AutoscalingTemplatePodsTargetArgs) ToAutoscalingTemplatePodsTargetOutput() AutoscalingTemplatePodsTargetOutput {
	return i.ToAutoscalingTemplatePodsTargetOutputWithContext(context.Background())
}

func (i AutoscalingTemplatePodsTargetArgs) ToAutoscalingTemplatePodsTargetOutputWithContext(ctx context.Context) AutoscalingTemplatePodsTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingTemplatePodsTargetOutput)
}

func (i AutoscalingTemplatePodsTargetArgs) ToAutoscalingTemplatePodsTargetPtrOutput() AutoscalingTemplatePodsTargetPtrOutput {
	return i.ToAutoscalingTemplatePodsTargetPtrOutputWithContext(context.Background())
}

func (i AutoscalingTemplatePodsTargetArgs) ToAutoscalingTemplatePodsTargetPtrOutputWithContext(ctx context.Context) AutoscalingTemplatePodsTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingTemplatePodsTargetOutput).ToAutoscalingTemplatePodsTargetPtrOutputWithContext(ctx)
}

// AutoscalingTemplatePodsTargetPtrInput is an input type that accepts AutoscalingTemplatePodsTargetArgs, AutoscalingTemplatePodsTargetPtr and AutoscalingTemplatePodsTargetPtrOutput values.
// You can construct a concrete instance of `AutoscalingTemplatePodsTargetPtrInput` via:
//
//	        AutoscalingTemplatePodsTargetArgs{...}
//
//	or:
//
//	        nil
type AutoscalingTemplatePodsTargetPtrInput interface {
	pulumi.Input

	ToAutoscalingTemplatePodsTargetPtrOutput() AutoscalingTemplatePodsTargetPtrOutput
	ToAutoscalingTemplatePodsTargetPtrOutputWithContext(context.Context) AutoscalingTemplatePodsTargetPtrOutput
}

type autoscalingTemplatePodsTargetPtrType AutoscalingTemplatePodsTargetArgs

func AutoscalingTemplatePodsTargetPtr(v *AutoscalingTemplatePodsTargetArgs) AutoscalingTemplatePodsTargetPtrInput {
	return (*autoscalingTemplatePodsTargetPtrType)(v)
}

func (*autoscalingTemplatePodsTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingTemplatePodsTarget)(nil)).Elem()
}

func (i *autoscalingTemplatePodsTargetPtrType) ToAutoscalingTemplatePodsTargetPtrOutput() AutoscalingTemplatePodsTargetPtrOutput {
	return i.ToAutoscalingTemplatePodsTargetPtrOutputWithContext(context.Background())
}

func (i *autoscalingTemplatePodsTargetPtrType) ToAutoscalingTemplatePodsTargetPtrOutputWithContext(ctx context.Context) AutoscalingTemplatePodsTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingTemplatePodsTargetPtrOutput)
}

type AutoscalingTemplatePodsTargetOutput struct{ *pulumi.OutputState }

func (AutoscalingTemplatePodsTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingTemplatePodsTarget)(nil)).Elem()
}

func (o AutoscalingTemplatePodsTargetOutput) ToAutoscalingTemplatePodsTargetOutput() AutoscalingTemplatePodsTargetOutput {
	return o
}

func (o AutoscalingTemplatePodsTargetOutput) ToAutoscalingTemplatePodsTargetOutputWithContext(ctx context.Context) AutoscalingTemplatePodsTargetOutput {
	return o
}

func (o AutoscalingTemplatePodsTargetOutput) ToAutoscalingTemplatePodsTargetPtrOutput() AutoscalingTemplatePodsTargetPtrOutput {
	return o.ToAutoscalingTemplatePodsTargetPtrOutputWithContext(context.Background())
}

func (o AutoscalingTemplatePodsTargetOutput) ToAutoscalingTemplatePodsTargetPtrOutputWithContext(ctx context.Context) AutoscalingTemplatePodsTargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoscalingTemplatePodsTarget) *AutoscalingTemplatePodsTarget {
		return &v
	}).(AutoscalingTemplatePodsTargetPtrOutput)
}

func (o AutoscalingTemplatePodsTargetOutput) AverageValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscalingTemplatePodsTarget) *string { return v.AverageValue }).(pulumi.StringPtrOutput)
}

func (o AutoscalingTemplatePodsTargetOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscalingTemplatePodsTarget) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type AutoscalingTemplatePodsTargetPtrOutput struct{ *pulumi.OutputState }

func (AutoscalingTemplatePodsTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingTemplatePodsTarget)(nil)).Elem()
}

func (o AutoscalingTemplatePodsTargetPtrOutput) ToAutoscalingTemplatePodsTargetPtrOutput() AutoscalingTemplatePodsTargetPtrOutput {
	return o
}

func (o AutoscalingTemplatePodsTargetPtrOutput) ToAutoscalingTemplatePodsTargetPtrOutputWithContext(ctx context.Context) AutoscalingTemplatePodsTargetPtrOutput {
	return o
}

func (o AutoscalingTemplatePodsTargetPtrOutput) Elem() AutoscalingTemplatePodsTargetOutput {
	return o.ApplyT(func(v *AutoscalingTemplatePodsTarget) AutoscalingTemplatePodsTarget {
		if v != nil {
			return *v
		}
		var ret AutoscalingTemplatePodsTarget
		return ret
	}).(AutoscalingTemplatePodsTargetOutput)
}

func (o AutoscalingTemplatePodsTargetPtrOutput) AverageValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoscalingTemplatePodsTarget) *string {
		if v == nil {
			return nil
		}
		return v.AverageValue
	}).(pulumi.StringPtrOutput)
}

func (o AutoscalingTemplatePodsTargetPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoscalingTemplatePodsTarget) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type ContollerAdmissionWebhooks struct {
	Annotations     map[string]string                           `pulumi:"annotations"`
	Certificate     *string                                     `pulumi:"certificate"`
	CreateSecretJob *ControllerAdmissionWebhooksCreateSecretJob `pulumi:"createSecretJob"`
	Enabled         *bool                                       `pulumi:"enabled"`
	// Use an existing PSP instead of creating one.
	ExistingPsp       *string                                      `pulumi:"existingPsp"`
	FailurePolicy     *string                                      `pulumi:"failurePolicy"`
	Key               *string                                      `pulumi:"key"`
	NamespaceSelector map[string]map[string]string                 `pulumi:"namespaceSelector"`
	ObjectSelector    map[string]map[string]string                 `pulumi:"objectSelector"`
	Patch             *ControllerAdmissionWebhooksPatch            `pulumi:"patch"`
	PatchWebhookJob   *ControllerAdmissionWebhooksPatchWebhbookJob `pulumi:"patchWebhookJob"`
	Port              *int                                         `pulumi:"port"`
	Service           *ControllerAdmissionWebhooksService          `pulumi:"service"`
	TimeoutSeconds    *int                                         `pulumi:"timeoutSeconds"`
}

// ContollerAdmissionWebhooksInput is an input type that accepts ContollerAdmissionWebhooksArgs and ContollerAdmissionWebhooksOutput values.
// You can construct a concrete instance of `ContollerAdmissionWebhooksInput` via:
//
//	ContollerAdmissionWebhooksArgs{...}
type ContollerAdmissionWebhooksInput interface {
	pulumi.Input

	ToContollerAdmissionWebhooksOutput() ContollerAdmissionWebhooksOutput
	ToContollerAdmissionWebhooksOutputWithContext(context.Context) ContollerAdmissionWebhooksOutput
}

type ContollerAdmissionWebhooksArgs struct {
	Annotations     pulumi.StringMapInput                              `pulumi:"annotations"`
	Certificate     pulumi.StringPtrInput                              `pulumi:"certificate"`
	CreateSecretJob ControllerAdmissionWebhooksCreateSecretJobPtrInput `pulumi:"createSecretJob"`
	Enabled         pulumi.BoolPtrInput                                `pulumi:"enabled"`
	// Use an existing PSP instead of creating one.
	ExistingPsp       pulumi.StringPtrInput                               `pulumi:"existingPsp"`
	FailurePolicy     pulumi.StringPtrInput                               `pulumi:"failurePolicy"`
	Key               pulumi.StringPtrInput                               `pulumi:"key"`
	NamespaceSelector pulumi.StringMapMapInput                            `pulumi:"namespaceSelector"`
	ObjectSelector    pulumi.StringMapMapInput                            `pulumi:"objectSelector"`
	Patch             ControllerAdmissionWebhooksPatchPtrInput            `pulumi:"patch"`
	PatchWebhookJob   ControllerAdmissionWebhooksPatchWebhbookJobPtrInput `pulumi:"patchWebhookJob"`
	Port              pulumi.IntPtrInput                                  `pulumi:"port"`
	Service           ControllerAdmissionWebhooksServicePtrInput          `pulumi:"service"`
	TimeoutSeconds    pulumi.IntPtrInput                                  `pulumi:"timeoutSeconds"`
}

func (ContollerAdmissionWebhooksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContollerAdmissionWebhooks)(nil)).Elem()
}

func (i ContollerAdmissionWebhooksArgs) ToContollerAdmissionWebhooksOutput() ContollerAdmissionWebhooksOutput {
	return i.ToContollerAdmissionWebhooksOutputWithContext(context.Background())
}

func (i ContollerAdmissionWebhooksArgs) ToContollerAdmissionWebhooksOutputWithContext(ctx context.Context) ContollerAdmissionWebhooksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContollerAdmissionWebhooksOutput)
}

func (i ContollerAdmissionWebhooksArgs) ToContollerAdmissionWebhooksPtrOutput() ContollerAdmissionWebhooksPtrOutput {
	return i.ToContollerAdmissionWebhooksPtrOutputWithContext(context.Background())
}

func (i ContollerAdmissionWebhooksArgs) ToContollerAdmissionWebhooksPtrOutputWithContext(ctx context.Context) ContollerAdmissionWebhooksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContollerAdmissionWebhooksOutput).ToContollerAdmissionWebhooksPtrOutputWithContext(ctx)
}

// ContollerAdmissionWebhooksPtrInput is an input type that accepts ContollerAdmissionWebhooksArgs, ContollerAdmissionWebhooksPtr and ContollerAdmissionWebhooksPtrOutput values.
// You can construct a concrete instance of `ContollerAdmissionWebhooksPtrInput` via:
//
//	        ContollerAdmissionWebhooksArgs{...}
//
//	or:
//
//	        nil
type ContollerAdmissionWebhooksPtrInput interface {
	pulumi.Input

	ToContollerAdmissionWebhooksPtrOutput() ContollerAdmissionWebhooksPtrOutput
	ToContollerAdmissionWebhooksPtrOutputWithContext(context.Context) ContollerAdmissionWebhooksPtrOutput
}

type contollerAdmissionWebhooksPtrType ContollerAdmissionWebhooksArgs

func ContollerAdmissionWebhooksPtr(v *ContollerAdmissionWebhooksArgs) ContollerAdmissionWebhooksPtrInput {
	return (*contollerAdmissionWebhooksPtrType)(v)
}

func (*contollerAdmissionWebhooksPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContollerAdmissionWebhooks)(nil)).Elem()
}

func (i *contollerAdmissionWebhooksPtrType) ToContollerAdmissionWebhooksPtrOutput() ContollerAdmissionWebhooksPtrOutput {
	return i.ToContollerAdmissionWebhooksPtrOutputWithContext(context.Background())
}

func (i *contollerAdmissionWebhooksPtrType) ToContollerAdmissionWebhooksPtrOutputWithContext(ctx context.Context) ContollerAdmissionWebhooksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContollerAdmissionWebhooksPtrOutput)
}

type ContollerAdmissionWebhooksOutput struct{ *pulumi.OutputState }

func (ContollerAdmissionWebhooksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContollerAdmissionWebhooks)(nil)).Elem()
}

func (o ContollerAdmissionWebhooksOutput) ToContollerAdmissionWebhooksOutput() ContollerAdmissionWebhooksOutput {
	return o
}

func (o ContollerAdmissionWebhooksOutput) ToContollerAdmissionWebhooksOutputWithContext(ctx context.Context) ContollerAdmissionWebhooksOutput {
	return o
}

func (o ContollerAdmissionWebhooksOutput) ToContollerAdmissionWebhooksPtrOutput() ContollerAdmissionWebhooksPtrOutput {
	return o.ToContollerAdmissionWebhooksPtrOutputWithContext(context.Background())
}

func (o ContollerAdmissionWebhooksOutput) ToContollerAdmissionWebhooksPtrOutputWithContext(ctx context.Context) ContollerAdmissionWebhooksPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContollerAdmissionWebhooks) *ContollerAdmissionWebhooks {
		return &v
	}).(ContollerAdmissionWebhooksPtrOutput)
}

func (o ContollerAdmissionWebhooksOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContollerAdmissionWebhooks) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o ContollerAdmissionWebhooksOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContollerAdmissionWebhooks) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

func (o ContollerAdmissionWebhooksOutput) CreateSecretJob() ControllerAdmissionWebhooksCreateSecretJobPtrOutput {
	return o.ApplyT(func(v ContollerAdmissionWebhooks) *ControllerAdmissionWebhooksCreateSecretJob {
		return v.CreateSecretJob
	}).(ControllerAdmissionWebhooksCreateSecretJobPtrOutput)
}

func (o ContollerAdmissionWebhooksOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContollerAdmissionWebhooks) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Use an existing PSP instead of creating one.
func (o ContollerAdmissionWebhooksOutput) ExistingPsp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContollerAdmissionWebhooks) *string { return v.ExistingPsp }).(pulumi.StringPtrOutput)
}

func (o ContollerAdmissionWebhooksOutput) FailurePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContollerAdmissionWebhooks) *string { return v.FailurePolicy }).(pulumi.StringPtrOutput)
}

func (o ContollerAdmissionWebhooksOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContollerAdmissionWebhooks) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o ContollerAdmissionWebhooksOutput) NamespaceSelector() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v ContollerAdmissionWebhooks) map[string]map[string]string { return v.NamespaceSelector }).(pulumi.StringMapMapOutput)
}

func (o ContollerAdmissionWebhooksOutput) ObjectSelector() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v ContollerAdmissionWebhooks) map[string]map[string]string { return v.ObjectSelector }).(pulumi.StringMapMapOutput)
}

func (o ContollerAdmissionWebhooksOutput) Patch() ControllerAdmissionWebhooksPatchPtrOutput {
	return o.ApplyT(func(v ContollerAdmissionWebhooks) *ControllerAdmissionWebhooksPatch { return v.Patch }).(ControllerAdmissionWebhooksPatchPtrOutput)
}

func (o ContollerAdmissionWebhooksOutput) PatchWebhookJob() ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput {
	return o.ApplyT(func(v ContollerAdmissionWebhooks) *ControllerAdmissionWebhooksPatchWebhbookJob {
		return v.PatchWebhookJob
	}).(ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput)
}

func (o ContollerAdmissionWebhooksOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContollerAdmissionWebhooks) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o ContollerAdmissionWebhooksOutput) Service() ControllerAdmissionWebhooksServicePtrOutput {
	return o.ApplyT(func(v ContollerAdmissionWebhooks) *ControllerAdmissionWebhooksService { return v.Service }).(ControllerAdmissionWebhooksServicePtrOutput)
}

func (o ContollerAdmissionWebhooksOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContollerAdmissionWebhooks) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ContollerAdmissionWebhooksPtrOutput struct{ *pulumi.OutputState }

func (ContollerAdmissionWebhooksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContollerAdmissionWebhooks)(nil)).Elem()
}

func (o ContollerAdmissionWebhooksPtrOutput) ToContollerAdmissionWebhooksPtrOutput() ContollerAdmissionWebhooksPtrOutput {
	return o
}

func (o ContollerAdmissionWebhooksPtrOutput) ToContollerAdmissionWebhooksPtrOutputWithContext(ctx context.Context) ContollerAdmissionWebhooksPtrOutput {
	return o
}

func (o ContollerAdmissionWebhooksPtrOutput) Elem() ContollerAdmissionWebhooksOutput {
	return o.ApplyT(func(v *ContollerAdmissionWebhooks) ContollerAdmissionWebhooks {
		if v != nil {
			return *v
		}
		var ret ContollerAdmissionWebhooks
		return ret
	}).(ContollerAdmissionWebhooksOutput)
}

func (o ContollerAdmissionWebhooksPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContollerAdmissionWebhooks) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o ContollerAdmissionWebhooksPtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContollerAdmissionWebhooks) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

func (o ContollerAdmissionWebhooksPtrOutput) CreateSecretJob() ControllerAdmissionWebhooksCreateSecretJobPtrOutput {
	return o.ApplyT(func(v *ContollerAdmissionWebhooks) *ControllerAdmissionWebhooksCreateSecretJob {
		if v == nil {
			return nil
		}
		return v.CreateSecretJob
	}).(ControllerAdmissionWebhooksCreateSecretJobPtrOutput)
}

func (o ContollerAdmissionWebhooksPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContollerAdmissionWebhooks) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Use an existing PSP instead of creating one.
func (o ContollerAdmissionWebhooksPtrOutput) ExistingPsp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContollerAdmissionWebhooks) *string {
		if v == nil {
			return nil
		}
		return v.ExistingPsp
	}).(pulumi.StringPtrOutput)
}

func (o ContollerAdmissionWebhooksPtrOutput) FailurePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContollerAdmissionWebhooks) *string {
		if v == nil {
			return nil
		}
		return v.FailurePolicy
	}).(pulumi.StringPtrOutput)
}

func (o ContollerAdmissionWebhooksPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContollerAdmissionWebhooks) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

func (o ContollerAdmissionWebhooksPtrOutput) NamespaceSelector() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v *ContollerAdmissionWebhooks) map[string]map[string]string {
		if v == nil {
			return nil
		}
		return v.NamespaceSelector
	}).(pulumi.StringMapMapOutput)
}

func (o ContollerAdmissionWebhooksPtrOutput) ObjectSelector() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v *ContollerAdmissionWebhooks) map[string]map[string]string {
		if v == nil {
			return nil
		}
		return v.ObjectSelector
	}).(pulumi.StringMapMapOutput)
}

func (o ContollerAdmissionWebhooksPtrOutput) Patch() ControllerAdmissionWebhooksPatchPtrOutput {
	return o.ApplyT(func(v *ContollerAdmissionWebhooks) *ControllerAdmissionWebhooksPatch {
		if v == nil {
			return nil
		}
		return v.Patch
	}).(ControllerAdmissionWebhooksPatchPtrOutput)
}

func (o ContollerAdmissionWebhooksPtrOutput) PatchWebhookJob() ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput {
	return o.ApplyT(func(v *ContollerAdmissionWebhooks) *ControllerAdmissionWebhooksPatchWebhbookJob {
		if v == nil {
			return nil
		}
		return v.PatchWebhookJob
	}).(ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput)
}

func (o ContollerAdmissionWebhooksPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContollerAdmissionWebhooks) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

func (o ContollerAdmissionWebhooksPtrOutput) Service() ControllerAdmissionWebhooksServicePtrOutput {
	return o.ApplyT(func(v *ContollerAdmissionWebhooks) *ControllerAdmissionWebhooksService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(ControllerAdmissionWebhooksServicePtrOutput)
}

func (o ContollerAdmissionWebhooksPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContollerAdmissionWebhooks) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

type Controller struct {
	// Will add custom headers before sending response traffic to the client according to: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#add-headers.
	AddHeaders        map[string]map[string]string `pulumi:"addHeaders"`
	AdmissionWebhooks *ContollerAdmissionWebhooks  `pulumi:"admissionWebhooks"`
	// Affinity and anti-affinity Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity.
	Affinity *corev1.Affinity `pulumi:"affinity"`
	// This configuration defines if Ingress Controller should allow users to set their own *-snippet annotations, otherwise this is forbidden / dropped when users add those annotations. Global snippets in ConfigMap are still respected.
	AllowSnippetAnnotations *bool `pulumi:"allowSnippetAnnotations"`
	// Annotations to be added to the controller Deployment or DaemonSet.
	Annotations map[string]string `pulumi:"annotations"`
	// Mutually exclusive with keda autoscaling.
	Autoscaling *Autoscaling `pulumi:"autoscaling"`
	// Custom or additional autoscaling metrics ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-custom-metrics
	AutoscalingTemplate []AutoscalingTemplate `pulumi:"autoscalingTemplate"`
	// Will add custom configuration options to Nginx https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/.
	Config map[string]string `pulumi:"config"`
	// Annotations to be added to the controller config configuration configmap.
	ConfigAnnotations map[string]string `pulumi:"configAnnotations"`
	// Allows customization of the configmap / nginx-configmap namespace.
	ConfigMapNamespace *string `pulumi:"configMapNamespace"`
	// Configures the controller container name.
	ContainerName *string `pulumi:"containerName"`
	// Configures the ports the nginx-controller listens on.
	ContainerPort *ControllerPort `pulumi:"containerPort"`
	// Override NGINX template.
	CustomTemplate *ControllerCustomTemplate `pulumi:"customTemplate"`
	// Optionally customize the pod dnsConfig.
	DnsConfig map[string]string `pulumi:"dnsConfig"`
	// Optionally change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'. By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.
	DnsPolicy *string `pulumi:"dnsPolicy"`
	// Election ID to use for status update.
	ElectionID *string `pulumi:"electionID"`
	// Enable mimalloc as a drop-in replacement for malloc. ref: https://github.com/microsoft/mimalloc.
	EnableMimalloc *bool `pulumi:"enableMimalloc"`
	// Use an existing PSP instead of creating one.
	ExistingPsp *string `pulumi:"existingPsp"`
	// Additional command line arguments to pass to nginx-ingress-controller E.g. to specify the default SSL certificate you can use `default-ssl-certificate: "<namespace>/<secret_name>"`.
	ExtraArgs map[string]string `pulumi:"extraArgs"`
	// Additional containers to be added to the controller pod. See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.
	ExtraContainers []corev1.Container `pulumi:"extraContainers"`
	// Additional environment variables to set.
	ExtraEnvs []corev1.EnvVar `pulumi:"extraEnvs"`
	// Containers, which are run before the app containers are started. - name: init-myservice   image: busybox   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']
	ExtraInitContainers []corev1.Container `pulumi:"extraInitContainers"`
	// Additional volumeMounts to the controller main container.  - name: copy-portal-skins    mountPath: /var/lib/lemonldap-ng/portal/skins
	ExtraVolumeMounts []corev1.VolumeMount `pulumi:"extraVolumeMounts"`
	// Additional volumes to the controller pod.  - name: copy-portal-skins    emptyDir: {}
	ExtraVolumes []corev1.Volume `pulumi:"extraVolumes"`
	// Path of the health check endpoint. All requests received on the port defined by the healthz-port parameter are forwarded internally to this path.
	HealthCheckPath *string `pulumi:"healthCheckPath"`
	// Address to bind the health check endpoint. It is better to set this option to the internal node address if the ingress nginx controller is running in the hostNetwork: true mode.
	HeathCheckHost *string `pulumi:"heathCheckHost"`
	// Required for use with CNI based kubernetes installations (such as ones set up by kubeadm), since CNI and hostport don't mix yet. Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920 is merged.
	HostNetwork *bool `pulumi:"hostNetwork"`
	// Use host ports 80 and 443. Disabled by default.
	HostPort *ControllerHostPort `pulumi:"hostPort"`
	// Optionally customize the pod hostname.
	Hostname map[string]map[string]string `pulumi:"hostname"`
	Image    *ControllerImage             `pulumi:"image"`
	// Process IngressClass per name (additionally as per spec.controller).
	IngressClassByName *bool `pulumi:"ingressClassByName"`
	// This section refers to the creation of the IngressClass resource. IngressClass resources are supported since k8s >= 1.18 and required since k8s >= 1.19
	IngressClassResource *ControllerIngressClassResource `pulumi:"ingressClassResource"`
	// Mutually exclusive with hpa autoscaling.
	Keda *Keda `pulumi:"keda"`
	// DaemonSet or Deployment.
	Kind *string `pulumi:"kind"`
	// Improve connection draining when ingress controller pod is deleted using a lifecycle hook: With this new hook, we increased the default terminationGracePeriodSeconds from 30 seconds to 300, allowing the draining of connections up to five minutes. If the active connections end before that, the pod will terminate gracefully at that time. To effectively take advantage of this feature, the Configmap feature worker-shutdown-timeout new value is 240s instead of 10s.
	Lifecycle *corev1.Lifecycle `pulumi:"lifecycle"`
	// Liveness probe values Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
	LivenessProbe *corev1.Probe `pulumi:"livenessProbe"`
	// Maxmind license key to download GeoLite2 Databases https://blog.maxmind.com/2019/12/18/significant-changes-to-accessing-and-using-geolite2-databases.
	MaxmindLicenseKey *string            `pulumi:"maxmindLicenseKey"`
	Metrics           *ControllerMetrics `pulumi:"metrics"`
	MinAvailable      *int               `pulumi:"minAvailable"`
	// minReadySeconds to avoid killing pods before we are ready.
	MinReadySeconds *int    `pulumi:"minReadySeconds"`
	Name            *string `pulumi:"name"`
	// Node labels for controller pod assignment Ref: https://kubernetes.io/docs/user-guide/node-selection/.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Annotations to be added to controller pods.
	PodAnnotations map[string]string `pulumi:"podAnnotations"`
	// labels to add to the pod container metadata.
	PodLabels map[string]string `pulumi:"podLabels"`
	// Security Context policies for controller pods.
	PodSecurityContext *corev1.PodSecurityContext `pulumi:"podSecurityContext"`
	PriorityClassName  *string                    `pulumi:"priorityClassName"`
	// Will add custom headers before sending traffic to backends according to https://github.com/kubernetes/ingress-nginx/tree/main/docs/examples/customization/custom-headers.
	ProxySetHeaders map[string]map[string]string `pulumi:"proxySetHeaders"`
	// Allows customization of the source of the IP address or FQDN to report in the ingress status field. By default, it reads the information provided by the service. If disable, the status field reports the IP address of the node or nodes where an ingress controller pod is running.
	PublishService *ControllerPublishService `pulumi:"publishService"`
	// Readiness probe values Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
	ReadinessProbe *corev1.Probe `pulumi:"readinessProbe"`
	ReplicaCount   *int          `pulumi:"replicaCount"`
	// Bare-metal considerations via the host network https://kubernetes.github.io/ingress-nginx/deploy/baremetal/#via-the-host-network Ingress status was blank because there is no Service exposing the NGINX Ingress controller in a configuration using the host network, the default --publish-service flag used in standard cloud setups does not apply.
	ReportNodeInternalIp *bool `pulumi:"reportNodeInternalIp"`
	// Define requests resources to avoid probe issues due to CPU utilization in busy nodes ref: https://github.com/kubernetes/ingress-nginx/issues/4735#issuecomment-551204903 Ideally, there should be no limits. https://engineering.indeedblog.com/blog/2019/12/cpu-throttling-regression-fix/
	Resources *corev1.ResourceRequirements `pulumi:"resources"`
	// Limit the scope of the controller.
	Scope   *ControllerScope   `pulumi:"scope"`
	Service *ControllerService `pulumi:"service"`
	// Startup probe values Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
	StartupProbe *corev1.Probe `pulumi:"startupProbe"`
	// See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for notes on enabling and using sysctls.
	Sysctls map[string]map[string]string `pulumi:"sysctls"`
	// Allows customization of the tcp-services-configmap.
	Tcp *ControllerTcp `pulumi:"tcp"`
	// How long to wait for the drain of connections.
	TerminateGracePeriodSeconds *int `pulumi:"terminateGracePeriodSeconds"`
	// Node tolerations for server scheduling to nodes with taints Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
	Tolerations *corev1.Toleration `pulumi:"tolerations"`
	// Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/.
	TopologySpreadConstraints []corev1.TopologySpreadConstraint `pulumi:"topologySpreadConstraints"`
	Udp                       *ControllerUdp                    `pulumi:"udp"`
	// The update strategy to apply to the Deployment or DaemonSet.
	UpdateStrategy *ControllerUpdateStrategy `pulumi:"updateStrategy"`
	// Process Ingress objects without ingressClass annotation/ingressClassName field. Overrides value for --watch-ingress-without-class flag of the controller binary. Defaults to false.
	WatchIngressWithoutClass *bool `pulumi:"watchIngressWithoutClass"`
}

// ControllerInput is an input type that accepts ControllerArgs and ControllerOutput values.
// You can construct a concrete instance of `ControllerInput` via:
//
//	ControllerArgs{...}
type ControllerInput interface {
	pulumi.Input

	ToControllerOutput() ControllerOutput
	ToControllerOutputWithContext(context.Context) ControllerOutput
}

type ControllerArgs struct {
	// Will add custom headers before sending response traffic to the client according to: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#add-headers.
	AddHeaders        pulumi.StringMapMapInput           `pulumi:"addHeaders"`
	AdmissionWebhooks ContollerAdmissionWebhooksPtrInput `pulumi:"admissionWebhooks"`
	// Affinity and anti-affinity Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity.
	Affinity corev1.AffinityPtrInput `pulumi:"affinity"`
	// This configuration defines if Ingress Controller should allow users to set their own *-snippet annotations, otherwise this is forbidden / dropped when users add those annotations. Global snippets in ConfigMap are still respected.
	AllowSnippetAnnotations pulumi.BoolPtrInput `pulumi:"allowSnippetAnnotations"`
	// Annotations to be added to the controller Deployment or DaemonSet.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Mutually exclusive with keda autoscaling.
	Autoscaling AutoscalingPtrInput `pulumi:"autoscaling"`
	// Custom or additional autoscaling metrics ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-custom-metrics
	AutoscalingTemplate AutoscalingTemplateArrayInput `pulumi:"autoscalingTemplate"`
	// Will add custom configuration options to Nginx https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/.
	Config pulumi.StringMapInput `pulumi:"config"`
	// Annotations to be added to the controller config configuration configmap.
	ConfigAnnotations pulumi.StringMapInput `pulumi:"configAnnotations"`
	// Allows customization of the configmap / nginx-configmap namespace.
	ConfigMapNamespace pulumi.StringPtrInput `pulumi:"configMapNamespace"`
	// Configures the controller container name.
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Configures the ports the nginx-controller listens on.
	ContainerPort ControllerPortPtrInput `pulumi:"containerPort"`
	// Override NGINX template.
	CustomTemplate ControllerCustomTemplatePtrInput `pulumi:"customTemplate"`
	// Optionally customize the pod dnsConfig.
	DnsConfig pulumi.StringMapInput `pulumi:"dnsConfig"`
	// Optionally change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'. By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.
	DnsPolicy pulumi.StringPtrInput `pulumi:"dnsPolicy"`
	// Election ID to use for status update.
	ElectionID pulumi.StringPtrInput `pulumi:"electionID"`
	// Enable mimalloc as a drop-in replacement for malloc. ref: https://github.com/microsoft/mimalloc.
	EnableMimalloc pulumi.BoolPtrInput `pulumi:"enableMimalloc"`
	// Use an existing PSP instead of creating one.
	ExistingPsp pulumi.StringPtrInput `pulumi:"existingPsp"`
	// Additional command line arguments to pass to nginx-ingress-controller E.g. to specify the default SSL certificate you can use `default-ssl-certificate: "<namespace>/<secret_name>"`.
	ExtraArgs pulumi.StringMapInput `pulumi:"extraArgs"`
	// Additional containers to be added to the controller pod. See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.
	ExtraContainers corev1.ContainerArrayInput `pulumi:"extraContainers"`
	// Additional environment variables to set.
	ExtraEnvs corev1.EnvVarArrayInput `pulumi:"extraEnvs"`
	// Containers, which are run before the app containers are started. - name: init-myservice   image: busybox   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']
	ExtraInitContainers corev1.ContainerArrayInput `pulumi:"extraInitContainers"`
	// Additional volumeMounts to the controller main container.  - name: copy-portal-skins    mountPath: /var/lib/lemonldap-ng/portal/skins
	ExtraVolumeMounts corev1.VolumeMountArrayInput `pulumi:"extraVolumeMounts"`
	// Additional volumes to the controller pod.  - name: copy-portal-skins    emptyDir: {}
	ExtraVolumes corev1.VolumeArrayInput `pulumi:"extraVolumes"`
	// Path of the health check endpoint. All requests received on the port defined by the healthz-port parameter are forwarded internally to this path.
	HealthCheckPath pulumi.StringPtrInput `pulumi:"healthCheckPath"`
	// Address to bind the health check endpoint. It is better to set this option to the internal node address if the ingress nginx controller is running in the hostNetwork: true mode.
	HeathCheckHost pulumi.StringPtrInput `pulumi:"heathCheckHost"`
	// Required for use with CNI based kubernetes installations (such as ones set up by kubeadm), since CNI and hostport don't mix yet. Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920 is merged.
	HostNetwork pulumi.BoolPtrInput `pulumi:"hostNetwork"`
	// Use host ports 80 and 443. Disabled by default.
	HostPort ControllerHostPortPtrInput `pulumi:"hostPort"`
	// Optionally customize the pod hostname.
	Hostname pulumi.StringMapMapInput `pulumi:"hostname"`
	Image    ControllerImagePtrInput  `pulumi:"image"`
	// Process IngressClass per name (additionally as per spec.controller).
	IngressClassByName pulumi.BoolPtrInput `pulumi:"ingressClassByName"`
	// This section refers to the creation of the IngressClass resource. IngressClass resources are supported since k8s >= 1.18 and required since k8s >= 1.19
	IngressClassResource ControllerIngressClassResourcePtrInput `pulumi:"ingressClassResource"`
	// Mutually exclusive with hpa autoscaling.
	Keda KedaPtrInput `pulumi:"keda"`
	// DaemonSet or Deployment.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Improve connection draining when ingress controller pod is deleted using a lifecycle hook: With this new hook, we increased the default terminationGracePeriodSeconds from 30 seconds to 300, allowing the draining of connections up to five minutes. If the active connections end before that, the pod will terminate gracefully at that time. To effectively take advantage of this feature, the Configmap feature worker-shutdown-timeout new value is 240s instead of 10s.
	Lifecycle corev1.LifecyclePtrInput `pulumi:"lifecycle"`
	// Liveness probe values Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
	LivenessProbe corev1.ProbePtrInput `pulumi:"livenessProbe"`
	// Maxmind license key to download GeoLite2 Databases https://blog.maxmind.com/2019/12/18/significant-changes-to-accessing-and-using-geolite2-databases.
	MaxmindLicenseKey pulumi.StringPtrInput     `pulumi:"maxmindLicenseKey"`
	Metrics           ControllerMetricsPtrInput `pulumi:"metrics"`
	MinAvailable      pulumi.IntPtrInput        `pulumi:"minAvailable"`
	// minReadySeconds to avoid killing pods before we are ready.
	MinReadySeconds pulumi.IntPtrInput    `pulumi:"minReadySeconds"`
	Name            pulumi.StringPtrInput `pulumi:"name"`
	// Node labels for controller pod assignment Ref: https://kubernetes.io/docs/user-guide/node-selection/.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Annotations to be added to controller pods.
	PodAnnotations pulumi.StringMapInput `pulumi:"podAnnotations"`
	// labels to add to the pod container metadata.
	PodLabels pulumi.StringMapInput `pulumi:"podLabels"`
	// Security Context policies for controller pods.
	PodSecurityContext corev1.PodSecurityContextPtrInput `pulumi:"podSecurityContext"`
	PriorityClassName  pulumi.StringPtrInput             `pulumi:"priorityClassName"`
	// Will add custom headers before sending traffic to backends according to https://github.com/kubernetes/ingress-nginx/tree/main/docs/examples/customization/custom-headers.
	ProxySetHeaders pulumi.StringMapMapInput `pulumi:"proxySetHeaders"`
	// Allows customization of the source of the IP address or FQDN to report in the ingress status field. By default, it reads the information provided by the service. If disable, the status field reports the IP address of the node or nodes where an ingress controller pod is running.
	PublishService ControllerPublishServicePtrInput `pulumi:"publishService"`
	// Readiness probe values Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
	ReadinessProbe corev1.ProbePtrInput `pulumi:"readinessProbe"`
	ReplicaCount   pulumi.IntPtrInput   `pulumi:"replicaCount"`
	// Bare-metal considerations via the host network https://kubernetes.github.io/ingress-nginx/deploy/baremetal/#via-the-host-network Ingress status was blank because there is no Service exposing the NGINX Ingress controller in a configuration using the host network, the default --publish-service flag used in standard cloud setups does not apply.
	ReportNodeInternalIp pulumi.BoolPtrInput `pulumi:"reportNodeInternalIp"`
	// Define requests resources to avoid probe issues due to CPU utilization in busy nodes ref: https://github.com/kubernetes/ingress-nginx/issues/4735#issuecomment-551204903 Ideally, there should be no limits. https://engineering.indeedblog.com/blog/2019/12/cpu-throttling-regression-fix/
	Resources corev1.ResourceRequirementsPtrInput `pulumi:"resources"`
	// Limit the scope of the controller.
	Scope   ControllerScopePtrInput   `pulumi:"scope"`
	Service ControllerServicePtrInput `pulumi:"service"`
	// Startup probe values Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
	StartupProbe corev1.ProbePtrInput `pulumi:"startupProbe"`
	// See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for notes on enabling and using sysctls.
	Sysctls pulumi.StringMapMapInput `pulumi:"sysctls"`
	// Allows customization of the tcp-services-configmap.
	Tcp ControllerTcpPtrInput `pulumi:"tcp"`
	// How long to wait for the drain of connections.
	TerminateGracePeriodSeconds pulumi.IntPtrInput `pulumi:"terminateGracePeriodSeconds"`
	// Node tolerations for server scheduling to nodes with taints Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
	Tolerations *corev1.TolerationInput `pulumi:"tolerations"`
	// Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/.
	TopologySpreadConstraints corev1.TopologySpreadConstraintArrayInput `pulumi:"topologySpreadConstraints"`
	Udp                       ControllerUdpPtrInput                     `pulumi:"udp"`
	// The update strategy to apply to the Deployment or DaemonSet.
	UpdateStrategy ControllerUpdateStrategyPtrInput `pulumi:"updateStrategy"`
	// Process Ingress objects without ingressClass annotation/ingressClassName field. Overrides value for --watch-ingress-without-class flag of the controller binary. Defaults to false.
	WatchIngressWithoutClass pulumi.BoolPtrInput `pulumi:"watchIngressWithoutClass"`
}

func (ControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Controller)(nil)).Elem()
}

func (i ControllerArgs) ToControllerOutput() ControllerOutput {
	return i.ToControllerOutputWithContext(context.Background())
}

func (i ControllerArgs) ToControllerOutputWithContext(ctx context.Context) ControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerOutput)
}

func (i ControllerArgs) ToControllerPtrOutput() ControllerPtrOutput {
	return i.ToControllerPtrOutputWithContext(context.Background())
}

func (i ControllerArgs) ToControllerPtrOutputWithContext(ctx context.Context) ControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerOutput).ToControllerPtrOutputWithContext(ctx)
}

// ControllerPtrInput is an input type that accepts ControllerArgs, ControllerPtr and ControllerPtrOutput values.
// You can construct a concrete instance of `ControllerPtrInput` via:
//
//	        ControllerArgs{...}
//
//	or:
//
//	        nil
type ControllerPtrInput interface {
	pulumi.Input

	ToControllerPtrOutput() ControllerPtrOutput
	ToControllerPtrOutputWithContext(context.Context) ControllerPtrOutput
}

type controllerPtrType ControllerArgs

func ControllerPtr(v *ControllerArgs) ControllerPtrInput {
	return (*controllerPtrType)(v)
}

func (*controllerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Controller)(nil)).Elem()
}

func (i *controllerPtrType) ToControllerPtrOutput() ControllerPtrOutput {
	return i.ToControllerPtrOutputWithContext(context.Background())
}

func (i *controllerPtrType) ToControllerPtrOutputWithContext(ctx context.Context) ControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerPtrOutput)
}

type ControllerOutput struct{ *pulumi.OutputState }

func (ControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Controller)(nil)).Elem()
}

func (o ControllerOutput) ToControllerOutput() ControllerOutput {
	return o
}

func (o ControllerOutput) ToControllerOutputWithContext(ctx context.Context) ControllerOutput {
	return o
}

func (o ControllerOutput) ToControllerPtrOutput() ControllerPtrOutput {
	return o.ToControllerPtrOutputWithContext(context.Background())
}

func (o ControllerOutput) ToControllerPtrOutputWithContext(ctx context.Context) ControllerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Controller) *Controller {
		return &v
	}).(ControllerPtrOutput)
}

// Will add custom headers before sending response traffic to the client according to: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#add-headers.
func (o ControllerOutput) AddHeaders() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v Controller) map[string]map[string]string { return v.AddHeaders }).(pulumi.StringMapMapOutput)
}

func (o ControllerOutput) AdmissionWebhooks() ContollerAdmissionWebhooksPtrOutput {
	return o.ApplyT(func(v Controller) *ContollerAdmissionWebhooks { return v.AdmissionWebhooks }).(ContollerAdmissionWebhooksPtrOutput)
}

// Affinity and anti-affinity Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity.
func (o ControllerOutput) Affinity() corev1.AffinityPtrOutput {
	return o.ApplyT(func(v Controller) *corev1.Affinity { return v.Affinity }).(corev1.AffinityPtrOutput)
}

// This configuration defines if Ingress Controller should allow users to set their own *-snippet annotations, otherwise this is forbidden / dropped when users add those annotations. Global snippets in ConfigMap are still respected.
func (o ControllerOutput) AllowSnippetAnnotations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Controller) *bool { return v.AllowSnippetAnnotations }).(pulumi.BoolPtrOutput)
}

// Annotations to be added to the controller Deployment or DaemonSet.
func (o ControllerOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v Controller) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Mutually exclusive with keda autoscaling.
func (o ControllerOutput) Autoscaling() AutoscalingPtrOutput {
	return o.ApplyT(func(v Controller) *Autoscaling { return v.Autoscaling }).(AutoscalingPtrOutput)
}

// Custom or additional autoscaling metrics ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-custom-metrics
func (o ControllerOutput) AutoscalingTemplate() AutoscalingTemplateArrayOutput {
	return o.ApplyT(func(v Controller) []AutoscalingTemplate { return v.AutoscalingTemplate }).(AutoscalingTemplateArrayOutput)
}

// Will add custom configuration options to Nginx https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/.
func (o ControllerOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v Controller) map[string]string { return v.Config }).(pulumi.StringMapOutput)
}

// Annotations to be added to the controller config configuration configmap.
func (o ControllerOutput) ConfigAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v Controller) map[string]string { return v.ConfigAnnotations }).(pulumi.StringMapOutput)
}

// Allows customization of the configmap / nginx-configmap namespace.
func (o ControllerOutput) ConfigMapNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Controller) *string { return v.ConfigMapNamespace }).(pulumi.StringPtrOutput)
}

// Configures the controller container name.
func (o ControllerOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Controller) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Configures the ports the nginx-controller listens on.
func (o ControllerOutput) ContainerPort() ControllerPortPtrOutput {
	return o.ApplyT(func(v Controller) *ControllerPort { return v.ContainerPort }).(ControllerPortPtrOutput)
}

// Override NGINX template.
func (o ControllerOutput) CustomTemplate() ControllerCustomTemplatePtrOutput {
	return o.ApplyT(func(v Controller) *ControllerCustomTemplate { return v.CustomTemplate }).(ControllerCustomTemplatePtrOutput)
}

// Optionally customize the pod dnsConfig.
func (o ControllerOutput) DnsConfig() pulumi.StringMapOutput {
	return o.ApplyT(func(v Controller) map[string]string { return v.DnsConfig }).(pulumi.StringMapOutput)
}

// Optionally change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'. By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.
func (o ControllerOutput) DnsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Controller) *string { return v.DnsPolicy }).(pulumi.StringPtrOutput)
}

// Election ID to use for status update.
func (o ControllerOutput) ElectionID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Controller) *string { return v.ElectionID }).(pulumi.StringPtrOutput)
}

// Enable mimalloc as a drop-in replacement for malloc. ref: https://github.com/microsoft/mimalloc.
func (o ControllerOutput) EnableMimalloc() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Controller) *bool { return v.EnableMimalloc }).(pulumi.BoolPtrOutput)
}

// Use an existing PSP instead of creating one.
func (o ControllerOutput) ExistingPsp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Controller) *string { return v.ExistingPsp }).(pulumi.StringPtrOutput)
}

// Additional command line arguments to pass to nginx-ingress-controller E.g. to specify the default SSL certificate you can use `default-ssl-certificate: "<namespace>/<secret_name>"`.
func (o ControllerOutput) ExtraArgs() pulumi.StringMapOutput {
	return o.ApplyT(func(v Controller) map[string]string { return v.ExtraArgs }).(pulumi.StringMapOutput)
}

// Additional containers to be added to the controller pod. See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.
func (o ControllerOutput) ExtraContainers() corev1.ContainerArrayOutput {
	return o.ApplyT(func(v Controller) []corev1.Container { return v.ExtraContainers }).(corev1.ContainerArrayOutput)
}

// Additional environment variables to set.
func (o ControllerOutput) ExtraEnvs() corev1.EnvVarArrayOutput {
	return o.ApplyT(func(v Controller) []corev1.EnvVar { return v.ExtraEnvs }).(corev1.EnvVarArrayOutput)
}

// Containers, which are run before the app containers are started. - name: init-myservice   image: busybox   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']
func (o ControllerOutput) ExtraInitContainers() corev1.ContainerArrayOutput {
	return o.ApplyT(func(v Controller) []corev1.Container { return v.ExtraInitContainers }).(corev1.ContainerArrayOutput)
}

// Additional volumeMounts to the controller main container.  - name: copy-portal-skins    mountPath: /var/lib/lemonldap-ng/portal/skins
func (o ControllerOutput) ExtraVolumeMounts() corev1.VolumeMountArrayOutput {
	return o.ApplyT(func(v Controller) []corev1.VolumeMount { return v.ExtraVolumeMounts }).(corev1.VolumeMountArrayOutput)
}

// Additional volumes to the controller pod.  - name: copy-portal-skins    emptyDir: {}
func (o ControllerOutput) ExtraVolumes() corev1.VolumeArrayOutput {
	return o.ApplyT(func(v Controller) []corev1.Volume { return v.ExtraVolumes }).(corev1.VolumeArrayOutput)
}

// Path of the health check endpoint. All requests received on the port defined by the healthz-port parameter are forwarded internally to this path.
func (o ControllerOutput) HealthCheckPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Controller) *string { return v.HealthCheckPath }).(pulumi.StringPtrOutput)
}

// Address to bind the health check endpoint. It is better to set this option to the internal node address if the ingress nginx controller is running in the hostNetwork: true mode.
func (o ControllerOutput) HeathCheckHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Controller) *string { return v.HeathCheckHost }).(pulumi.StringPtrOutput)
}

// Required for use with CNI based kubernetes installations (such as ones set up by kubeadm), since CNI and hostport don't mix yet. Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920 is merged.
func (o ControllerOutput) HostNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Controller) *bool { return v.HostNetwork }).(pulumi.BoolPtrOutput)
}

// Use host ports 80 and 443. Disabled by default.
func (o ControllerOutput) HostPort() ControllerHostPortPtrOutput {
	return o.ApplyT(func(v Controller) *ControllerHostPort { return v.HostPort }).(ControllerHostPortPtrOutput)
}

// Optionally customize the pod hostname.
func (o ControllerOutput) Hostname() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v Controller) map[string]map[string]string { return v.Hostname }).(pulumi.StringMapMapOutput)
}

func (o ControllerOutput) Image() ControllerImagePtrOutput {
	return o.ApplyT(func(v Controller) *ControllerImage { return v.Image }).(ControllerImagePtrOutput)
}

// Process IngressClass per name (additionally as per spec.controller).
func (o ControllerOutput) IngressClassByName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Controller) *bool { return v.IngressClassByName }).(pulumi.BoolPtrOutput)
}

// This section refers to the creation of the IngressClass resource. IngressClass resources are supported since k8s >= 1.18 and required since k8s >= 1.19
func (o ControllerOutput) IngressClassResource() ControllerIngressClassResourcePtrOutput {
	return o.ApplyT(func(v Controller) *ControllerIngressClassResource { return v.IngressClassResource }).(ControllerIngressClassResourcePtrOutput)
}

// Mutually exclusive with hpa autoscaling.
func (o ControllerOutput) Keda() KedaPtrOutput {
	return o.ApplyT(func(v Controller) *Keda { return v.Keda }).(KedaPtrOutput)
}

// DaemonSet or Deployment.
func (o ControllerOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Controller) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Improve connection draining when ingress controller pod is deleted using a lifecycle hook: With this new hook, we increased the default terminationGracePeriodSeconds from 30 seconds to 300, allowing the draining of connections up to five minutes. If the active connections end before that, the pod will terminate gracefully at that time. To effectively take advantage of this feature, the Configmap feature worker-shutdown-timeout new value is 240s instead of 10s.
func (o ControllerOutput) Lifecycle() corev1.LifecyclePtrOutput {
	return o.ApplyT(func(v Controller) *corev1.Lifecycle { return v.Lifecycle }).(corev1.LifecyclePtrOutput)
}

// Liveness probe values Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
func (o ControllerOutput) LivenessProbe() corev1.ProbePtrOutput {
	return o.ApplyT(func(v Controller) *corev1.Probe { return v.LivenessProbe }).(corev1.ProbePtrOutput)
}

// Maxmind license key to download GeoLite2 Databases https://blog.maxmind.com/2019/12/18/significant-changes-to-accessing-and-using-geolite2-databases.
func (o ControllerOutput) MaxmindLicenseKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Controller) *string { return v.MaxmindLicenseKey }).(pulumi.StringPtrOutput)
}

func (o ControllerOutput) Metrics() ControllerMetricsPtrOutput {
	return o.ApplyT(func(v Controller) *ControllerMetrics { return v.Metrics }).(ControllerMetricsPtrOutput)
}

func (o ControllerOutput) MinAvailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Controller) *int { return v.MinAvailable }).(pulumi.IntPtrOutput)
}

// minReadySeconds to avoid killing pods before we are ready.
func (o ControllerOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Controller) *int { return v.MinReadySeconds }).(pulumi.IntPtrOutput)
}

func (o ControllerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Controller) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Node labels for controller pod assignment Ref: https://kubernetes.io/docs/user-guide/node-selection/.
func (o ControllerOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v Controller) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Annotations to be added to controller pods.
func (o ControllerOutput) PodAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v Controller) map[string]string { return v.PodAnnotations }).(pulumi.StringMapOutput)
}

// labels to add to the pod container metadata.
func (o ControllerOutput) PodLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v Controller) map[string]string { return v.PodLabels }).(pulumi.StringMapOutput)
}

// Security Context policies for controller pods.
func (o ControllerOutput) PodSecurityContext() corev1.PodSecurityContextPtrOutput {
	return o.ApplyT(func(v Controller) *corev1.PodSecurityContext { return v.PodSecurityContext }).(corev1.PodSecurityContextPtrOutput)
}

func (o ControllerOutput) PriorityClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Controller) *string { return v.PriorityClassName }).(pulumi.StringPtrOutput)
}

// Will add custom headers before sending traffic to backends according to https://github.com/kubernetes/ingress-nginx/tree/main/docs/examples/customization/custom-headers.
func (o ControllerOutput) ProxySetHeaders() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v Controller) map[string]map[string]string { return v.ProxySetHeaders }).(pulumi.StringMapMapOutput)
}

// Allows customization of the source of the IP address or FQDN to report in the ingress status field. By default, it reads the information provided by the service. If disable, the status field reports the IP address of the node or nodes where an ingress controller pod is running.
func (o ControllerOutput) PublishService() ControllerPublishServicePtrOutput {
	return o.ApplyT(func(v Controller) *ControllerPublishService { return v.PublishService }).(ControllerPublishServicePtrOutput)
}

// Readiness probe values Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
func (o ControllerOutput) ReadinessProbe() corev1.ProbePtrOutput {
	return o.ApplyT(func(v Controller) *corev1.Probe { return v.ReadinessProbe }).(corev1.ProbePtrOutput)
}

func (o ControllerOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Controller) *int { return v.ReplicaCount }).(pulumi.IntPtrOutput)
}

// Bare-metal considerations via the host network https://kubernetes.github.io/ingress-nginx/deploy/baremetal/#via-the-host-network Ingress status was blank because there is no Service exposing the NGINX Ingress controller in a configuration using the host network, the default --publish-service flag used in standard cloud setups does not apply.
func (o ControllerOutput) ReportNodeInternalIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Controller) *bool { return v.ReportNodeInternalIp }).(pulumi.BoolPtrOutput)
}

// Define requests resources to avoid probe issues due to CPU utilization in busy nodes ref: https://github.com/kubernetes/ingress-nginx/issues/4735#issuecomment-551204903 Ideally, there should be no limits. https://engineering.indeedblog.com/blog/2019/12/cpu-throttling-regression-fix/
func (o ControllerOutput) Resources() corev1.ResourceRequirementsPtrOutput {
	return o.ApplyT(func(v Controller) *corev1.ResourceRequirements { return v.Resources }).(corev1.ResourceRequirementsPtrOutput)
}

// Limit the scope of the controller.
func (o ControllerOutput) Scope() ControllerScopePtrOutput {
	return o.ApplyT(func(v Controller) *ControllerScope { return v.Scope }).(ControllerScopePtrOutput)
}

func (o ControllerOutput) Service() ControllerServicePtrOutput {
	return o.ApplyT(func(v Controller) *ControllerService { return v.Service }).(ControllerServicePtrOutput)
}

// Startup probe values Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
func (o ControllerOutput) StartupProbe() corev1.ProbePtrOutput {
	return o.ApplyT(func(v Controller) *corev1.Probe { return v.StartupProbe }).(corev1.ProbePtrOutput)
}

// See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for notes on enabling and using sysctls.
func (o ControllerOutput) Sysctls() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v Controller) map[string]map[string]string { return v.Sysctls }).(pulumi.StringMapMapOutput)
}

// Allows customization of the tcp-services-configmap.
func (o ControllerOutput) Tcp() ControllerTcpPtrOutput {
	return o.ApplyT(func(v Controller) *ControllerTcp { return v.Tcp }).(ControllerTcpPtrOutput)
}

// How long to wait for the drain of connections.
func (o ControllerOutput) TerminateGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Controller) *int { return v.TerminateGracePeriodSeconds }).(pulumi.IntPtrOutput)
}

// Node tolerations for server scheduling to nodes with taints Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
func (o ControllerOutput) Tolerations() *corev1.TolerationOutput {
	return o.ApplyT(func(v Controller) *corev1.Toleration { return v.Tolerations }).(*corev1.TolerationOutput)
}

// Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/.
func (o ControllerOutput) TopologySpreadConstraints() corev1.TopologySpreadConstraintArrayOutput {
	return o.ApplyT(func(v Controller) []corev1.TopologySpreadConstraint { return v.TopologySpreadConstraints }).(corev1.TopologySpreadConstraintArrayOutput)
}

func (o ControllerOutput) Udp() ControllerUdpPtrOutput {
	return o.ApplyT(func(v Controller) *ControllerUdp { return v.Udp }).(ControllerUdpPtrOutput)
}

// The update strategy to apply to the Deployment or DaemonSet.
func (o ControllerOutput) UpdateStrategy() ControllerUpdateStrategyPtrOutput {
	return o.ApplyT(func(v Controller) *ControllerUpdateStrategy { return v.UpdateStrategy }).(ControllerUpdateStrategyPtrOutput)
}

// Process Ingress objects without ingressClass annotation/ingressClassName field. Overrides value for --watch-ingress-without-class flag of the controller binary. Defaults to false.
func (o ControllerOutput) WatchIngressWithoutClass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Controller) *bool { return v.WatchIngressWithoutClass }).(pulumi.BoolPtrOutput)
}

type ControllerPtrOutput struct{ *pulumi.OutputState }

func (ControllerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Controller)(nil)).Elem()
}

func (o ControllerPtrOutput) ToControllerPtrOutput() ControllerPtrOutput {
	return o
}

func (o ControllerPtrOutput) ToControllerPtrOutputWithContext(ctx context.Context) ControllerPtrOutput {
	return o
}

func (o ControllerPtrOutput) Elem() ControllerOutput {
	return o.ApplyT(func(v *Controller) Controller {
		if v != nil {
			return *v
		}
		var ret Controller
		return ret
	}).(ControllerOutput)
}

// Will add custom headers before sending response traffic to the client according to: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#add-headers.
func (o ControllerPtrOutput) AddHeaders() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v *Controller) map[string]map[string]string {
		if v == nil {
			return nil
		}
		return v.AddHeaders
	}).(pulumi.StringMapMapOutput)
}

func (o ControllerPtrOutput) AdmissionWebhooks() ContollerAdmissionWebhooksPtrOutput {
	return o.ApplyT(func(v *Controller) *ContollerAdmissionWebhooks {
		if v == nil {
			return nil
		}
		return v.AdmissionWebhooks
	}).(ContollerAdmissionWebhooksPtrOutput)
}

// Affinity and anti-affinity Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity.
func (o ControllerPtrOutput) Affinity() corev1.AffinityPtrOutput {
	return o.ApplyT(func(v *Controller) *corev1.Affinity {
		if v == nil {
			return nil
		}
		return v.Affinity
	}).(corev1.AffinityPtrOutput)
}

// This configuration defines if Ingress Controller should allow users to set their own *-snippet annotations, otherwise this is forbidden / dropped when users add those annotations. Global snippets in ConfigMap are still respected.
func (o ControllerPtrOutput) AllowSnippetAnnotations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Controller) *bool {
		if v == nil {
			return nil
		}
		return v.AllowSnippetAnnotations
	}).(pulumi.BoolPtrOutput)
}

// Annotations to be added to the controller Deployment or DaemonSet.
func (o ControllerPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Controller) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Mutually exclusive with keda autoscaling.
func (o ControllerPtrOutput) Autoscaling() AutoscalingPtrOutput {
	return o.ApplyT(func(v *Controller) *Autoscaling {
		if v == nil {
			return nil
		}
		return v.Autoscaling
	}).(AutoscalingPtrOutput)
}

// Custom or additional autoscaling metrics ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-custom-metrics
func (o ControllerPtrOutput) AutoscalingTemplate() AutoscalingTemplateArrayOutput {
	return o.ApplyT(func(v *Controller) []AutoscalingTemplate {
		if v == nil {
			return nil
		}
		return v.AutoscalingTemplate
	}).(AutoscalingTemplateArrayOutput)
}

// Will add custom configuration options to Nginx https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/.
func (o ControllerPtrOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Controller) map[string]string {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.StringMapOutput)
}

// Annotations to be added to the controller config configuration configmap.
func (o ControllerPtrOutput) ConfigAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Controller) map[string]string {
		if v == nil {
			return nil
		}
		return v.ConfigAnnotations
	}).(pulumi.StringMapOutput)
}

// Allows customization of the configmap / nginx-configmap namespace.
func (o ControllerPtrOutput) ConfigMapNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Controller) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMapNamespace
	}).(pulumi.StringPtrOutput)
}

// Configures the controller container name.
func (o ControllerPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Controller) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Configures the ports the nginx-controller listens on.
func (o ControllerPtrOutput) ContainerPort() ControllerPortPtrOutput {
	return o.ApplyT(func(v *Controller) *ControllerPort {
		if v == nil {
			return nil
		}
		return v.ContainerPort
	}).(ControllerPortPtrOutput)
}

// Override NGINX template.
func (o ControllerPtrOutput) CustomTemplate() ControllerCustomTemplatePtrOutput {
	return o.ApplyT(func(v *Controller) *ControllerCustomTemplate {
		if v == nil {
			return nil
		}
		return v.CustomTemplate
	}).(ControllerCustomTemplatePtrOutput)
}

// Optionally customize the pod dnsConfig.
func (o ControllerPtrOutput) DnsConfig() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Controller) map[string]string {
		if v == nil {
			return nil
		}
		return v.DnsConfig
	}).(pulumi.StringMapOutput)
}

// Optionally change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'. By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.
func (o ControllerPtrOutput) DnsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Controller) *string {
		if v == nil {
			return nil
		}
		return v.DnsPolicy
	}).(pulumi.StringPtrOutput)
}

// Election ID to use for status update.
func (o ControllerPtrOutput) ElectionID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Controller) *string {
		if v == nil {
			return nil
		}
		return v.ElectionID
	}).(pulumi.StringPtrOutput)
}

// Enable mimalloc as a drop-in replacement for malloc. ref: https://github.com/microsoft/mimalloc.
func (o ControllerPtrOutput) EnableMimalloc() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Controller) *bool {
		if v == nil {
			return nil
		}
		return v.EnableMimalloc
	}).(pulumi.BoolPtrOutput)
}

// Use an existing PSP instead of creating one.
func (o ControllerPtrOutput) ExistingPsp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Controller) *string {
		if v == nil {
			return nil
		}
		return v.ExistingPsp
	}).(pulumi.StringPtrOutput)
}

// Additional command line arguments to pass to nginx-ingress-controller E.g. to specify the default SSL certificate you can use `default-ssl-certificate: "<namespace>/<secret_name>"`.
func (o ControllerPtrOutput) ExtraArgs() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Controller) map[string]string {
		if v == nil {
			return nil
		}
		return v.ExtraArgs
	}).(pulumi.StringMapOutput)
}

// Additional containers to be added to the controller pod. See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.
func (o ControllerPtrOutput) ExtraContainers() corev1.ContainerArrayOutput {
	return o.ApplyT(func(v *Controller) []corev1.Container {
		if v == nil {
			return nil
		}
		return v.ExtraContainers
	}).(corev1.ContainerArrayOutput)
}

// Additional environment variables to set.
func (o ControllerPtrOutput) ExtraEnvs() corev1.EnvVarArrayOutput {
	return o.ApplyT(func(v *Controller) []corev1.EnvVar {
		if v == nil {
			return nil
		}
		return v.ExtraEnvs
	}).(corev1.EnvVarArrayOutput)
}

// Containers, which are run before the app containers are started. - name: init-myservice   image: busybox   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']
func (o ControllerPtrOutput) ExtraInitContainers() corev1.ContainerArrayOutput {
	return o.ApplyT(func(v *Controller) []corev1.Container {
		if v == nil {
			return nil
		}
		return v.ExtraInitContainers
	}).(corev1.ContainerArrayOutput)
}

// Additional volumeMounts to the controller main container.  - name: copy-portal-skins    mountPath: /var/lib/lemonldap-ng/portal/skins
func (o ControllerPtrOutput) ExtraVolumeMounts() corev1.VolumeMountArrayOutput {
	return o.ApplyT(func(v *Controller) []corev1.VolumeMount {
		if v == nil {
			return nil
		}
		return v.ExtraVolumeMounts
	}).(corev1.VolumeMountArrayOutput)
}

// Additional volumes to the controller pod.  - name: copy-portal-skins    emptyDir: {}
func (o ControllerPtrOutput) ExtraVolumes() corev1.VolumeArrayOutput {
	return o.ApplyT(func(v *Controller) []corev1.Volume {
		if v == nil {
			return nil
		}
		return v.ExtraVolumes
	}).(corev1.VolumeArrayOutput)
}

// Path of the health check endpoint. All requests received on the port defined by the healthz-port parameter are forwarded internally to this path.
func (o ControllerPtrOutput) HealthCheckPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Controller) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckPath
	}).(pulumi.StringPtrOutput)
}

// Address to bind the health check endpoint. It is better to set this option to the internal node address if the ingress nginx controller is running in the hostNetwork: true mode.
func (o ControllerPtrOutput) HeathCheckHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Controller) *string {
		if v == nil {
			return nil
		}
		return v.HeathCheckHost
	}).(pulumi.StringPtrOutput)
}

// Required for use with CNI based kubernetes installations (such as ones set up by kubeadm), since CNI and hostport don't mix yet. Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920 is merged.
func (o ControllerPtrOutput) HostNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Controller) *bool {
		if v == nil {
			return nil
		}
		return v.HostNetwork
	}).(pulumi.BoolPtrOutput)
}

// Use host ports 80 and 443. Disabled by default.
func (o ControllerPtrOutput) HostPort() ControllerHostPortPtrOutput {
	return o.ApplyT(func(v *Controller) *ControllerHostPort {
		if v == nil {
			return nil
		}
		return v.HostPort
	}).(ControllerHostPortPtrOutput)
}

// Optionally customize the pod hostname.
func (o ControllerPtrOutput) Hostname() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v *Controller) map[string]map[string]string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringMapMapOutput)
}

func (o ControllerPtrOutput) Image() ControllerImagePtrOutput {
	return o.ApplyT(func(v *Controller) *ControllerImage {
		if v == nil {
			return nil
		}
		return v.Image
	}).(ControllerImagePtrOutput)
}

// Process IngressClass per name (additionally as per spec.controller).
func (o ControllerPtrOutput) IngressClassByName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Controller) *bool {
		if v == nil {
			return nil
		}
		return v.IngressClassByName
	}).(pulumi.BoolPtrOutput)
}

// This section refers to the creation of the IngressClass resource. IngressClass resources are supported since k8s >= 1.18 and required since k8s >= 1.19
func (o ControllerPtrOutput) IngressClassResource() ControllerIngressClassResourcePtrOutput {
	return o.ApplyT(func(v *Controller) *ControllerIngressClassResource {
		if v == nil {
			return nil
		}
		return v.IngressClassResource
	}).(ControllerIngressClassResourcePtrOutput)
}

// Mutually exclusive with hpa autoscaling.
func (o ControllerPtrOutput) Keda() KedaPtrOutput {
	return o.ApplyT(func(v *Controller) *Keda {
		if v == nil {
			return nil
		}
		return v.Keda
	}).(KedaPtrOutput)
}

// DaemonSet or Deployment.
func (o ControllerPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Controller) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Improve connection draining when ingress controller pod is deleted using a lifecycle hook: With this new hook, we increased the default terminationGracePeriodSeconds from 30 seconds to 300, allowing the draining of connections up to five minutes. If the active connections end before that, the pod will terminate gracefully at that time. To effectively take advantage of this feature, the Configmap feature worker-shutdown-timeout new value is 240s instead of 10s.
func (o ControllerPtrOutput) Lifecycle() corev1.LifecyclePtrOutput {
	return o.ApplyT(func(v *Controller) *corev1.Lifecycle {
		if v == nil {
			return nil
		}
		return v.Lifecycle
	}).(corev1.LifecyclePtrOutput)
}

// Liveness probe values Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
func (o ControllerPtrOutput) LivenessProbe() corev1.ProbePtrOutput {
	return o.ApplyT(func(v *Controller) *corev1.Probe {
		if v == nil {
			return nil
		}
		return v.LivenessProbe
	}).(corev1.ProbePtrOutput)
}

// Maxmind license key to download GeoLite2 Databases https://blog.maxmind.com/2019/12/18/significant-changes-to-accessing-and-using-geolite2-databases.
func (o ControllerPtrOutput) MaxmindLicenseKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Controller) *string {
		if v == nil {
			return nil
		}
		return v.MaxmindLicenseKey
	}).(pulumi.StringPtrOutput)
}

func (o ControllerPtrOutput) Metrics() ControllerMetricsPtrOutput {
	return o.ApplyT(func(v *Controller) *ControllerMetrics {
		if v == nil {
			return nil
		}
		return v.Metrics
	}).(ControllerMetricsPtrOutput)
}

func (o ControllerPtrOutput) MinAvailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Controller) *int {
		if v == nil {
			return nil
		}
		return v.MinAvailable
	}).(pulumi.IntPtrOutput)
}

// minReadySeconds to avoid killing pods before we are ready.
func (o ControllerPtrOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Controller) *int {
		if v == nil {
			return nil
		}
		return v.MinReadySeconds
	}).(pulumi.IntPtrOutput)
}

func (o ControllerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Controller) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Node labels for controller pod assignment Ref: https://kubernetes.io/docs/user-guide/node-selection/.
func (o ControllerPtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Controller) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// Annotations to be added to controller pods.
func (o ControllerPtrOutput) PodAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Controller) map[string]string {
		if v == nil {
			return nil
		}
		return v.PodAnnotations
	}).(pulumi.StringMapOutput)
}

// labels to add to the pod container metadata.
func (o ControllerPtrOutput) PodLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Controller) map[string]string {
		if v == nil {
			return nil
		}
		return v.PodLabels
	}).(pulumi.StringMapOutput)
}

// Security Context policies for controller pods.
func (o ControllerPtrOutput) PodSecurityContext() corev1.PodSecurityContextPtrOutput {
	return o.ApplyT(func(v *Controller) *corev1.PodSecurityContext {
		if v == nil {
			return nil
		}
		return v.PodSecurityContext
	}).(corev1.PodSecurityContextPtrOutput)
}

func (o ControllerPtrOutput) PriorityClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Controller) *string {
		if v == nil {
			return nil
		}
		return v.PriorityClassName
	}).(pulumi.StringPtrOutput)
}

// Will add custom headers before sending traffic to backends according to https://github.com/kubernetes/ingress-nginx/tree/main/docs/examples/customization/custom-headers.
func (o ControllerPtrOutput) ProxySetHeaders() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v *Controller) map[string]map[string]string {
		if v == nil {
			return nil
		}
		return v.ProxySetHeaders
	}).(pulumi.StringMapMapOutput)
}

// Allows customization of the source of the IP address or FQDN to report in the ingress status field. By default, it reads the information provided by the service. If disable, the status field reports the IP address of the node or nodes where an ingress controller pod is running.
func (o ControllerPtrOutput) PublishService() ControllerPublishServicePtrOutput {
	return o.ApplyT(func(v *Controller) *ControllerPublishService {
		if v == nil {
			return nil
		}
		return v.PublishService
	}).(ControllerPublishServicePtrOutput)
}

// Readiness probe values Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
func (o ControllerPtrOutput) ReadinessProbe() corev1.ProbePtrOutput {
	return o.ApplyT(func(v *Controller) *corev1.Probe {
		if v == nil {
			return nil
		}
		return v.ReadinessProbe
	}).(corev1.ProbePtrOutput)
}

func (o ControllerPtrOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Controller) *int {
		if v == nil {
			return nil
		}
		return v.ReplicaCount
	}).(pulumi.IntPtrOutput)
}

// Bare-metal considerations via the host network https://kubernetes.github.io/ingress-nginx/deploy/baremetal/#via-the-host-network Ingress status was blank because there is no Service exposing the NGINX Ingress controller in a configuration using the host network, the default --publish-service flag used in standard cloud setups does not apply.
func (o ControllerPtrOutput) ReportNodeInternalIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Controller) *bool {
		if v == nil {
			return nil
		}
		return v.ReportNodeInternalIp
	}).(pulumi.BoolPtrOutput)
}

// Define requests resources to avoid probe issues due to CPU utilization in busy nodes ref: https://github.com/kubernetes/ingress-nginx/issues/4735#issuecomment-551204903 Ideally, there should be no limits. https://engineering.indeedblog.com/blog/2019/12/cpu-throttling-regression-fix/
func (o ControllerPtrOutput) Resources() corev1.ResourceRequirementsPtrOutput {
	return o.ApplyT(func(v *Controller) *corev1.ResourceRequirements {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(corev1.ResourceRequirementsPtrOutput)
}

// Limit the scope of the controller.
func (o ControllerPtrOutput) Scope() ControllerScopePtrOutput {
	return o.ApplyT(func(v *Controller) *ControllerScope {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(ControllerScopePtrOutput)
}

func (o ControllerPtrOutput) Service() ControllerServicePtrOutput {
	return o.ApplyT(func(v *Controller) *ControllerService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(ControllerServicePtrOutput)
}

// Startup probe values Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
func (o ControllerPtrOutput) StartupProbe() corev1.ProbePtrOutput {
	return o.ApplyT(func(v *Controller) *corev1.Probe {
		if v == nil {
			return nil
		}
		return v.StartupProbe
	}).(corev1.ProbePtrOutput)
}

// See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for notes on enabling and using sysctls.
func (o ControllerPtrOutput) Sysctls() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v *Controller) map[string]map[string]string {
		if v == nil {
			return nil
		}
		return v.Sysctls
	}).(pulumi.StringMapMapOutput)
}

// Allows customization of the tcp-services-configmap.
func (o ControllerPtrOutput) Tcp() ControllerTcpPtrOutput {
	return o.ApplyT(func(v *Controller) *ControllerTcp {
		if v == nil {
			return nil
		}
		return v.Tcp
	}).(ControllerTcpPtrOutput)
}

// How long to wait for the drain of connections.
func (o ControllerPtrOutput) TerminateGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Controller) *int {
		if v == nil {
			return nil
		}
		return v.TerminateGracePeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// Node tolerations for server scheduling to nodes with taints Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
func (o ControllerPtrOutput) Tolerations() *corev1.TolerationOutput {
	return o.ApplyT(func(v *Controller) *corev1.Toleration {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(*corev1.TolerationOutput)
}

// Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/.
func (o ControllerPtrOutput) TopologySpreadConstraints() corev1.TopologySpreadConstraintArrayOutput {
	return o.ApplyT(func(v *Controller) []corev1.TopologySpreadConstraint {
		if v == nil {
			return nil
		}
		return v.TopologySpreadConstraints
	}).(corev1.TopologySpreadConstraintArrayOutput)
}

func (o ControllerPtrOutput) Udp() ControllerUdpPtrOutput {
	return o.ApplyT(func(v *Controller) *ControllerUdp {
		if v == nil {
			return nil
		}
		return v.Udp
	}).(ControllerUdpPtrOutput)
}

// The update strategy to apply to the Deployment or DaemonSet.
func (o ControllerPtrOutput) UpdateStrategy() ControllerUpdateStrategyPtrOutput {
	return o.ApplyT(func(v *Controller) *ControllerUpdateStrategy {
		if v == nil {
			return nil
		}
		return v.UpdateStrategy
	}).(ControllerUpdateStrategyPtrOutput)
}

// Process Ingress objects without ingressClass annotation/ingressClassName field. Overrides value for --watch-ingress-without-class flag of the controller binary. Defaults to false.
func (o ControllerPtrOutput) WatchIngressWithoutClass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Controller) *bool {
		if v == nil {
			return nil
		}
		return v.WatchIngressWithoutClass
	}).(pulumi.BoolPtrOutput)
}

type ControllerAdmissionWebhooksCreateSecretJob struct {
	Resources *corev1.ResourceRequirements `pulumi:"resources"`
}

// ControllerAdmissionWebhooksCreateSecretJobInput is an input type that accepts ControllerAdmissionWebhooksCreateSecretJobArgs and ControllerAdmissionWebhooksCreateSecretJobOutput values.
// You can construct a concrete instance of `ControllerAdmissionWebhooksCreateSecretJobInput` via:
//
//	ControllerAdmissionWebhooksCreateSecretJobArgs{...}
type ControllerAdmissionWebhooksCreateSecretJobInput interface {
	pulumi.Input

	ToControllerAdmissionWebhooksCreateSecretJobOutput() ControllerAdmissionWebhooksCreateSecretJobOutput
	ToControllerAdmissionWebhooksCreateSecretJobOutputWithContext(context.Context) ControllerAdmissionWebhooksCreateSecretJobOutput
}

type ControllerAdmissionWebhooksCreateSecretJobArgs struct {
	Resources corev1.ResourceRequirementsPtrInput `pulumi:"resources"`
}

func (ControllerAdmissionWebhooksCreateSecretJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerAdmissionWebhooksCreateSecretJob)(nil)).Elem()
}

func (i ControllerAdmissionWebhooksCreateSecretJobArgs) ToControllerAdmissionWebhooksCreateSecretJobOutput() ControllerAdmissionWebhooksCreateSecretJobOutput {
	return i.ToControllerAdmissionWebhooksCreateSecretJobOutputWithContext(context.Background())
}

func (i ControllerAdmissionWebhooksCreateSecretJobArgs) ToControllerAdmissionWebhooksCreateSecretJobOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksCreateSecretJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerAdmissionWebhooksCreateSecretJobOutput)
}

func (i ControllerAdmissionWebhooksCreateSecretJobArgs) ToControllerAdmissionWebhooksCreateSecretJobPtrOutput() ControllerAdmissionWebhooksCreateSecretJobPtrOutput {
	return i.ToControllerAdmissionWebhooksCreateSecretJobPtrOutputWithContext(context.Background())
}

func (i ControllerAdmissionWebhooksCreateSecretJobArgs) ToControllerAdmissionWebhooksCreateSecretJobPtrOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksCreateSecretJobPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerAdmissionWebhooksCreateSecretJobOutput).ToControllerAdmissionWebhooksCreateSecretJobPtrOutputWithContext(ctx)
}

// ControllerAdmissionWebhooksCreateSecretJobPtrInput is an input type that accepts ControllerAdmissionWebhooksCreateSecretJobArgs, ControllerAdmissionWebhooksCreateSecretJobPtr and ControllerAdmissionWebhooksCreateSecretJobPtrOutput values.
// You can construct a concrete instance of `ControllerAdmissionWebhooksCreateSecretJobPtrInput` via:
//
//	        ControllerAdmissionWebhooksCreateSecretJobArgs{...}
//
//	or:
//
//	        nil
type ControllerAdmissionWebhooksCreateSecretJobPtrInput interface {
	pulumi.Input

	ToControllerAdmissionWebhooksCreateSecretJobPtrOutput() ControllerAdmissionWebhooksCreateSecretJobPtrOutput
	ToControllerAdmissionWebhooksCreateSecretJobPtrOutputWithContext(context.Context) ControllerAdmissionWebhooksCreateSecretJobPtrOutput
}

type controllerAdmissionWebhooksCreateSecretJobPtrType ControllerAdmissionWebhooksCreateSecretJobArgs

func ControllerAdmissionWebhooksCreateSecretJobPtr(v *ControllerAdmissionWebhooksCreateSecretJobArgs) ControllerAdmissionWebhooksCreateSecretJobPtrInput {
	return (*controllerAdmissionWebhooksCreateSecretJobPtrType)(v)
}

func (*controllerAdmissionWebhooksCreateSecretJobPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerAdmissionWebhooksCreateSecretJob)(nil)).Elem()
}

func (i *controllerAdmissionWebhooksCreateSecretJobPtrType) ToControllerAdmissionWebhooksCreateSecretJobPtrOutput() ControllerAdmissionWebhooksCreateSecretJobPtrOutput {
	return i.ToControllerAdmissionWebhooksCreateSecretJobPtrOutputWithContext(context.Background())
}

func (i *controllerAdmissionWebhooksCreateSecretJobPtrType) ToControllerAdmissionWebhooksCreateSecretJobPtrOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksCreateSecretJobPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerAdmissionWebhooksCreateSecretJobPtrOutput)
}

type ControllerAdmissionWebhooksCreateSecretJobOutput struct{ *pulumi.OutputState }

func (ControllerAdmissionWebhooksCreateSecretJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerAdmissionWebhooksCreateSecretJob)(nil)).Elem()
}

func (o ControllerAdmissionWebhooksCreateSecretJobOutput) ToControllerAdmissionWebhooksCreateSecretJobOutput() ControllerAdmissionWebhooksCreateSecretJobOutput {
	return o
}

func (o ControllerAdmissionWebhooksCreateSecretJobOutput) ToControllerAdmissionWebhooksCreateSecretJobOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksCreateSecretJobOutput {
	return o
}

func (o ControllerAdmissionWebhooksCreateSecretJobOutput) ToControllerAdmissionWebhooksCreateSecretJobPtrOutput() ControllerAdmissionWebhooksCreateSecretJobPtrOutput {
	return o.ToControllerAdmissionWebhooksCreateSecretJobPtrOutputWithContext(context.Background())
}

func (o ControllerAdmissionWebhooksCreateSecretJobOutput) ToControllerAdmissionWebhooksCreateSecretJobPtrOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksCreateSecretJobPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerAdmissionWebhooksCreateSecretJob) *ControllerAdmissionWebhooksCreateSecretJob {
		return &v
	}).(ControllerAdmissionWebhooksCreateSecretJobPtrOutput)
}

func (o ControllerAdmissionWebhooksCreateSecretJobOutput) Resources() corev1.ResourceRequirementsPtrOutput {
	return o.ApplyT(func(v ControllerAdmissionWebhooksCreateSecretJob) *corev1.ResourceRequirements { return v.Resources }).(corev1.ResourceRequirementsPtrOutput)
}

type ControllerAdmissionWebhooksCreateSecretJobPtrOutput struct{ *pulumi.OutputState }

func (ControllerAdmissionWebhooksCreateSecretJobPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerAdmissionWebhooksCreateSecretJob)(nil)).Elem()
}

func (o ControllerAdmissionWebhooksCreateSecretJobPtrOutput) ToControllerAdmissionWebhooksCreateSecretJobPtrOutput() ControllerAdmissionWebhooksCreateSecretJobPtrOutput {
	return o
}

func (o ControllerAdmissionWebhooksCreateSecretJobPtrOutput) ToControllerAdmissionWebhooksCreateSecretJobPtrOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksCreateSecretJobPtrOutput {
	return o
}

func (o ControllerAdmissionWebhooksCreateSecretJobPtrOutput) Elem() ControllerAdmissionWebhooksCreateSecretJobOutput {
	return o.ApplyT(func(v *ControllerAdmissionWebhooksCreateSecretJob) ControllerAdmissionWebhooksCreateSecretJob {
		if v != nil {
			return *v
		}
		var ret ControllerAdmissionWebhooksCreateSecretJob
		return ret
	}).(ControllerAdmissionWebhooksCreateSecretJobOutput)
}

func (o ControllerAdmissionWebhooksCreateSecretJobPtrOutput) Resources() corev1.ResourceRequirementsPtrOutput {
	return o.ApplyT(func(v *ControllerAdmissionWebhooksCreateSecretJob) *corev1.ResourceRequirements {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(corev1.ResourceRequirementsPtrOutput)
}

type ControllerAdmissionWebhooksPatch struct {
	Enabled        *bool             `pulumi:"enabled"`
	Image          *ControllerImage  `pulumi:"image"`
	NodeSelector   map[string]string `pulumi:"nodeSelector"`
	PodAnnotations map[string]string `pulumi:"podAnnotations"`
	// Provide a priority class name to the webhook patching job.
	PriorityClassName *string             `pulumi:"priorityClassName"`
	RunAsUser         *int                `pulumi:"runAsUser"`
	Tolerations       []corev1.Toleration `pulumi:"tolerations"`
}

// ControllerAdmissionWebhooksPatchInput is an input type that accepts ControllerAdmissionWebhooksPatchArgs and ControllerAdmissionWebhooksPatchOutput values.
// You can construct a concrete instance of `ControllerAdmissionWebhooksPatchInput` via:
//
//	ControllerAdmissionWebhooksPatchArgs{...}
type ControllerAdmissionWebhooksPatchInput interface {
	pulumi.Input

	ToControllerAdmissionWebhooksPatchOutput() ControllerAdmissionWebhooksPatchOutput
	ToControllerAdmissionWebhooksPatchOutputWithContext(context.Context) ControllerAdmissionWebhooksPatchOutput
}

type ControllerAdmissionWebhooksPatchArgs struct {
	Enabled        pulumi.BoolPtrInput     `pulumi:"enabled"`
	Image          ControllerImagePtrInput `pulumi:"image"`
	NodeSelector   pulumi.StringMapInput   `pulumi:"nodeSelector"`
	PodAnnotations pulumi.StringMapInput   `pulumi:"podAnnotations"`
	// Provide a priority class name to the webhook patching job.
	PriorityClassName pulumi.StringPtrInput       `pulumi:"priorityClassName"`
	RunAsUser         pulumi.IntPtrInput          `pulumi:"runAsUser"`
	Tolerations       corev1.TolerationArrayInput `pulumi:"tolerations"`
}

func (ControllerAdmissionWebhooksPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerAdmissionWebhooksPatch)(nil)).Elem()
}

func (i ControllerAdmissionWebhooksPatchArgs) ToControllerAdmissionWebhooksPatchOutput() ControllerAdmissionWebhooksPatchOutput {
	return i.ToControllerAdmissionWebhooksPatchOutputWithContext(context.Background())
}

func (i ControllerAdmissionWebhooksPatchArgs) ToControllerAdmissionWebhooksPatchOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerAdmissionWebhooksPatchOutput)
}

func (i ControllerAdmissionWebhooksPatchArgs) ToControllerAdmissionWebhooksPatchPtrOutput() ControllerAdmissionWebhooksPatchPtrOutput {
	return i.ToControllerAdmissionWebhooksPatchPtrOutputWithContext(context.Background())
}

func (i ControllerAdmissionWebhooksPatchArgs) ToControllerAdmissionWebhooksPatchPtrOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerAdmissionWebhooksPatchOutput).ToControllerAdmissionWebhooksPatchPtrOutputWithContext(ctx)
}

// ControllerAdmissionWebhooksPatchPtrInput is an input type that accepts ControllerAdmissionWebhooksPatchArgs, ControllerAdmissionWebhooksPatchPtr and ControllerAdmissionWebhooksPatchPtrOutput values.
// You can construct a concrete instance of `ControllerAdmissionWebhooksPatchPtrInput` via:
//
//	        ControllerAdmissionWebhooksPatchArgs{...}
//
//	or:
//
//	        nil
type ControllerAdmissionWebhooksPatchPtrInput interface {
	pulumi.Input

	ToControllerAdmissionWebhooksPatchPtrOutput() ControllerAdmissionWebhooksPatchPtrOutput
	ToControllerAdmissionWebhooksPatchPtrOutputWithContext(context.Context) ControllerAdmissionWebhooksPatchPtrOutput
}

type controllerAdmissionWebhooksPatchPtrType ControllerAdmissionWebhooksPatchArgs

func ControllerAdmissionWebhooksPatchPtr(v *ControllerAdmissionWebhooksPatchArgs) ControllerAdmissionWebhooksPatchPtrInput {
	return (*controllerAdmissionWebhooksPatchPtrType)(v)
}

func (*controllerAdmissionWebhooksPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerAdmissionWebhooksPatch)(nil)).Elem()
}

func (i *controllerAdmissionWebhooksPatchPtrType) ToControllerAdmissionWebhooksPatchPtrOutput() ControllerAdmissionWebhooksPatchPtrOutput {
	return i.ToControllerAdmissionWebhooksPatchPtrOutputWithContext(context.Background())
}

func (i *controllerAdmissionWebhooksPatchPtrType) ToControllerAdmissionWebhooksPatchPtrOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerAdmissionWebhooksPatchPtrOutput)
}

type ControllerAdmissionWebhooksPatchOutput struct{ *pulumi.OutputState }

func (ControllerAdmissionWebhooksPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerAdmissionWebhooksPatch)(nil)).Elem()
}

func (o ControllerAdmissionWebhooksPatchOutput) ToControllerAdmissionWebhooksPatchOutput() ControllerAdmissionWebhooksPatchOutput {
	return o
}

func (o ControllerAdmissionWebhooksPatchOutput) ToControllerAdmissionWebhooksPatchOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksPatchOutput {
	return o
}

func (o ControllerAdmissionWebhooksPatchOutput) ToControllerAdmissionWebhooksPatchPtrOutput() ControllerAdmissionWebhooksPatchPtrOutput {
	return o.ToControllerAdmissionWebhooksPatchPtrOutputWithContext(context.Background())
}

func (o ControllerAdmissionWebhooksPatchOutput) ToControllerAdmissionWebhooksPatchPtrOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerAdmissionWebhooksPatch) *ControllerAdmissionWebhooksPatch {
		return &v
	}).(ControllerAdmissionWebhooksPatchPtrOutput)
}

func (o ControllerAdmissionWebhooksPatchOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ControllerAdmissionWebhooksPatch) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o ControllerAdmissionWebhooksPatchOutput) Image() ControllerImagePtrOutput {
	return o.ApplyT(func(v ControllerAdmissionWebhooksPatch) *ControllerImage { return v.Image }).(ControllerImagePtrOutput)
}

func (o ControllerAdmissionWebhooksPatchOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v ControllerAdmissionWebhooksPatch) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

func (o ControllerAdmissionWebhooksPatchOutput) PodAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ControllerAdmissionWebhooksPatch) map[string]string { return v.PodAnnotations }).(pulumi.StringMapOutput)
}

// Provide a priority class name to the webhook patching job.
func (o ControllerAdmissionWebhooksPatchOutput) PriorityClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerAdmissionWebhooksPatch) *string { return v.PriorityClassName }).(pulumi.StringPtrOutput)
}

func (o ControllerAdmissionWebhooksPatchOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ControllerAdmissionWebhooksPatch) *int { return v.RunAsUser }).(pulumi.IntPtrOutput)
}

func (o ControllerAdmissionWebhooksPatchOutput) Tolerations() corev1.TolerationArrayOutput {
	return o.ApplyT(func(v ControllerAdmissionWebhooksPatch) []corev1.Toleration { return v.Tolerations }).(corev1.TolerationArrayOutput)
}

type ControllerAdmissionWebhooksPatchPtrOutput struct{ *pulumi.OutputState }

func (ControllerAdmissionWebhooksPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerAdmissionWebhooksPatch)(nil)).Elem()
}

func (o ControllerAdmissionWebhooksPatchPtrOutput) ToControllerAdmissionWebhooksPatchPtrOutput() ControllerAdmissionWebhooksPatchPtrOutput {
	return o
}

func (o ControllerAdmissionWebhooksPatchPtrOutput) ToControllerAdmissionWebhooksPatchPtrOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksPatchPtrOutput {
	return o
}

func (o ControllerAdmissionWebhooksPatchPtrOutput) Elem() ControllerAdmissionWebhooksPatchOutput {
	return o.ApplyT(func(v *ControllerAdmissionWebhooksPatch) ControllerAdmissionWebhooksPatch {
		if v != nil {
			return *v
		}
		var ret ControllerAdmissionWebhooksPatch
		return ret
	}).(ControllerAdmissionWebhooksPatchOutput)
}

func (o ControllerAdmissionWebhooksPatchPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ControllerAdmissionWebhooksPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o ControllerAdmissionWebhooksPatchPtrOutput) Image() ControllerImagePtrOutput {
	return o.ApplyT(func(v *ControllerAdmissionWebhooksPatch) *ControllerImage {
		if v == nil {
			return nil
		}
		return v.Image
	}).(ControllerImagePtrOutput)
}

func (o ControllerAdmissionWebhooksPatchPtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ControllerAdmissionWebhooksPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

func (o ControllerAdmissionWebhooksPatchPtrOutput) PodAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ControllerAdmissionWebhooksPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.PodAnnotations
	}).(pulumi.StringMapOutput)
}

// Provide a priority class name to the webhook patching job.
func (o ControllerAdmissionWebhooksPatchPtrOutput) PriorityClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerAdmissionWebhooksPatch) *string {
		if v == nil {
			return nil
		}
		return v.PriorityClassName
	}).(pulumi.StringPtrOutput)
}

func (o ControllerAdmissionWebhooksPatchPtrOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ControllerAdmissionWebhooksPatch) *int {
		if v == nil {
			return nil
		}
		return v.RunAsUser
	}).(pulumi.IntPtrOutput)
}

func (o ControllerAdmissionWebhooksPatchPtrOutput) Tolerations() corev1.TolerationArrayOutput {
	return o.ApplyT(func(v *ControllerAdmissionWebhooksPatch) []corev1.Toleration {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(corev1.TolerationArrayOutput)
}

type ControllerAdmissionWebhooksPatchWebhbookJob struct {
	Resources *corev1.ResourceRequirements `pulumi:"resources"`
}

// ControllerAdmissionWebhooksPatchWebhbookJobInput is an input type that accepts ControllerAdmissionWebhooksPatchWebhbookJobArgs and ControllerAdmissionWebhooksPatchWebhbookJobOutput values.
// You can construct a concrete instance of `ControllerAdmissionWebhooksPatchWebhbookJobInput` via:
//
//	ControllerAdmissionWebhooksPatchWebhbookJobArgs{...}
type ControllerAdmissionWebhooksPatchWebhbookJobInput interface {
	pulumi.Input

	ToControllerAdmissionWebhooksPatchWebhbookJobOutput() ControllerAdmissionWebhooksPatchWebhbookJobOutput
	ToControllerAdmissionWebhooksPatchWebhbookJobOutputWithContext(context.Context) ControllerAdmissionWebhooksPatchWebhbookJobOutput
}

type ControllerAdmissionWebhooksPatchWebhbookJobArgs struct {
	Resources corev1.ResourceRequirementsPtrInput `pulumi:"resources"`
}

func (ControllerAdmissionWebhooksPatchWebhbookJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerAdmissionWebhooksPatchWebhbookJob)(nil)).Elem()
}

func (i ControllerAdmissionWebhooksPatchWebhbookJobArgs) ToControllerAdmissionWebhooksPatchWebhbookJobOutput() ControllerAdmissionWebhooksPatchWebhbookJobOutput {
	return i.ToControllerAdmissionWebhooksPatchWebhbookJobOutputWithContext(context.Background())
}

func (i ControllerAdmissionWebhooksPatchWebhbookJobArgs) ToControllerAdmissionWebhooksPatchWebhbookJobOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksPatchWebhbookJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerAdmissionWebhooksPatchWebhbookJobOutput)
}

func (i ControllerAdmissionWebhooksPatchWebhbookJobArgs) ToControllerAdmissionWebhooksPatchWebhbookJobPtrOutput() ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput {
	return i.ToControllerAdmissionWebhooksPatchWebhbookJobPtrOutputWithContext(context.Background())
}

func (i ControllerAdmissionWebhooksPatchWebhbookJobArgs) ToControllerAdmissionWebhooksPatchWebhbookJobPtrOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerAdmissionWebhooksPatchWebhbookJobOutput).ToControllerAdmissionWebhooksPatchWebhbookJobPtrOutputWithContext(ctx)
}

// ControllerAdmissionWebhooksPatchWebhbookJobPtrInput is an input type that accepts ControllerAdmissionWebhooksPatchWebhbookJobArgs, ControllerAdmissionWebhooksPatchWebhbookJobPtr and ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput values.
// You can construct a concrete instance of `ControllerAdmissionWebhooksPatchWebhbookJobPtrInput` via:
//
//	        ControllerAdmissionWebhooksPatchWebhbookJobArgs{...}
//
//	or:
//
//	        nil
type ControllerAdmissionWebhooksPatchWebhbookJobPtrInput interface {
	pulumi.Input

	ToControllerAdmissionWebhooksPatchWebhbookJobPtrOutput() ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput
	ToControllerAdmissionWebhooksPatchWebhbookJobPtrOutputWithContext(context.Context) ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput
}

type controllerAdmissionWebhooksPatchWebhbookJobPtrType ControllerAdmissionWebhooksPatchWebhbookJobArgs

func ControllerAdmissionWebhooksPatchWebhbookJobPtr(v *ControllerAdmissionWebhooksPatchWebhbookJobArgs) ControllerAdmissionWebhooksPatchWebhbookJobPtrInput {
	return (*controllerAdmissionWebhooksPatchWebhbookJobPtrType)(v)
}

func (*controllerAdmissionWebhooksPatchWebhbookJobPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerAdmissionWebhooksPatchWebhbookJob)(nil)).Elem()
}

func (i *controllerAdmissionWebhooksPatchWebhbookJobPtrType) ToControllerAdmissionWebhooksPatchWebhbookJobPtrOutput() ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput {
	return i.ToControllerAdmissionWebhooksPatchWebhbookJobPtrOutputWithContext(context.Background())
}

func (i *controllerAdmissionWebhooksPatchWebhbookJobPtrType) ToControllerAdmissionWebhooksPatchWebhbookJobPtrOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput)
}

type ControllerAdmissionWebhooksPatchWebhbookJobOutput struct{ *pulumi.OutputState }

func (ControllerAdmissionWebhooksPatchWebhbookJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerAdmissionWebhooksPatchWebhbookJob)(nil)).Elem()
}

func (o ControllerAdmissionWebhooksPatchWebhbookJobOutput) ToControllerAdmissionWebhooksPatchWebhbookJobOutput() ControllerAdmissionWebhooksPatchWebhbookJobOutput {
	return o
}

func (o ControllerAdmissionWebhooksPatchWebhbookJobOutput) ToControllerAdmissionWebhooksPatchWebhbookJobOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksPatchWebhbookJobOutput {
	return o
}

func (o ControllerAdmissionWebhooksPatchWebhbookJobOutput) ToControllerAdmissionWebhooksPatchWebhbookJobPtrOutput() ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput {
	return o.ToControllerAdmissionWebhooksPatchWebhbookJobPtrOutputWithContext(context.Background())
}

func (o ControllerAdmissionWebhooksPatchWebhbookJobOutput) ToControllerAdmissionWebhooksPatchWebhbookJobPtrOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerAdmissionWebhooksPatchWebhbookJob) *ControllerAdmissionWebhooksPatchWebhbookJob {
		return &v
	}).(ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput)
}

func (o ControllerAdmissionWebhooksPatchWebhbookJobOutput) Resources() corev1.ResourceRequirementsPtrOutput {
	return o.ApplyT(func(v ControllerAdmissionWebhooksPatchWebhbookJob) *corev1.ResourceRequirements { return v.Resources }).(corev1.ResourceRequirementsPtrOutput)
}

type ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput struct{ *pulumi.OutputState }

func (ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerAdmissionWebhooksPatchWebhbookJob)(nil)).Elem()
}

func (o ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput) ToControllerAdmissionWebhooksPatchWebhbookJobPtrOutput() ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput {
	return o
}

func (o ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput) ToControllerAdmissionWebhooksPatchWebhbookJobPtrOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput {
	return o
}

func (o ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput) Elem() ControllerAdmissionWebhooksPatchWebhbookJobOutput {
	return o.ApplyT(func(v *ControllerAdmissionWebhooksPatchWebhbookJob) ControllerAdmissionWebhooksPatchWebhbookJob {
		if v != nil {
			return *v
		}
		var ret ControllerAdmissionWebhooksPatchWebhbookJob
		return ret
	}).(ControllerAdmissionWebhooksPatchWebhbookJobOutput)
}

func (o ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput) Resources() corev1.ResourceRequirementsPtrOutput {
	return o.ApplyT(func(v *ControllerAdmissionWebhooksPatchWebhbookJob) *corev1.ResourceRequirements {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(corev1.ResourceRequirementsPtrOutput)
}

type ControllerAdmissionWebhooksService struct {
	Annotations              map[string]string `pulumi:"annotations"`
	ClusterIP                *string           `pulumi:"clusterIP"`
	ExternalIPs              []string          `pulumi:"externalIPs"`
	LoadBalancerIPs          *string           `pulumi:"loadBalancerIPs"`
	LoadBalancerSourceRanges []string          `pulumi:"loadBalancerSourceRanges"`
	ServicePort              *int              `pulumi:"servicePort"`
	Type                     *string           `pulumi:"type"`
}

// ControllerAdmissionWebhooksServiceInput is an input type that accepts ControllerAdmissionWebhooksServiceArgs and ControllerAdmissionWebhooksServiceOutput values.
// You can construct a concrete instance of `ControllerAdmissionWebhooksServiceInput` via:
//
//	ControllerAdmissionWebhooksServiceArgs{...}
type ControllerAdmissionWebhooksServiceInput interface {
	pulumi.Input

	ToControllerAdmissionWebhooksServiceOutput() ControllerAdmissionWebhooksServiceOutput
	ToControllerAdmissionWebhooksServiceOutputWithContext(context.Context) ControllerAdmissionWebhooksServiceOutput
}

type ControllerAdmissionWebhooksServiceArgs struct {
	Annotations              pulumi.StringMapInput   `pulumi:"annotations"`
	ClusterIP                pulumi.StringPtrInput   `pulumi:"clusterIP"`
	ExternalIPs              pulumi.StringArrayInput `pulumi:"externalIPs"`
	LoadBalancerIPs          pulumi.StringPtrInput   `pulumi:"loadBalancerIPs"`
	LoadBalancerSourceRanges pulumi.StringArrayInput `pulumi:"loadBalancerSourceRanges"`
	ServicePort              pulumi.IntPtrInput      `pulumi:"servicePort"`
	Type                     pulumi.StringPtrInput   `pulumi:"type"`
}

func (ControllerAdmissionWebhooksServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerAdmissionWebhooksService)(nil)).Elem()
}

func (i ControllerAdmissionWebhooksServiceArgs) ToControllerAdmissionWebhooksServiceOutput() ControllerAdmissionWebhooksServiceOutput {
	return i.ToControllerAdmissionWebhooksServiceOutputWithContext(context.Background())
}

func (i ControllerAdmissionWebhooksServiceArgs) ToControllerAdmissionWebhooksServiceOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerAdmissionWebhooksServiceOutput)
}

func (i ControllerAdmissionWebhooksServiceArgs) ToControllerAdmissionWebhooksServicePtrOutput() ControllerAdmissionWebhooksServicePtrOutput {
	return i.ToControllerAdmissionWebhooksServicePtrOutputWithContext(context.Background())
}

func (i ControllerAdmissionWebhooksServiceArgs) ToControllerAdmissionWebhooksServicePtrOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerAdmissionWebhooksServiceOutput).ToControllerAdmissionWebhooksServicePtrOutputWithContext(ctx)
}

// ControllerAdmissionWebhooksServicePtrInput is an input type that accepts ControllerAdmissionWebhooksServiceArgs, ControllerAdmissionWebhooksServicePtr and ControllerAdmissionWebhooksServicePtrOutput values.
// You can construct a concrete instance of `ControllerAdmissionWebhooksServicePtrInput` via:
//
//	        ControllerAdmissionWebhooksServiceArgs{...}
//
//	or:
//
//	        nil
type ControllerAdmissionWebhooksServicePtrInput interface {
	pulumi.Input

	ToControllerAdmissionWebhooksServicePtrOutput() ControllerAdmissionWebhooksServicePtrOutput
	ToControllerAdmissionWebhooksServicePtrOutputWithContext(context.Context) ControllerAdmissionWebhooksServicePtrOutput
}

type controllerAdmissionWebhooksServicePtrType ControllerAdmissionWebhooksServiceArgs

func ControllerAdmissionWebhooksServicePtr(v *ControllerAdmissionWebhooksServiceArgs) ControllerAdmissionWebhooksServicePtrInput {
	return (*controllerAdmissionWebhooksServicePtrType)(v)
}

func (*controllerAdmissionWebhooksServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerAdmissionWebhooksService)(nil)).Elem()
}

func (i *controllerAdmissionWebhooksServicePtrType) ToControllerAdmissionWebhooksServicePtrOutput() ControllerAdmissionWebhooksServicePtrOutput {
	return i.ToControllerAdmissionWebhooksServicePtrOutputWithContext(context.Background())
}

func (i *controllerAdmissionWebhooksServicePtrType) ToControllerAdmissionWebhooksServicePtrOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerAdmissionWebhooksServicePtrOutput)
}

type ControllerAdmissionWebhooksServiceOutput struct{ *pulumi.OutputState }

func (ControllerAdmissionWebhooksServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerAdmissionWebhooksService)(nil)).Elem()
}

func (o ControllerAdmissionWebhooksServiceOutput) ToControllerAdmissionWebhooksServiceOutput() ControllerAdmissionWebhooksServiceOutput {
	return o
}

func (o ControllerAdmissionWebhooksServiceOutput) ToControllerAdmissionWebhooksServiceOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksServiceOutput {
	return o
}

func (o ControllerAdmissionWebhooksServiceOutput) ToControllerAdmissionWebhooksServicePtrOutput() ControllerAdmissionWebhooksServicePtrOutput {
	return o.ToControllerAdmissionWebhooksServicePtrOutputWithContext(context.Background())
}

func (o ControllerAdmissionWebhooksServiceOutput) ToControllerAdmissionWebhooksServicePtrOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerAdmissionWebhooksService) *ControllerAdmissionWebhooksService {
		return &v
	}).(ControllerAdmissionWebhooksServicePtrOutput)
}

func (o ControllerAdmissionWebhooksServiceOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ControllerAdmissionWebhooksService) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o ControllerAdmissionWebhooksServiceOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerAdmissionWebhooksService) *string { return v.ClusterIP }).(pulumi.StringPtrOutput)
}

func (o ControllerAdmissionWebhooksServiceOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ControllerAdmissionWebhooksService) []string { return v.ExternalIPs }).(pulumi.StringArrayOutput)
}

func (o ControllerAdmissionWebhooksServiceOutput) LoadBalancerIPs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerAdmissionWebhooksService) *string { return v.LoadBalancerIPs }).(pulumi.StringPtrOutput)
}

func (o ControllerAdmissionWebhooksServiceOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ControllerAdmissionWebhooksService) []string { return v.LoadBalancerSourceRanges }).(pulumi.StringArrayOutput)
}

func (o ControllerAdmissionWebhooksServiceOutput) ServicePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ControllerAdmissionWebhooksService) *int { return v.ServicePort }).(pulumi.IntPtrOutput)
}

func (o ControllerAdmissionWebhooksServiceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerAdmissionWebhooksService) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ControllerAdmissionWebhooksServicePtrOutput struct{ *pulumi.OutputState }

func (ControllerAdmissionWebhooksServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerAdmissionWebhooksService)(nil)).Elem()
}

func (o ControllerAdmissionWebhooksServicePtrOutput) ToControllerAdmissionWebhooksServicePtrOutput() ControllerAdmissionWebhooksServicePtrOutput {
	return o
}

func (o ControllerAdmissionWebhooksServicePtrOutput) ToControllerAdmissionWebhooksServicePtrOutputWithContext(ctx context.Context) ControllerAdmissionWebhooksServicePtrOutput {
	return o
}

func (o ControllerAdmissionWebhooksServicePtrOutput) Elem() ControllerAdmissionWebhooksServiceOutput {
	return o.ApplyT(func(v *ControllerAdmissionWebhooksService) ControllerAdmissionWebhooksService {
		if v != nil {
			return *v
		}
		var ret ControllerAdmissionWebhooksService
		return ret
	}).(ControllerAdmissionWebhooksServiceOutput)
}

func (o ControllerAdmissionWebhooksServicePtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ControllerAdmissionWebhooksService) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o ControllerAdmissionWebhooksServicePtrOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerAdmissionWebhooksService) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIP
	}).(pulumi.StringPtrOutput)
}

func (o ControllerAdmissionWebhooksServicePtrOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ControllerAdmissionWebhooksService) []string {
		if v == nil {
			return nil
		}
		return v.ExternalIPs
	}).(pulumi.StringArrayOutput)
}

func (o ControllerAdmissionWebhooksServicePtrOutput) LoadBalancerIPs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerAdmissionWebhooksService) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIPs
	}).(pulumi.StringPtrOutput)
}

func (o ControllerAdmissionWebhooksServicePtrOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ControllerAdmissionWebhooksService) []string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSourceRanges
	}).(pulumi.StringArrayOutput)
}

func (o ControllerAdmissionWebhooksServicePtrOutput) ServicePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ControllerAdmissionWebhooksService) *int {
		if v == nil {
			return nil
		}
		return v.ServicePort
	}).(pulumi.IntPtrOutput)
}

func (o ControllerAdmissionWebhooksServicePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerAdmissionWebhooksService) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type ControllerCustomTemplate struct {
	ConfigMapKey  *string `pulumi:"configMapKey"`
	ConfigMapName *string `pulumi:"configMapName"`
}

// ControllerCustomTemplateInput is an input type that accepts ControllerCustomTemplateArgs and ControllerCustomTemplateOutput values.
// You can construct a concrete instance of `ControllerCustomTemplateInput` via:
//
//	ControllerCustomTemplateArgs{...}
type ControllerCustomTemplateInput interface {
	pulumi.Input

	ToControllerCustomTemplateOutput() ControllerCustomTemplateOutput
	ToControllerCustomTemplateOutputWithContext(context.Context) ControllerCustomTemplateOutput
}

type ControllerCustomTemplateArgs struct {
	ConfigMapKey  pulumi.StringPtrInput `pulumi:"configMapKey"`
	ConfigMapName pulumi.StringPtrInput `pulumi:"configMapName"`
}

func (ControllerCustomTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerCustomTemplate)(nil)).Elem()
}

func (i ControllerCustomTemplateArgs) ToControllerCustomTemplateOutput() ControllerCustomTemplateOutput {
	return i.ToControllerCustomTemplateOutputWithContext(context.Background())
}

func (i ControllerCustomTemplateArgs) ToControllerCustomTemplateOutputWithContext(ctx context.Context) ControllerCustomTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerCustomTemplateOutput)
}

func (i ControllerCustomTemplateArgs) ToControllerCustomTemplatePtrOutput() ControllerCustomTemplatePtrOutput {
	return i.ToControllerCustomTemplatePtrOutputWithContext(context.Background())
}

func (i ControllerCustomTemplateArgs) ToControllerCustomTemplatePtrOutputWithContext(ctx context.Context) ControllerCustomTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerCustomTemplateOutput).ToControllerCustomTemplatePtrOutputWithContext(ctx)
}

// ControllerCustomTemplatePtrInput is an input type that accepts ControllerCustomTemplateArgs, ControllerCustomTemplatePtr and ControllerCustomTemplatePtrOutput values.
// You can construct a concrete instance of `ControllerCustomTemplatePtrInput` via:
//
//	        ControllerCustomTemplateArgs{...}
//
//	or:
//
//	        nil
type ControllerCustomTemplatePtrInput interface {
	pulumi.Input

	ToControllerCustomTemplatePtrOutput() ControllerCustomTemplatePtrOutput
	ToControllerCustomTemplatePtrOutputWithContext(context.Context) ControllerCustomTemplatePtrOutput
}

type controllerCustomTemplatePtrType ControllerCustomTemplateArgs

func ControllerCustomTemplatePtr(v *ControllerCustomTemplateArgs) ControllerCustomTemplatePtrInput {
	return (*controllerCustomTemplatePtrType)(v)
}

func (*controllerCustomTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerCustomTemplate)(nil)).Elem()
}

func (i *controllerCustomTemplatePtrType) ToControllerCustomTemplatePtrOutput() ControllerCustomTemplatePtrOutput {
	return i.ToControllerCustomTemplatePtrOutputWithContext(context.Background())
}

func (i *controllerCustomTemplatePtrType) ToControllerCustomTemplatePtrOutputWithContext(ctx context.Context) ControllerCustomTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerCustomTemplatePtrOutput)
}

type ControllerCustomTemplateOutput struct{ *pulumi.OutputState }

func (ControllerCustomTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerCustomTemplate)(nil)).Elem()
}

func (o ControllerCustomTemplateOutput) ToControllerCustomTemplateOutput() ControllerCustomTemplateOutput {
	return o
}

func (o ControllerCustomTemplateOutput) ToControllerCustomTemplateOutputWithContext(ctx context.Context) ControllerCustomTemplateOutput {
	return o
}

func (o ControllerCustomTemplateOutput) ToControllerCustomTemplatePtrOutput() ControllerCustomTemplatePtrOutput {
	return o.ToControllerCustomTemplatePtrOutputWithContext(context.Background())
}

func (o ControllerCustomTemplateOutput) ToControllerCustomTemplatePtrOutputWithContext(ctx context.Context) ControllerCustomTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerCustomTemplate) *ControllerCustomTemplate {
		return &v
	}).(ControllerCustomTemplatePtrOutput)
}

func (o ControllerCustomTemplateOutput) ConfigMapKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerCustomTemplate) *string { return v.ConfigMapKey }).(pulumi.StringPtrOutput)
}

func (o ControllerCustomTemplateOutput) ConfigMapName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerCustomTemplate) *string { return v.ConfigMapName }).(pulumi.StringPtrOutput)
}

type ControllerCustomTemplatePtrOutput struct{ *pulumi.OutputState }

func (ControllerCustomTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerCustomTemplate)(nil)).Elem()
}

func (o ControllerCustomTemplatePtrOutput) ToControllerCustomTemplatePtrOutput() ControllerCustomTemplatePtrOutput {
	return o
}

func (o ControllerCustomTemplatePtrOutput) ToControllerCustomTemplatePtrOutputWithContext(ctx context.Context) ControllerCustomTemplatePtrOutput {
	return o
}

func (o ControllerCustomTemplatePtrOutput) Elem() ControllerCustomTemplateOutput {
	return o.ApplyT(func(v *ControllerCustomTemplate) ControllerCustomTemplate {
		if v != nil {
			return *v
		}
		var ret ControllerCustomTemplate
		return ret
	}).(ControllerCustomTemplateOutput)
}

func (o ControllerCustomTemplatePtrOutput) ConfigMapKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerCustomTemplate) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMapKey
	}).(pulumi.StringPtrOutput)
}

func (o ControllerCustomTemplatePtrOutput) ConfigMapName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerCustomTemplate) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMapName
	}).(pulumi.StringPtrOutput)
}

type ControllerDefaultBackend struct {
	Affinity    *corev1.Affinity `pulumi:"affinity"`
	Autoscaling *Autoscaling     `pulumi:"autoscaling"`
	Enabled     *bool            `pulumi:"enabled"`
	// Use an existing PSP instead of creating one.
	ExistingPsp *string                      `pulumi:"existingPsp"`
	ExtraArgs   map[string]map[string]string `pulumi:"extraArgs"`
	ExtraEnvs   []corev1.EnvVar              `pulumi:"extraEnvs"`
	// Additional volumeMounts to the default backend container.  - name: copy-portal-skins    mountPath: /var/lib/lemonldap-ng/portal/skins
	ExtraVolumeMounts []corev1.VolumeMount `pulumi:"extraVolumeMounts"`
	// Additional volumes to the default backend pod.  - name: copy-portal-skins    emptyDir: {}
	ExtraVolumes []corev1.Volume  `pulumi:"extraVolumes"`
	Image        *ControllerImage `pulumi:"image"`
	// Liveness probe values for default backend. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
	LivenessProbe *corev1.Probe `pulumi:"livenessProbe"`
	MinAvailable  *int          `pulumi:"minAvailable"`
	Name          *string       `pulumi:"name"`
	// Node labels for default backend pod assignment Ref: https://kubernetes.io/docs/user-guide/node-selection/.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Annotations to be added to default backend pods.
	PodAnnotations map[string]string `pulumi:"podAnnotations"`
	// labels to add to the pod container metadata
	PodLabels map[string]string `pulumi:"podLabels"`
	// Security Context policies for controller pods. See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for notes on enabling and using sysctls.
	PodSecurityContext *corev1.PodSecurityContext `pulumi:"podSecurityContext"`
	Port               *int                       `pulumi:"port"`
	PriorityClassName  *string                    `pulumi:"priorityClassName"`
	// Readiness probe values for default backend. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
	ReadinessProbe *corev1.Probe                    `pulumi:"readinessProbe"`
	ReplicaCount   *int                             `pulumi:"replicaCount"`
	Resources      *corev1.ResourceRequirements     `pulumi:"resources"`
	Service        *ControllerDefaultBackendService `pulumi:"service"`
	ServiceAccount *ControllerServiceAccount        `pulumi:"serviceAccount"`
	// Node tolerations for server scheduling to nodes with taints. Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
	Tolerations []corev1.Toleration `pulumi:"tolerations"`
}

// ControllerDefaultBackendInput is an input type that accepts ControllerDefaultBackendArgs and ControllerDefaultBackendOutput values.
// You can construct a concrete instance of `ControllerDefaultBackendInput` via:
//
//	ControllerDefaultBackendArgs{...}
type ControllerDefaultBackendInput interface {
	pulumi.Input

	ToControllerDefaultBackendOutput() ControllerDefaultBackendOutput
	ToControllerDefaultBackendOutputWithContext(context.Context) ControllerDefaultBackendOutput
}

type ControllerDefaultBackendArgs struct {
	Affinity    corev1.AffinityPtrInput `pulumi:"affinity"`
	Autoscaling AutoscalingPtrInput     `pulumi:"autoscaling"`
	Enabled     pulumi.BoolPtrInput     `pulumi:"enabled"`
	// Use an existing PSP instead of creating one.
	ExistingPsp pulumi.StringPtrInput    `pulumi:"existingPsp"`
	ExtraArgs   pulumi.StringMapMapInput `pulumi:"extraArgs"`
	ExtraEnvs   corev1.EnvVarArrayInput  `pulumi:"extraEnvs"`
	// Additional volumeMounts to the default backend container.  - name: copy-portal-skins    mountPath: /var/lib/lemonldap-ng/portal/skins
	ExtraVolumeMounts corev1.VolumeMountArrayInput `pulumi:"extraVolumeMounts"`
	// Additional volumes to the default backend pod.  - name: copy-portal-skins    emptyDir: {}
	ExtraVolumes corev1.VolumeArrayInput `pulumi:"extraVolumes"`
	Image        ControllerImagePtrInput `pulumi:"image"`
	// Liveness probe values for default backend. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
	LivenessProbe corev1.ProbePtrInput  `pulumi:"livenessProbe"`
	MinAvailable  pulumi.IntPtrInput    `pulumi:"minAvailable"`
	Name          pulumi.StringPtrInput `pulumi:"name"`
	// Node labels for default backend pod assignment Ref: https://kubernetes.io/docs/user-guide/node-selection/.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Annotations to be added to default backend pods.
	PodAnnotations pulumi.StringMapInput `pulumi:"podAnnotations"`
	// labels to add to the pod container metadata
	PodLabels pulumi.StringMapInput `pulumi:"podLabels"`
	// Security Context policies for controller pods. See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for notes on enabling and using sysctls.
	PodSecurityContext corev1.PodSecurityContextPtrInput `pulumi:"podSecurityContext"`
	Port               pulumi.IntPtrInput                `pulumi:"port"`
	PriorityClassName  pulumi.StringPtrInput             `pulumi:"priorityClassName"`
	// Readiness probe values for default backend. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
	ReadinessProbe corev1.ProbePtrInput                    `pulumi:"readinessProbe"`
	ReplicaCount   pulumi.IntPtrInput                      `pulumi:"replicaCount"`
	Resources      corev1.ResourceRequirementsPtrInput     `pulumi:"resources"`
	Service        ControllerDefaultBackendServicePtrInput `pulumi:"service"`
	ServiceAccount ControllerServiceAccountPtrInput        `pulumi:"serviceAccount"`
	// Node tolerations for server scheduling to nodes with taints. Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
	Tolerations corev1.TolerationArrayInput `pulumi:"tolerations"`
}

func (ControllerDefaultBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerDefaultBackend)(nil)).Elem()
}

func (i ControllerDefaultBackendArgs) ToControllerDefaultBackendOutput() ControllerDefaultBackendOutput {
	return i.ToControllerDefaultBackendOutputWithContext(context.Background())
}

func (i ControllerDefaultBackendArgs) ToControllerDefaultBackendOutputWithContext(ctx context.Context) ControllerDefaultBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerDefaultBackendOutput)
}

func (i ControllerDefaultBackendArgs) ToControllerDefaultBackendPtrOutput() ControllerDefaultBackendPtrOutput {
	return i.ToControllerDefaultBackendPtrOutputWithContext(context.Background())
}

func (i ControllerDefaultBackendArgs) ToControllerDefaultBackendPtrOutputWithContext(ctx context.Context) ControllerDefaultBackendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerDefaultBackendOutput).ToControllerDefaultBackendPtrOutputWithContext(ctx)
}

// ControllerDefaultBackendPtrInput is an input type that accepts ControllerDefaultBackendArgs, ControllerDefaultBackendPtr and ControllerDefaultBackendPtrOutput values.
// You can construct a concrete instance of `ControllerDefaultBackendPtrInput` via:
//
//	        ControllerDefaultBackendArgs{...}
//
//	or:
//
//	        nil
type ControllerDefaultBackendPtrInput interface {
	pulumi.Input

	ToControllerDefaultBackendPtrOutput() ControllerDefaultBackendPtrOutput
	ToControllerDefaultBackendPtrOutputWithContext(context.Context) ControllerDefaultBackendPtrOutput
}

type controllerDefaultBackendPtrType ControllerDefaultBackendArgs

func ControllerDefaultBackendPtr(v *ControllerDefaultBackendArgs) ControllerDefaultBackendPtrInput {
	return (*controllerDefaultBackendPtrType)(v)
}

func (*controllerDefaultBackendPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerDefaultBackend)(nil)).Elem()
}

func (i *controllerDefaultBackendPtrType) ToControllerDefaultBackendPtrOutput() ControllerDefaultBackendPtrOutput {
	return i.ToControllerDefaultBackendPtrOutputWithContext(context.Background())
}

func (i *controllerDefaultBackendPtrType) ToControllerDefaultBackendPtrOutputWithContext(ctx context.Context) ControllerDefaultBackendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerDefaultBackendPtrOutput)
}

type ControllerDefaultBackendOutput struct{ *pulumi.OutputState }

func (ControllerDefaultBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerDefaultBackend)(nil)).Elem()
}

func (o ControllerDefaultBackendOutput) ToControllerDefaultBackendOutput() ControllerDefaultBackendOutput {
	return o
}

func (o ControllerDefaultBackendOutput) ToControllerDefaultBackendOutputWithContext(ctx context.Context) ControllerDefaultBackendOutput {
	return o
}

func (o ControllerDefaultBackendOutput) ToControllerDefaultBackendPtrOutput() ControllerDefaultBackendPtrOutput {
	return o.ToControllerDefaultBackendPtrOutputWithContext(context.Background())
}

func (o ControllerDefaultBackendOutput) ToControllerDefaultBackendPtrOutputWithContext(ctx context.Context) ControllerDefaultBackendPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerDefaultBackend) *ControllerDefaultBackend {
		return &v
	}).(ControllerDefaultBackendPtrOutput)
}

func (o ControllerDefaultBackendOutput) Affinity() corev1.AffinityPtrOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) *corev1.Affinity { return v.Affinity }).(corev1.AffinityPtrOutput)
}

func (o ControllerDefaultBackendOutput) Autoscaling() AutoscalingPtrOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) *Autoscaling { return v.Autoscaling }).(AutoscalingPtrOutput)
}

func (o ControllerDefaultBackendOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Use an existing PSP instead of creating one.
func (o ControllerDefaultBackendOutput) ExistingPsp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) *string { return v.ExistingPsp }).(pulumi.StringPtrOutput)
}

func (o ControllerDefaultBackendOutput) ExtraArgs() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) map[string]map[string]string { return v.ExtraArgs }).(pulumi.StringMapMapOutput)
}

func (o ControllerDefaultBackendOutput) ExtraEnvs() corev1.EnvVarArrayOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) []corev1.EnvVar { return v.ExtraEnvs }).(corev1.EnvVarArrayOutput)
}

// Additional volumeMounts to the default backend container.  - name: copy-portal-skins    mountPath: /var/lib/lemonldap-ng/portal/skins
func (o ControllerDefaultBackendOutput) ExtraVolumeMounts() corev1.VolumeMountArrayOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) []corev1.VolumeMount { return v.ExtraVolumeMounts }).(corev1.VolumeMountArrayOutput)
}

// Additional volumes to the default backend pod.  - name: copy-portal-skins    emptyDir: {}
func (o ControllerDefaultBackendOutput) ExtraVolumes() corev1.VolumeArrayOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) []corev1.Volume { return v.ExtraVolumes }).(corev1.VolumeArrayOutput)
}

func (o ControllerDefaultBackendOutput) Image() ControllerImagePtrOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) *ControllerImage { return v.Image }).(ControllerImagePtrOutput)
}

// Liveness probe values for default backend. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
func (o ControllerDefaultBackendOutput) LivenessProbe() corev1.ProbePtrOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) *corev1.Probe { return v.LivenessProbe }).(corev1.ProbePtrOutput)
}

func (o ControllerDefaultBackendOutput) MinAvailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) *int { return v.MinAvailable }).(pulumi.IntPtrOutput)
}

func (o ControllerDefaultBackendOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Node labels for default backend pod assignment Ref: https://kubernetes.io/docs/user-guide/node-selection/.
func (o ControllerDefaultBackendOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Annotations to be added to default backend pods.
func (o ControllerDefaultBackendOutput) PodAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) map[string]string { return v.PodAnnotations }).(pulumi.StringMapOutput)
}

// labels to add to the pod container metadata
func (o ControllerDefaultBackendOutput) PodLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) map[string]string { return v.PodLabels }).(pulumi.StringMapOutput)
}

// Security Context policies for controller pods. See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for notes on enabling and using sysctls.
func (o ControllerDefaultBackendOutput) PodSecurityContext() corev1.PodSecurityContextPtrOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) *corev1.PodSecurityContext { return v.PodSecurityContext }).(corev1.PodSecurityContextPtrOutput)
}

func (o ControllerDefaultBackendOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o ControllerDefaultBackendOutput) PriorityClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) *string { return v.PriorityClassName }).(pulumi.StringPtrOutput)
}

// Readiness probe values for default backend. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
func (o ControllerDefaultBackendOutput) ReadinessProbe() corev1.ProbePtrOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) *corev1.Probe { return v.ReadinessProbe }).(corev1.ProbePtrOutput)
}

func (o ControllerDefaultBackendOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) *int { return v.ReplicaCount }).(pulumi.IntPtrOutput)
}

func (o ControllerDefaultBackendOutput) Resources() corev1.ResourceRequirementsPtrOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) *corev1.ResourceRequirements { return v.Resources }).(corev1.ResourceRequirementsPtrOutput)
}

func (o ControllerDefaultBackendOutput) Service() ControllerDefaultBackendServicePtrOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) *ControllerDefaultBackendService { return v.Service }).(ControllerDefaultBackendServicePtrOutput)
}

func (o ControllerDefaultBackendOutput) ServiceAccount() ControllerServiceAccountPtrOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) *ControllerServiceAccount { return v.ServiceAccount }).(ControllerServiceAccountPtrOutput)
}

// Node tolerations for server scheduling to nodes with taints. Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
func (o ControllerDefaultBackendOutput) Tolerations() corev1.TolerationArrayOutput {
	return o.ApplyT(func(v ControllerDefaultBackend) []corev1.Toleration { return v.Tolerations }).(corev1.TolerationArrayOutput)
}

type ControllerDefaultBackendPtrOutput struct{ *pulumi.OutputState }

func (ControllerDefaultBackendPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerDefaultBackend)(nil)).Elem()
}

func (o ControllerDefaultBackendPtrOutput) ToControllerDefaultBackendPtrOutput() ControllerDefaultBackendPtrOutput {
	return o
}

func (o ControllerDefaultBackendPtrOutput) ToControllerDefaultBackendPtrOutputWithContext(ctx context.Context) ControllerDefaultBackendPtrOutput {
	return o
}

func (o ControllerDefaultBackendPtrOutput) Elem() ControllerDefaultBackendOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) ControllerDefaultBackend {
		if v != nil {
			return *v
		}
		var ret ControllerDefaultBackend
		return ret
	}).(ControllerDefaultBackendOutput)
}

func (o ControllerDefaultBackendPtrOutput) Affinity() corev1.AffinityPtrOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) *corev1.Affinity {
		if v == nil {
			return nil
		}
		return v.Affinity
	}).(corev1.AffinityPtrOutput)
}

func (o ControllerDefaultBackendPtrOutput) Autoscaling() AutoscalingPtrOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) *Autoscaling {
		if v == nil {
			return nil
		}
		return v.Autoscaling
	}).(AutoscalingPtrOutput)
}

func (o ControllerDefaultBackendPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Use an existing PSP instead of creating one.
func (o ControllerDefaultBackendPtrOutput) ExistingPsp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) *string {
		if v == nil {
			return nil
		}
		return v.ExistingPsp
	}).(pulumi.StringPtrOutput)
}

func (o ControllerDefaultBackendPtrOutput) ExtraArgs() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) map[string]map[string]string {
		if v == nil {
			return nil
		}
		return v.ExtraArgs
	}).(pulumi.StringMapMapOutput)
}

func (o ControllerDefaultBackendPtrOutput) ExtraEnvs() corev1.EnvVarArrayOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) []corev1.EnvVar {
		if v == nil {
			return nil
		}
		return v.ExtraEnvs
	}).(corev1.EnvVarArrayOutput)
}

// Additional volumeMounts to the default backend container.  - name: copy-portal-skins    mountPath: /var/lib/lemonldap-ng/portal/skins
func (o ControllerDefaultBackendPtrOutput) ExtraVolumeMounts() corev1.VolumeMountArrayOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) []corev1.VolumeMount {
		if v == nil {
			return nil
		}
		return v.ExtraVolumeMounts
	}).(corev1.VolumeMountArrayOutput)
}

// Additional volumes to the default backend pod.  - name: copy-portal-skins    emptyDir: {}
func (o ControllerDefaultBackendPtrOutput) ExtraVolumes() corev1.VolumeArrayOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) []corev1.Volume {
		if v == nil {
			return nil
		}
		return v.ExtraVolumes
	}).(corev1.VolumeArrayOutput)
}

func (o ControllerDefaultBackendPtrOutput) Image() ControllerImagePtrOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) *ControllerImage {
		if v == nil {
			return nil
		}
		return v.Image
	}).(ControllerImagePtrOutput)
}

// Liveness probe values for default backend. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
func (o ControllerDefaultBackendPtrOutput) LivenessProbe() corev1.ProbePtrOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) *corev1.Probe {
		if v == nil {
			return nil
		}
		return v.LivenessProbe
	}).(corev1.ProbePtrOutput)
}

func (o ControllerDefaultBackendPtrOutput) MinAvailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) *int {
		if v == nil {
			return nil
		}
		return v.MinAvailable
	}).(pulumi.IntPtrOutput)
}

func (o ControllerDefaultBackendPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Node labels for default backend pod assignment Ref: https://kubernetes.io/docs/user-guide/node-selection/.
func (o ControllerDefaultBackendPtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// Annotations to be added to default backend pods.
func (o ControllerDefaultBackendPtrOutput) PodAnnotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) map[string]string {
		if v == nil {
			return nil
		}
		return v.PodAnnotations
	}).(pulumi.StringMapOutput)
}

// labels to add to the pod container metadata
func (o ControllerDefaultBackendPtrOutput) PodLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) map[string]string {
		if v == nil {
			return nil
		}
		return v.PodLabels
	}).(pulumi.StringMapOutput)
}

// Security Context policies for controller pods. See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for notes on enabling and using sysctls.
func (o ControllerDefaultBackendPtrOutput) PodSecurityContext() corev1.PodSecurityContextPtrOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) *corev1.PodSecurityContext {
		if v == nil {
			return nil
		}
		return v.PodSecurityContext
	}).(corev1.PodSecurityContextPtrOutput)
}

func (o ControllerDefaultBackendPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

func (o ControllerDefaultBackendPtrOutput) PriorityClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) *string {
		if v == nil {
			return nil
		}
		return v.PriorityClassName
	}).(pulumi.StringPtrOutput)
}

// Readiness probe values for default backend. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
func (o ControllerDefaultBackendPtrOutput) ReadinessProbe() corev1.ProbePtrOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) *corev1.Probe {
		if v == nil {
			return nil
		}
		return v.ReadinessProbe
	}).(corev1.ProbePtrOutput)
}

func (o ControllerDefaultBackendPtrOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) *int {
		if v == nil {
			return nil
		}
		return v.ReplicaCount
	}).(pulumi.IntPtrOutput)
}

func (o ControllerDefaultBackendPtrOutput) Resources() corev1.ResourceRequirementsPtrOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) *corev1.ResourceRequirements {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(corev1.ResourceRequirementsPtrOutput)
}

func (o ControllerDefaultBackendPtrOutput) Service() ControllerDefaultBackendServicePtrOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) *ControllerDefaultBackendService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(ControllerDefaultBackendServicePtrOutput)
}

func (o ControllerDefaultBackendPtrOutput) ServiceAccount() ControllerServiceAccountPtrOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) *ControllerServiceAccount {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(ControllerServiceAccountPtrOutput)
}

// Node tolerations for server scheduling to nodes with taints. Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
func (o ControllerDefaultBackendPtrOutput) Tolerations() corev1.TolerationArrayOutput {
	return o.ApplyT(func(v *ControllerDefaultBackend) []corev1.Toleration {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(corev1.TolerationArrayOutput)
}

type ControllerDefaultBackendService struct {
	Annotations map[string]string `pulumi:"annotations"`
	ClusterIP   *string           `pulumi:"clusterIP"`
	// List of IP addresses at which the default backend service is available. Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
	ExternalIPs              []string `pulumi:"externalIPs"`
	LoadBalancerIP           *string  `pulumi:"loadBalancerIP"`
	LoadBalancerSourceRanges []string `pulumi:"loadBalancerSourceRanges"`
	ServicePort              *int     `pulumi:"servicePort"`
	Type                     *string  `pulumi:"type"`
}

// ControllerDefaultBackendServiceInput is an input type that accepts ControllerDefaultBackendServiceArgs and ControllerDefaultBackendServiceOutput values.
// You can construct a concrete instance of `ControllerDefaultBackendServiceInput` via:
//
//	ControllerDefaultBackendServiceArgs{...}
type ControllerDefaultBackendServiceInput interface {
	pulumi.Input

	ToControllerDefaultBackendServiceOutput() ControllerDefaultBackendServiceOutput
	ToControllerDefaultBackendServiceOutputWithContext(context.Context) ControllerDefaultBackendServiceOutput
}

type ControllerDefaultBackendServiceArgs struct {
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	ClusterIP   pulumi.StringPtrInput `pulumi:"clusterIP"`
	// List of IP addresses at which the default backend service is available. Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
	ExternalIPs              pulumi.StringArrayInput `pulumi:"externalIPs"`
	LoadBalancerIP           pulumi.StringPtrInput   `pulumi:"loadBalancerIP"`
	LoadBalancerSourceRanges pulumi.StringArrayInput `pulumi:"loadBalancerSourceRanges"`
	ServicePort              pulumi.IntPtrInput      `pulumi:"servicePort"`
	Type                     pulumi.StringPtrInput   `pulumi:"type"`
}

func (ControllerDefaultBackendServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerDefaultBackendService)(nil)).Elem()
}

func (i ControllerDefaultBackendServiceArgs) ToControllerDefaultBackendServiceOutput() ControllerDefaultBackendServiceOutput {
	return i.ToControllerDefaultBackendServiceOutputWithContext(context.Background())
}

func (i ControllerDefaultBackendServiceArgs) ToControllerDefaultBackendServiceOutputWithContext(ctx context.Context) ControllerDefaultBackendServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerDefaultBackendServiceOutput)
}

func (i ControllerDefaultBackendServiceArgs) ToControllerDefaultBackendServicePtrOutput() ControllerDefaultBackendServicePtrOutput {
	return i.ToControllerDefaultBackendServicePtrOutputWithContext(context.Background())
}

func (i ControllerDefaultBackendServiceArgs) ToControllerDefaultBackendServicePtrOutputWithContext(ctx context.Context) ControllerDefaultBackendServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerDefaultBackendServiceOutput).ToControllerDefaultBackendServicePtrOutputWithContext(ctx)
}

// ControllerDefaultBackendServicePtrInput is an input type that accepts ControllerDefaultBackendServiceArgs, ControllerDefaultBackendServicePtr and ControllerDefaultBackendServicePtrOutput values.
// You can construct a concrete instance of `ControllerDefaultBackendServicePtrInput` via:
//
//	        ControllerDefaultBackendServiceArgs{...}
//
//	or:
//
//	        nil
type ControllerDefaultBackendServicePtrInput interface {
	pulumi.Input

	ToControllerDefaultBackendServicePtrOutput() ControllerDefaultBackendServicePtrOutput
	ToControllerDefaultBackendServicePtrOutputWithContext(context.Context) ControllerDefaultBackendServicePtrOutput
}

type controllerDefaultBackendServicePtrType ControllerDefaultBackendServiceArgs

func ControllerDefaultBackendServicePtr(v *ControllerDefaultBackendServiceArgs) ControllerDefaultBackendServicePtrInput {
	return (*controllerDefaultBackendServicePtrType)(v)
}

func (*controllerDefaultBackendServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerDefaultBackendService)(nil)).Elem()
}

func (i *controllerDefaultBackendServicePtrType) ToControllerDefaultBackendServicePtrOutput() ControllerDefaultBackendServicePtrOutput {
	return i.ToControllerDefaultBackendServicePtrOutputWithContext(context.Background())
}

func (i *controllerDefaultBackendServicePtrType) ToControllerDefaultBackendServicePtrOutputWithContext(ctx context.Context) ControllerDefaultBackendServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerDefaultBackendServicePtrOutput)
}

type ControllerDefaultBackendServiceOutput struct{ *pulumi.OutputState }

func (ControllerDefaultBackendServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerDefaultBackendService)(nil)).Elem()
}

func (o ControllerDefaultBackendServiceOutput) ToControllerDefaultBackendServiceOutput() ControllerDefaultBackendServiceOutput {
	return o
}

func (o ControllerDefaultBackendServiceOutput) ToControllerDefaultBackendServiceOutputWithContext(ctx context.Context) ControllerDefaultBackendServiceOutput {
	return o
}

func (o ControllerDefaultBackendServiceOutput) ToControllerDefaultBackendServicePtrOutput() ControllerDefaultBackendServicePtrOutput {
	return o.ToControllerDefaultBackendServicePtrOutputWithContext(context.Background())
}

func (o ControllerDefaultBackendServiceOutput) ToControllerDefaultBackendServicePtrOutputWithContext(ctx context.Context) ControllerDefaultBackendServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerDefaultBackendService) *ControllerDefaultBackendService {
		return &v
	}).(ControllerDefaultBackendServicePtrOutput)
}

func (o ControllerDefaultBackendServiceOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ControllerDefaultBackendService) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o ControllerDefaultBackendServiceOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerDefaultBackendService) *string { return v.ClusterIP }).(pulumi.StringPtrOutput)
}

// List of IP addresses at which the default backend service is available. Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
func (o ControllerDefaultBackendServiceOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ControllerDefaultBackendService) []string { return v.ExternalIPs }).(pulumi.StringArrayOutput)
}

func (o ControllerDefaultBackendServiceOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerDefaultBackendService) *string { return v.LoadBalancerIP }).(pulumi.StringPtrOutput)
}

func (o ControllerDefaultBackendServiceOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ControllerDefaultBackendService) []string { return v.LoadBalancerSourceRanges }).(pulumi.StringArrayOutput)
}

func (o ControllerDefaultBackendServiceOutput) ServicePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ControllerDefaultBackendService) *int { return v.ServicePort }).(pulumi.IntPtrOutput)
}

func (o ControllerDefaultBackendServiceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerDefaultBackendService) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ControllerDefaultBackendServicePtrOutput struct{ *pulumi.OutputState }

func (ControllerDefaultBackendServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerDefaultBackendService)(nil)).Elem()
}

func (o ControllerDefaultBackendServicePtrOutput) ToControllerDefaultBackendServicePtrOutput() ControllerDefaultBackendServicePtrOutput {
	return o
}

func (o ControllerDefaultBackendServicePtrOutput) ToControllerDefaultBackendServicePtrOutputWithContext(ctx context.Context) ControllerDefaultBackendServicePtrOutput {
	return o
}

func (o ControllerDefaultBackendServicePtrOutput) Elem() ControllerDefaultBackendServiceOutput {
	return o.ApplyT(func(v *ControllerDefaultBackendService) ControllerDefaultBackendService {
		if v != nil {
			return *v
		}
		var ret ControllerDefaultBackendService
		return ret
	}).(ControllerDefaultBackendServiceOutput)
}

func (o ControllerDefaultBackendServicePtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ControllerDefaultBackendService) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o ControllerDefaultBackendServicePtrOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerDefaultBackendService) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIP
	}).(pulumi.StringPtrOutput)
}

// List of IP addresses at which the default backend service is available. Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
func (o ControllerDefaultBackendServicePtrOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ControllerDefaultBackendService) []string {
		if v == nil {
			return nil
		}
		return v.ExternalIPs
	}).(pulumi.StringArrayOutput)
}

func (o ControllerDefaultBackendServicePtrOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerDefaultBackendService) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIP
	}).(pulumi.StringPtrOutput)
}

func (o ControllerDefaultBackendServicePtrOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ControllerDefaultBackendService) []string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSourceRanges
	}).(pulumi.StringArrayOutput)
}

func (o ControllerDefaultBackendServicePtrOutput) ServicePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ControllerDefaultBackendService) *int {
		if v == nil {
			return nil
		}
		return v.ServicePort
	}).(pulumi.IntPtrOutput)
}

func (o ControllerDefaultBackendServicePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerDefaultBackendService) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type ControllerHostPort struct {
	Enabled *bool                    `pulumi:"enabled"`
	Ports   *ControllerHostPortPorts `pulumi:"ports"`
}

// ControllerHostPortInput is an input type that accepts ControllerHostPortArgs and ControllerHostPortOutput values.
// You can construct a concrete instance of `ControllerHostPortInput` via:
//
//	ControllerHostPortArgs{...}
type ControllerHostPortInput interface {
	pulumi.Input

	ToControllerHostPortOutput() ControllerHostPortOutput
	ToControllerHostPortOutputWithContext(context.Context) ControllerHostPortOutput
}

type ControllerHostPortArgs struct {
	Enabled pulumi.BoolPtrInput             `pulumi:"enabled"`
	Ports   ControllerHostPortPortsPtrInput `pulumi:"ports"`
}

func (ControllerHostPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerHostPort)(nil)).Elem()
}

func (i ControllerHostPortArgs) ToControllerHostPortOutput() ControllerHostPortOutput {
	return i.ToControllerHostPortOutputWithContext(context.Background())
}

func (i ControllerHostPortArgs) ToControllerHostPortOutputWithContext(ctx context.Context) ControllerHostPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerHostPortOutput)
}

func (i ControllerHostPortArgs) ToControllerHostPortPtrOutput() ControllerHostPortPtrOutput {
	return i.ToControllerHostPortPtrOutputWithContext(context.Background())
}

func (i ControllerHostPortArgs) ToControllerHostPortPtrOutputWithContext(ctx context.Context) ControllerHostPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerHostPortOutput).ToControllerHostPortPtrOutputWithContext(ctx)
}

// ControllerHostPortPtrInput is an input type that accepts ControllerHostPortArgs, ControllerHostPortPtr and ControllerHostPortPtrOutput values.
// You can construct a concrete instance of `ControllerHostPortPtrInput` via:
//
//	        ControllerHostPortArgs{...}
//
//	or:
//
//	        nil
type ControllerHostPortPtrInput interface {
	pulumi.Input

	ToControllerHostPortPtrOutput() ControllerHostPortPtrOutput
	ToControllerHostPortPtrOutputWithContext(context.Context) ControllerHostPortPtrOutput
}

type controllerHostPortPtrType ControllerHostPortArgs

func ControllerHostPortPtr(v *ControllerHostPortArgs) ControllerHostPortPtrInput {
	return (*controllerHostPortPtrType)(v)
}

func (*controllerHostPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerHostPort)(nil)).Elem()
}

func (i *controllerHostPortPtrType) ToControllerHostPortPtrOutput() ControllerHostPortPtrOutput {
	return i.ToControllerHostPortPtrOutputWithContext(context.Background())
}

func (i *controllerHostPortPtrType) ToControllerHostPortPtrOutputWithContext(ctx context.Context) ControllerHostPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerHostPortPtrOutput)
}

type ControllerHostPortOutput struct{ *pulumi.OutputState }

func (ControllerHostPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerHostPort)(nil)).Elem()
}

func (o ControllerHostPortOutput) ToControllerHostPortOutput() ControllerHostPortOutput {
	return o
}

func (o ControllerHostPortOutput) ToControllerHostPortOutputWithContext(ctx context.Context) ControllerHostPortOutput {
	return o
}

func (o ControllerHostPortOutput) ToControllerHostPortPtrOutput() ControllerHostPortPtrOutput {
	return o.ToControllerHostPortPtrOutputWithContext(context.Background())
}

func (o ControllerHostPortOutput) ToControllerHostPortPtrOutputWithContext(ctx context.Context) ControllerHostPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerHostPort) *ControllerHostPort {
		return &v
	}).(ControllerHostPortPtrOutput)
}

func (o ControllerHostPortOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ControllerHostPort) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o ControllerHostPortOutput) Ports() ControllerHostPortPortsPtrOutput {
	return o.ApplyT(func(v ControllerHostPort) *ControllerHostPortPorts { return v.Ports }).(ControllerHostPortPortsPtrOutput)
}

type ControllerHostPortPtrOutput struct{ *pulumi.OutputState }

func (ControllerHostPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerHostPort)(nil)).Elem()
}

func (o ControllerHostPortPtrOutput) ToControllerHostPortPtrOutput() ControllerHostPortPtrOutput {
	return o
}

func (o ControllerHostPortPtrOutput) ToControllerHostPortPtrOutputWithContext(ctx context.Context) ControllerHostPortPtrOutput {
	return o
}

func (o ControllerHostPortPtrOutput) Elem() ControllerHostPortOutput {
	return o.ApplyT(func(v *ControllerHostPort) ControllerHostPort {
		if v != nil {
			return *v
		}
		var ret ControllerHostPort
		return ret
	}).(ControllerHostPortOutput)
}

func (o ControllerHostPortPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ControllerHostPort) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o ControllerHostPortPtrOutput) Ports() ControllerHostPortPortsPtrOutput {
	return o.ApplyT(func(v *ControllerHostPort) *ControllerHostPortPorts {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(ControllerHostPortPortsPtrOutput)
}

type ControllerHostPortPorts struct {
	Http  *int `pulumi:"http"`
	Https *int `pulumi:"https"`
}

// ControllerHostPortPortsInput is an input type that accepts ControllerHostPortPortsArgs and ControllerHostPortPortsOutput values.
// You can construct a concrete instance of `ControllerHostPortPortsInput` via:
//
//	ControllerHostPortPortsArgs{...}
type ControllerHostPortPortsInput interface {
	pulumi.Input

	ToControllerHostPortPortsOutput() ControllerHostPortPortsOutput
	ToControllerHostPortPortsOutputWithContext(context.Context) ControllerHostPortPortsOutput
}

type ControllerHostPortPortsArgs struct {
	Http  pulumi.IntPtrInput `pulumi:"http"`
	Https pulumi.IntPtrInput `pulumi:"https"`
}

func (ControllerHostPortPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerHostPortPorts)(nil)).Elem()
}

func (i ControllerHostPortPortsArgs) ToControllerHostPortPortsOutput() ControllerHostPortPortsOutput {
	return i.ToControllerHostPortPortsOutputWithContext(context.Background())
}

func (i ControllerHostPortPortsArgs) ToControllerHostPortPortsOutputWithContext(ctx context.Context) ControllerHostPortPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerHostPortPortsOutput)
}

func (i ControllerHostPortPortsArgs) ToControllerHostPortPortsPtrOutput() ControllerHostPortPortsPtrOutput {
	return i.ToControllerHostPortPortsPtrOutputWithContext(context.Background())
}

func (i ControllerHostPortPortsArgs) ToControllerHostPortPortsPtrOutputWithContext(ctx context.Context) ControllerHostPortPortsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerHostPortPortsOutput).ToControllerHostPortPortsPtrOutputWithContext(ctx)
}

// ControllerHostPortPortsPtrInput is an input type that accepts ControllerHostPortPortsArgs, ControllerHostPortPortsPtr and ControllerHostPortPortsPtrOutput values.
// You can construct a concrete instance of `ControllerHostPortPortsPtrInput` via:
//
//	        ControllerHostPortPortsArgs{...}
//
//	or:
//
//	        nil
type ControllerHostPortPortsPtrInput interface {
	pulumi.Input

	ToControllerHostPortPortsPtrOutput() ControllerHostPortPortsPtrOutput
	ToControllerHostPortPortsPtrOutputWithContext(context.Context) ControllerHostPortPortsPtrOutput
}

type controllerHostPortPortsPtrType ControllerHostPortPortsArgs

func ControllerHostPortPortsPtr(v *ControllerHostPortPortsArgs) ControllerHostPortPortsPtrInput {
	return (*controllerHostPortPortsPtrType)(v)
}

func (*controllerHostPortPortsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerHostPortPorts)(nil)).Elem()
}

func (i *controllerHostPortPortsPtrType) ToControllerHostPortPortsPtrOutput() ControllerHostPortPortsPtrOutput {
	return i.ToControllerHostPortPortsPtrOutputWithContext(context.Background())
}

func (i *controllerHostPortPortsPtrType) ToControllerHostPortPortsPtrOutputWithContext(ctx context.Context) ControllerHostPortPortsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerHostPortPortsPtrOutput)
}

type ControllerHostPortPortsOutput struct{ *pulumi.OutputState }

func (ControllerHostPortPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerHostPortPorts)(nil)).Elem()
}

func (o ControllerHostPortPortsOutput) ToControllerHostPortPortsOutput() ControllerHostPortPortsOutput {
	return o
}

func (o ControllerHostPortPortsOutput) ToControllerHostPortPortsOutputWithContext(ctx context.Context) ControllerHostPortPortsOutput {
	return o
}

func (o ControllerHostPortPortsOutput) ToControllerHostPortPortsPtrOutput() ControllerHostPortPortsPtrOutput {
	return o.ToControllerHostPortPortsPtrOutputWithContext(context.Background())
}

func (o ControllerHostPortPortsOutput) ToControllerHostPortPortsPtrOutputWithContext(ctx context.Context) ControllerHostPortPortsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerHostPortPorts) *ControllerHostPortPorts {
		return &v
	}).(ControllerHostPortPortsPtrOutput)
}

func (o ControllerHostPortPortsOutput) Http() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ControllerHostPortPorts) *int { return v.Http }).(pulumi.IntPtrOutput)
}

func (o ControllerHostPortPortsOutput) Https() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ControllerHostPortPorts) *int { return v.Https }).(pulumi.IntPtrOutput)
}

type ControllerHostPortPortsPtrOutput struct{ *pulumi.OutputState }

func (ControllerHostPortPortsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerHostPortPorts)(nil)).Elem()
}

func (o ControllerHostPortPortsPtrOutput) ToControllerHostPortPortsPtrOutput() ControllerHostPortPortsPtrOutput {
	return o
}

func (o ControllerHostPortPortsPtrOutput) ToControllerHostPortPortsPtrOutputWithContext(ctx context.Context) ControllerHostPortPortsPtrOutput {
	return o
}

func (o ControllerHostPortPortsPtrOutput) Elem() ControllerHostPortPortsOutput {
	return o.ApplyT(func(v *ControllerHostPortPorts) ControllerHostPortPorts {
		if v != nil {
			return *v
		}
		var ret ControllerHostPortPorts
		return ret
	}).(ControllerHostPortPortsOutput)
}

func (o ControllerHostPortPortsPtrOutput) Http() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ControllerHostPortPorts) *int {
		if v == nil {
			return nil
		}
		return v.Http
	}).(pulumi.IntPtrOutput)
}

func (o ControllerHostPortPortsPtrOutput) Https() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ControllerHostPortPorts) *int {
		if v == nil {
			return nil
		}
		return v.Https
	}).(pulumi.IntPtrOutput)
}

type ControllerImage struct {
	AllowPrivilegeEscalation *bool   `pulumi:"allowPrivilegeEscalation"`
	Digest                   *string `pulumi:"digest"`
	Image                    *string `pulumi:"image"`
	PullPolicy               *string `pulumi:"pullPolicy"`
	ReadOnlyRootFilesystem   *bool   `pulumi:"readOnlyRootFilesystem"`
	Registry                 *string `pulumi:"registry"`
	// for backwards compatibility consider setting the full image url via the repository value below use *either* current default registry/image or repository format or installing will fail.
	Repository   *string `pulumi:"repository"`
	RunAsNonRoot *bool   `pulumi:"runAsNonRoot"`
	RunAsUser    *string `pulumi:"runAsUser"`
	Tag          *string `pulumi:"tag"`
}

// ControllerImageInput is an input type that accepts ControllerImageArgs and ControllerImageOutput values.
// You can construct a concrete instance of `ControllerImageInput` via:
//
//	ControllerImageArgs{...}
type ControllerImageInput interface {
	pulumi.Input

	ToControllerImageOutput() ControllerImageOutput
	ToControllerImageOutputWithContext(context.Context) ControllerImageOutput
}

type ControllerImageArgs struct {
	AllowPrivilegeEscalation pulumi.BoolPtrInput   `pulumi:"allowPrivilegeEscalation"`
	Digest                   pulumi.StringPtrInput `pulumi:"digest"`
	Image                    pulumi.StringPtrInput `pulumi:"image"`
	PullPolicy               pulumi.StringPtrInput `pulumi:"pullPolicy"`
	ReadOnlyRootFilesystem   pulumi.BoolPtrInput   `pulumi:"readOnlyRootFilesystem"`
	Registry                 pulumi.StringPtrInput `pulumi:"registry"`
	// for backwards compatibility consider setting the full image url via the repository value below use *either* current default registry/image or repository format or installing will fail.
	Repository   pulumi.StringPtrInput `pulumi:"repository"`
	RunAsNonRoot pulumi.BoolPtrInput   `pulumi:"runAsNonRoot"`
	RunAsUser    pulumi.StringPtrInput `pulumi:"runAsUser"`
	Tag          pulumi.StringPtrInput `pulumi:"tag"`
}

func (ControllerImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerImage)(nil)).Elem()
}

func (i ControllerImageArgs) ToControllerImageOutput() ControllerImageOutput {
	return i.ToControllerImageOutputWithContext(context.Background())
}

func (i ControllerImageArgs) ToControllerImageOutputWithContext(ctx context.Context) ControllerImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerImageOutput)
}

func (i ControllerImageArgs) ToControllerImagePtrOutput() ControllerImagePtrOutput {
	return i.ToControllerImagePtrOutputWithContext(context.Background())
}

func (i ControllerImageArgs) ToControllerImagePtrOutputWithContext(ctx context.Context) ControllerImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerImageOutput).ToControllerImagePtrOutputWithContext(ctx)
}

// ControllerImagePtrInput is an input type that accepts ControllerImageArgs, ControllerImagePtr and ControllerImagePtrOutput values.
// You can construct a concrete instance of `ControllerImagePtrInput` via:
//
//	        ControllerImageArgs{...}
//
//	or:
//
//	        nil
type ControllerImagePtrInput interface {
	pulumi.Input

	ToControllerImagePtrOutput() ControllerImagePtrOutput
	ToControllerImagePtrOutputWithContext(context.Context) ControllerImagePtrOutput
}

type controllerImagePtrType ControllerImageArgs

func ControllerImagePtr(v *ControllerImageArgs) ControllerImagePtrInput {
	return (*controllerImagePtrType)(v)
}

func (*controllerImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerImage)(nil)).Elem()
}

func (i *controllerImagePtrType) ToControllerImagePtrOutput() ControllerImagePtrOutput {
	return i.ToControllerImagePtrOutputWithContext(context.Background())
}

func (i *controllerImagePtrType) ToControllerImagePtrOutputWithContext(ctx context.Context) ControllerImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerImagePtrOutput)
}

type ControllerImageOutput struct{ *pulumi.OutputState }

func (ControllerImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerImage)(nil)).Elem()
}

func (o ControllerImageOutput) ToControllerImageOutput() ControllerImageOutput {
	return o
}

func (o ControllerImageOutput) ToControllerImageOutputWithContext(ctx context.Context) ControllerImageOutput {
	return o
}

func (o ControllerImageOutput) ToControllerImagePtrOutput() ControllerImagePtrOutput {
	return o.ToControllerImagePtrOutputWithContext(context.Background())
}

func (o ControllerImageOutput) ToControllerImagePtrOutputWithContext(ctx context.Context) ControllerImagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerImage) *ControllerImage {
		return &v
	}).(ControllerImagePtrOutput)
}

func (o ControllerImageOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ControllerImage) *bool { return v.AllowPrivilegeEscalation }).(pulumi.BoolPtrOutput)
}

func (o ControllerImageOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerImage) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

func (o ControllerImageOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerImage) *string { return v.Image }).(pulumi.StringPtrOutput)
}

func (o ControllerImageOutput) PullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerImage) *string { return v.PullPolicy }).(pulumi.StringPtrOutput)
}

func (o ControllerImageOutput) ReadOnlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ControllerImage) *bool { return v.ReadOnlyRootFilesystem }).(pulumi.BoolPtrOutput)
}

func (o ControllerImageOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerImage) *string { return v.Registry }).(pulumi.StringPtrOutput)
}

// for backwards compatibility consider setting the full image url via the repository value below use *either* current default registry/image or repository format or installing will fail.
func (o ControllerImageOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerImage) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

func (o ControllerImageOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ControllerImage) *bool { return v.RunAsNonRoot }).(pulumi.BoolPtrOutput)
}

func (o ControllerImageOutput) RunAsUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerImage) *string { return v.RunAsUser }).(pulumi.StringPtrOutput)
}

func (o ControllerImageOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerImage) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type ControllerImagePtrOutput struct{ *pulumi.OutputState }

func (ControllerImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerImage)(nil)).Elem()
}

func (o ControllerImagePtrOutput) ToControllerImagePtrOutput() ControllerImagePtrOutput {
	return o
}

func (o ControllerImagePtrOutput) ToControllerImagePtrOutputWithContext(ctx context.Context) ControllerImagePtrOutput {
	return o
}

func (o ControllerImagePtrOutput) Elem() ControllerImageOutput {
	return o.ApplyT(func(v *ControllerImage) ControllerImage {
		if v != nil {
			return *v
		}
		var ret ControllerImage
		return ret
	}).(ControllerImageOutput)
}

func (o ControllerImagePtrOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ControllerImage) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPrivilegeEscalation
	}).(pulumi.BoolPtrOutput)
}

func (o ControllerImagePtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerImage) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

func (o ControllerImagePtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerImage) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

func (o ControllerImagePtrOutput) PullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerImage) *string {
		if v == nil {
			return nil
		}
		return v.PullPolicy
	}).(pulumi.StringPtrOutput)
}

func (o ControllerImagePtrOutput) ReadOnlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ControllerImage) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnlyRootFilesystem
	}).(pulumi.BoolPtrOutput)
}

func (o ControllerImagePtrOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerImage) *string {
		if v == nil {
			return nil
		}
		return v.Registry
	}).(pulumi.StringPtrOutput)
}

// for backwards compatibility consider setting the full image url via the repository value below use *either* current default registry/image or repository format or installing will fail.
func (o ControllerImagePtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerImage) *string {
		if v == nil {
			return nil
		}
		return v.Repository
	}).(pulumi.StringPtrOutput)
}

func (o ControllerImagePtrOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ControllerImage) *bool {
		if v == nil {
			return nil
		}
		return v.RunAsNonRoot
	}).(pulumi.BoolPtrOutput)
}

func (o ControllerImagePtrOutput) RunAsUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerImage) *string {
		if v == nil {
			return nil
		}
		return v.RunAsUser
	}).(pulumi.StringPtrOutput)
}

func (o ControllerImagePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerImage) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

type ControllerIngressClassResource struct {
	ControllerValue *string `pulumi:"controllerValue"`
	Default         *bool   `pulumi:"default"`
	Enabled         *bool   `pulumi:"enabled"`
	Name            *string `pulumi:"name"`
	// Parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters.
	Parameters map[string]map[string]string `pulumi:"parameters"`
}

// ControllerIngressClassResourceInput is an input type that accepts ControllerIngressClassResourceArgs and ControllerIngressClassResourceOutput values.
// You can construct a concrete instance of `ControllerIngressClassResourceInput` via:
//
//	ControllerIngressClassResourceArgs{...}
type ControllerIngressClassResourceInput interface {
	pulumi.Input

	ToControllerIngressClassResourceOutput() ControllerIngressClassResourceOutput
	ToControllerIngressClassResourceOutputWithContext(context.Context) ControllerIngressClassResourceOutput
}

type ControllerIngressClassResourceArgs struct {
	ControllerValue pulumi.StringPtrInput `pulumi:"controllerValue"`
	Default         pulumi.BoolPtrInput   `pulumi:"default"`
	Enabled         pulumi.BoolPtrInput   `pulumi:"enabled"`
	Name            pulumi.StringPtrInput `pulumi:"name"`
	// Parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters.
	Parameters pulumi.StringMapMapInput `pulumi:"parameters"`
}

func (ControllerIngressClassResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerIngressClassResource)(nil)).Elem()
}

func (i ControllerIngressClassResourceArgs) ToControllerIngressClassResourceOutput() ControllerIngressClassResourceOutput {
	return i.ToControllerIngressClassResourceOutputWithContext(context.Background())
}

func (i ControllerIngressClassResourceArgs) ToControllerIngressClassResourceOutputWithContext(ctx context.Context) ControllerIngressClassResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerIngressClassResourceOutput)
}

func (i ControllerIngressClassResourceArgs) ToControllerIngressClassResourcePtrOutput() ControllerIngressClassResourcePtrOutput {
	return i.ToControllerIngressClassResourcePtrOutputWithContext(context.Background())
}

func (i ControllerIngressClassResourceArgs) ToControllerIngressClassResourcePtrOutputWithContext(ctx context.Context) ControllerIngressClassResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerIngressClassResourceOutput).ToControllerIngressClassResourcePtrOutputWithContext(ctx)
}

// ControllerIngressClassResourcePtrInput is an input type that accepts ControllerIngressClassResourceArgs, ControllerIngressClassResourcePtr and ControllerIngressClassResourcePtrOutput values.
// You can construct a concrete instance of `ControllerIngressClassResourcePtrInput` via:
//
//	        ControllerIngressClassResourceArgs{...}
//
//	or:
//
//	        nil
type ControllerIngressClassResourcePtrInput interface {
	pulumi.Input

	ToControllerIngressClassResourcePtrOutput() ControllerIngressClassResourcePtrOutput
	ToControllerIngressClassResourcePtrOutputWithContext(context.Context) ControllerIngressClassResourcePtrOutput
}

type controllerIngressClassResourcePtrType ControllerIngressClassResourceArgs

func ControllerIngressClassResourcePtr(v *ControllerIngressClassResourceArgs) ControllerIngressClassResourcePtrInput {
	return (*controllerIngressClassResourcePtrType)(v)
}

func (*controllerIngressClassResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerIngressClassResource)(nil)).Elem()
}

func (i *controllerIngressClassResourcePtrType) ToControllerIngressClassResourcePtrOutput() ControllerIngressClassResourcePtrOutput {
	return i.ToControllerIngressClassResourcePtrOutputWithContext(context.Background())
}

func (i *controllerIngressClassResourcePtrType) ToControllerIngressClassResourcePtrOutputWithContext(ctx context.Context) ControllerIngressClassResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerIngressClassResourcePtrOutput)
}

type ControllerIngressClassResourceOutput struct{ *pulumi.OutputState }

func (ControllerIngressClassResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerIngressClassResource)(nil)).Elem()
}

func (o ControllerIngressClassResourceOutput) ToControllerIngressClassResourceOutput() ControllerIngressClassResourceOutput {
	return o
}

func (o ControllerIngressClassResourceOutput) ToControllerIngressClassResourceOutputWithContext(ctx context.Context) ControllerIngressClassResourceOutput {
	return o
}

func (o ControllerIngressClassResourceOutput) ToControllerIngressClassResourcePtrOutput() ControllerIngressClassResourcePtrOutput {
	return o.ToControllerIngressClassResourcePtrOutputWithContext(context.Background())
}

func (o ControllerIngressClassResourceOutput) ToControllerIngressClassResourcePtrOutputWithContext(ctx context.Context) ControllerIngressClassResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerIngressClassResource) *ControllerIngressClassResource {
		return &v
	}).(ControllerIngressClassResourcePtrOutput)
}

func (o ControllerIngressClassResourceOutput) ControllerValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerIngressClassResource) *string { return v.ControllerValue }).(pulumi.StringPtrOutput)
}

func (o ControllerIngressClassResourceOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ControllerIngressClassResource) *bool { return v.Default }).(pulumi.BoolPtrOutput)
}

func (o ControllerIngressClassResourceOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ControllerIngressClassResource) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o ControllerIngressClassResourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerIngressClassResource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters.
func (o ControllerIngressClassResourceOutput) Parameters() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v ControllerIngressClassResource) map[string]map[string]string { return v.Parameters }).(pulumi.StringMapMapOutput)
}

type ControllerIngressClassResourcePtrOutput struct{ *pulumi.OutputState }

func (ControllerIngressClassResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerIngressClassResource)(nil)).Elem()
}

func (o ControllerIngressClassResourcePtrOutput) ToControllerIngressClassResourcePtrOutput() ControllerIngressClassResourcePtrOutput {
	return o
}

func (o ControllerIngressClassResourcePtrOutput) ToControllerIngressClassResourcePtrOutputWithContext(ctx context.Context) ControllerIngressClassResourcePtrOutput {
	return o
}

func (o ControllerIngressClassResourcePtrOutput) Elem() ControllerIngressClassResourceOutput {
	return o.ApplyT(func(v *ControllerIngressClassResource) ControllerIngressClassResource {
		if v != nil {
			return *v
		}
		var ret ControllerIngressClassResource
		return ret
	}).(ControllerIngressClassResourceOutput)
}

func (o ControllerIngressClassResourcePtrOutput) ControllerValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerIngressClassResource) *string {
		if v == nil {
			return nil
		}
		return v.ControllerValue
	}).(pulumi.StringPtrOutput)
}

func (o ControllerIngressClassResourcePtrOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ControllerIngressClassResource) *bool {
		if v == nil {
			return nil
		}
		return v.Default
	}).(pulumi.BoolPtrOutput)
}

func (o ControllerIngressClassResourcePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ControllerIngressClassResource) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o ControllerIngressClassResourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerIngressClassResource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters.
func (o ControllerIngressClassResourcePtrOutput) Parameters() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v *ControllerIngressClassResource) map[string]map[string]string {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.StringMapMapOutput)
}

type ControllerMetrics struct {
	Enabled *bool `pulumi:"enabled"`
	// if this port is changed, change healthz-port: in extraArgs: accordingly.
	Port           *int                              `pulumi:"port"`
	PrometheusRule *ControllerMetricsPrometheusRules `pulumi:"prometheusRule"`
	Service        *ControllerMetricsService         `pulumi:"service"`
	ServiceMonitor *ControllerMetricsServiceMonitor  `pulumi:"serviceMonitor"`
}

// ControllerMetricsInput is an input type that accepts ControllerMetricsArgs and ControllerMetricsOutput values.
// You can construct a concrete instance of `ControllerMetricsInput` via:
//
//	ControllerMetricsArgs{...}
type ControllerMetricsInput interface {
	pulumi.Input

	ToControllerMetricsOutput() ControllerMetricsOutput
	ToControllerMetricsOutputWithContext(context.Context) ControllerMetricsOutput
}

type ControllerMetricsArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// if this port is changed, change healthz-port: in extraArgs: accordingly.
	Port           pulumi.IntPtrInput                       `pulumi:"port"`
	PrometheusRule ControllerMetricsPrometheusRulesPtrInput `pulumi:"prometheusRule"`
	Service        ControllerMetricsServicePtrInput         `pulumi:"service"`
	ServiceMonitor ControllerMetricsServiceMonitorPtrInput  `pulumi:"serviceMonitor"`
}

func (ControllerMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerMetrics)(nil)).Elem()
}

func (i ControllerMetricsArgs) ToControllerMetricsOutput() ControllerMetricsOutput {
	return i.ToControllerMetricsOutputWithContext(context.Background())
}

func (i ControllerMetricsArgs) ToControllerMetricsOutputWithContext(ctx context.Context) ControllerMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerMetricsOutput)
}

func (i ControllerMetricsArgs) ToControllerMetricsPtrOutput() ControllerMetricsPtrOutput {
	return i.ToControllerMetricsPtrOutputWithContext(context.Background())
}

func (i ControllerMetricsArgs) ToControllerMetricsPtrOutputWithContext(ctx context.Context) ControllerMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerMetricsOutput).ToControllerMetricsPtrOutputWithContext(ctx)
}

// ControllerMetricsPtrInput is an input type that accepts ControllerMetricsArgs, ControllerMetricsPtr and ControllerMetricsPtrOutput values.
// You can construct a concrete instance of `ControllerMetricsPtrInput` via:
//
//	        ControllerMetricsArgs{...}
//
//	or:
//
//	        nil
type ControllerMetricsPtrInput interface {
	pulumi.Input

	ToControllerMetricsPtrOutput() ControllerMetricsPtrOutput
	ToControllerMetricsPtrOutputWithContext(context.Context) ControllerMetricsPtrOutput
}

type controllerMetricsPtrType ControllerMetricsArgs

func ControllerMetricsPtr(v *ControllerMetricsArgs) ControllerMetricsPtrInput {
	return (*controllerMetricsPtrType)(v)
}

func (*controllerMetricsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerMetrics)(nil)).Elem()
}

func (i *controllerMetricsPtrType) ToControllerMetricsPtrOutput() ControllerMetricsPtrOutput {
	return i.ToControllerMetricsPtrOutputWithContext(context.Background())
}

func (i *controllerMetricsPtrType) ToControllerMetricsPtrOutputWithContext(ctx context.Context) ControllerMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerMetricsPtrOutput)
}

type ControllerMetricsOutput struct{ *pulumi.OutputState }

func (ControllerMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerMetrics)(nil)).Elem()
}

func (o ControllerMetricsOutput) ToControllerMetricsOutput() ControllerMetricsOutput {
	return o
}

func (o ControllerMetricsOutput) ToControllerMetricsOutputWithContext(ctx context.Context) ControllerMetricsOutput {
	return o
}

func (o ControllerMetricsOutput) ToControllerMetricsPtrOutput() ControllerMetricsPtrOutput {
	return o.ToControllerMetricsPtrOutputWithContext(context.Background())
}

func (o ControllerMetricsOutput) ToControllerMetricsPtrOutputWithContext(ctx context.Context) ControllerMetricsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerMetrics) *ControllerMetrics {
		return &v
	}).(ControllerMetricsPtrOutput)
}

func (o ControllerMetricsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ControllerMetrics) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// if this port is changed, change healthz-port: in extraArgs: accordingly.
func (o ControllerMetricsOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ControllerMetrics) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o ControllerMetricsOutput) PrometheusRule() ControllerMetricsPrometheusRulesPtrOutput {
	return o.ApplyT(func(v ControllerMetrics) *ControllerMetricsPrometheusRules { return v.PrometheusRule }).(ControllerMetricsPrometheusRulesPtrOutput)
}

func (o ControllerMetricsOutput) Service() ControllerMetricsServicePtrOutput {
	return o.ApplyT(func(v ControllerMetrics) *ControllerMetricsService { return v.Service }).(ControllerMetricsServicePtrOutput)
}

func (o ControllerMetricsOutput) ServiceMonitor() ControllerMetricsServiceMonitorPtrOutput {
	return o.ApplyT(func(v ControllerMetrics) *ControllerMetricsServiceMonitor { return v.ServiceMonitor }).(ControllerMetricsServiceMonitorPtrOutput)
}

type ControllerMetricsPtrOutput struct{ *pulumi.OutputState }

func (ControllerMetricsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerMetrics)(nil)).Elem()
}

func (o ControllerMetricsPtrOutput) ToControllerMetricsPtrOutput() ControllerMetricsPtrOutput {
	return o
}

func (o ControllerMetricsPtrOutput) ToControllerMetricsPtrOutputWithContext(ctx context.Context) ControllerMetricsPtrOutput {
	return o
}

func (o ControllerMetricsPtrOutput) Elem() ControllerMetricsOutput {
	return o.ApplyT(func(v *ControllerMetrics) ControllerMetrics {
		if v != nil {
			return *v
		}
		var ret ControllerMetrics
		return ret
	}).(ControllerMetricsOutput)
}

func (o ControllerMetricsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ControllerMetrics) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// if this port is changed, change healthz-port: in extraArgs: accordingly.
func (o ControllerMetricsPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ControllerMetrics) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

func (o ControllerMetricsPtrOutput) PrometheusRule() ControllerMetricsPrometheusRulesPtrOutput {
	return o.ApplyT(func(v *ControllerMetrics) *ControllerMetricsPrometheusRules {
		if v == nil {
			return nil
		}
		return v.PrometheusRule
	}).(ControllerMetricsPrometheusRulesPtrOutput)
}

func (o ControllerMetricsPtrOutput) Service() ControllerMetricsServicePtrOutput {
	return o.ApplyT(func(v *ControllerMetrics) *ControllerMetricsService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(ControllerMetricsServicePtrOutput)
}

func (o ControllerMetricsPtrOutput) ServiceMonitor() ControllerMetricsServiceMonitorPtrOutput {
	return o.ApplyT(func(v *ControllerMetrics) *ControllerMetricsServiceMonitor {
		if v == nil {
			return nil
		}
		return v.ServiceMonitor
	}).(ControllerMetricsServiceMonitorPtrOutput)
}

type ControllerMetricsPrometheusRules struct {
	AdditionalLabels map[string]string   `pulumi:"additionalLabels"`
	Enabled          *bool               `pulumi:"enabled"`
	Namespace        *string             `pulumi:"namespace"`
	Rules            []map[string]string `pulumi:"rules"`
}

// ControllerMetricsPrometheusRulesInput is an input type that accepts ControllerMetricsPrometheusRulesArgs and ControllerMetricsPrometheusRulesOutput values.
// You can construct a concrete instance of `ControllerMetricsPrometheusRulesInput` via:
//
//	ControllerMetricsPrometheusRulesArgs{...}
type ControllerMetricsPrometheusRulesInput interface {
	pulumi.Input

	ToControllerMetricsPrometheusRulesOutput() ControllerMetricsPrometheusRulesOutput
	ToControllerMetricsPrometheusRulesOutputWithContext(context.Context) ControllerMetricsPrometheusRulesOutput
}

type ControllerMetricsPrometheusRulesArgs struct {
	AdditionalLabels pulumi.StringMapInput      `pulumi:"additionalLabels"`
	Enabled          pulumi.BoolPtrInput        `pulumi:"enabled"`
	Namespace        pulumi.StringPtrInput      `pulumi:"namespace"`
	Rules            pulumi.StringMapArrayInput `pulumi:"rules"`
}

func (ControllerMetricsPrometheusRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerMetricsPrometheusRules)(nil)).Elem()
}

func (i ControllerMetricsPrometheusRulesArgs) ToControllerMetricsPrometheusRulesOutput() ControllerMetricsPrometheusRulesOutput {
	return i.ToControllerMetricsPrometheusRulesOutputWithContext(context.Background())
}

func (i ControllerMetricsPrometheusRulesArgs) ToControllerMetricsPrometheusRulesOutputWithContext(ctx context.Context) ControllerMetricsPrometheusRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerMetricsPrometheusRulesOutput)
}

func (i ControllerMetricsPrometheusRulesArgs) ToControllerMetricsPrometheusRulesPtrOutput() ControllerMetricsPrometheusRulesPtrOutput {
	return i.ToControllerMetricsPrometheusRulesPtrOutputWithContext(context.Background())
}

func (i ControllerMetricsPrometheusRulesArgs) ToControllerMetricsPrometheusRulesPtrOutputWithContext(ctx context.Context) ControllerMetricsPrometheusRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerMetricsPrometheusRulesOutput).ToControllerMetricsPrometheusRulesPtrOutputWithContext(ctx)
}

// ControllerMetricsPrometheusRulesPtrInput is an input type that accepts ControllerMetricsPrometheusRulesArgs, ControllerMetricsPrometheusRulesPtr and ControllerMetricsPrometheusRulesPtrOutput values.
// You can construct a concrete instance of `ControllerMetricsPrometheusRulesPtrInput` via:
//
//	        ControllerMetricsPrometheusRulesArgs{...}
//
//	or:
//
//	        nil
type ControllerMetricsPrometheusRulesPtrInput interface {
	pulumi.Input

	ToControllerMetricsPrometheusRulesPtrOutput() ControllerMetricsPrometheusRulesPtrOutput
	ToControllerMetricsPrometheusRulesPtrOutputWithContext(context.Context) ControllerMetricsPrometheusRulesPtrOutput
}

type controllerMetricsPrometheusRulesPtrType ControllerMetricsPrometheusRulesArgs

func ControllerMetricsPrometheusRulesPtr(v *ControllerMetricsPrometheusRulesArgs) ControllerMetricsPrometheusRulesPtrInput {
	return (*controllerMetricsPrometheusRulesPtrType)(v)
}

func (*controllerMetricsPrometheusRulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerMetricsPrometheusRules)(nil)).Elem()
}

func (i *controllerMetricsPrometheusRulesPtrType) ToControllerMetricsPrometheusRulesPtrOutput() ControllerMetricsPrometheusRulesPtrOutput {
	return i.ToControllerMetricsPrometheusRulesPtrOutputWithContext(context.Background())
}

func (i *controllerMetricsPrometheusRulesPtrType) ToControllerMetricsPrometheusRulesPtrOutputWithContext(ctx context.Context) ControllerMetricsPrometheusRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerMetricsPrometheusRulesPtrOutput)
}

type ControllerMetricsPrometheusRulesOutput struct{ *pulumi.OutputState }

func (ControllerMetricsPrometheusRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerMetricsPrometheusRules)(nil)).Elem()
}

func (o ControllerMetricsPrometheusRulesOutput) ToControllerMetricsPrometheusRulesOutput() ControllerMetricsPrometheusRulesOutput {
	return o
}

func (o ControllerMetricsPrometheusRulesOutput) ToControllerMetricsPrometheusRulesOutputWithContext(ctx context.Context) ControllerMetricsPrometheusRulesOutput {
	return o
}

func (o ControllerMetricsPrometheusRulesOutput) ToControllerMetricsPrometheusRulesPtrOutput() ControllerMetricsPrometheusRulesPtrOutput {
	return o.ToControllerMetricsPrometheusRulesPtrOutputWithContext(context.Background())
}

func (o ControllerMetricsPrometheusRulesOutput) ToControllerMetricsPrometheusRulesPtrOutputWithContext(ctx context.Context) ControllerMetricsPrometheusRulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerMetricsPrometheusRules) *ControllerMetricsPrometheusRules {
		return &v
	}).(ControllerMetricsPrometheusRulesPtrOutput)
}

func (o ControllerMetricsPrometheusRulesOutput) AdditionalLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ControllerMetricsPrometheusRules) map[string]string { return v.AdditionalLabels }).(pulumi.StringMapOutput)
}

func (o ControllerMetricsPrometheusRulesOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ControllerMetricsPrometheusRules) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o ControllerMetricsPrometheusRulesOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerMetricsPrometheusRules) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o ControllerMetricsPrometheusRulesOutput) Rules() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v ControllerMetricsPrometheusRules) []map[string]string { return v.Rules }).(pulumi.StringMapArrayOutput)
}

type ControllerMetricsPrometheusRulesPtrOutput struct{ *pulumi.OutputState }

func (ControllerMetricsPrometheusRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerMetricsPrometheusRules)(nil)).Elem()
}

func (o ControllerMetricsPrometheusRulesPtrOutput) ToControllerMetricsPrometheusRulesPtrOutput() ControllerMetricsPrometheusRulesPtrOutput {
	return o
}

func (o ControllerMetricsPrometheusRulesPtrOutput) ToControllerMetricsPrometheusRulesPtrOutputWithContext(ctx context.Context) ControllerMetricsPrometheusRulesPtrOutput {
	return o
}

func (o ControllerMetricsPrometheusRulesPtrOutput) Elem() ControllerMetricsPrometheusRulesOutput {
	return o.ApplyT(func(v *ControllerMetricsPrometheusRules) ControllerMetricsPrometheusRules {
		if v != nil {
			return *v
		}
		var ret ControllerMetricsPrometheusRules
		return ret
	}).(ControllerMetricsPrometheusRulesOutput)
}

func (o ControllerMetricsPrometheusRulesPtrOutput) AdditionalLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ControllerMetricsPrometheusRules) map[string]string {
		if v == nil {
			return nil
		}
		return v.AdditionalLabels
	}).(pulumi.StringMapOutput)
}

func (o ControllerMetricsPrometheusRulesPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ControllerMetricsPrometheusRules) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o ControllerMetricsPrometheusRulesPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerMetricsPrometheusRules) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

func (o ControllerMetricsPrometheusRulesPtrOutput) Rules() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *ControllerMetricsPrometheusRules) []map[string]string {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(pulumi.StringMapArrayOutput)
}

type ControllerMetricsService struct {
	Annotations              map[string]string `pulumi:"annotations"`
	ClusterIP                *string           `pulumi:"clusterIP"`
	ExternalIPs              []string          `pulumi:"externalIPs"`
	ExternalTrafficPolicy    *string           `pulumi:"externalTrafficPolicy"`
	LoadBalancerIPs          *string           `pulumi:"loadBalancerIPs"`
	LoadBalancerSourceRanges []string          `pulumi:"loadBalancerSourceRanges"`
	NodePort                 *string           `pulumi:"nodePort"`
	ServicePort              *int              `pulumi:"servicePort"`
	Type                     *string           `pulumi:"type"`
}

// ControllerMetricsServiceInput is an input type that accepts ControllerMetricsServiceArgs and ControllerMetricsServiceOutput values.
// You can construct a concrete instance of `ControllerMetricsServiceInput` via:
//
//	ControllerMetricsServiceArgs{...}
type ControllerMetricsServiceInput interface {
	pulumi.Input

	ToControllerMetricsServiceOutput() ControllerMetricsServiceOutput
	ToControllerMetricsServiceOutputWithContext(context.Context) ControllerMetricsServiceOutput
}

type ControllerMetricsServiceArgs struct {
	Annotations              pulumi.StringMapInput   `pulumi:"annotations"`
	ClusterIP                pulumi.StringPtrInput   `pulumi:"clusterIP"`
	ExternalIPs              pulumi.StringArrayInput `pulumi:"externalIPs"`
	ExternalTrafficPolicy    pulumi.StringPtrInput   `pulumi:"externalTrafficPolicy"`
	LoadBalancerIPs          pulumi.StringPtrInput   `pulumi:"loadBalancerIPs"`
	LoadBalancerSourceRanges pulumi.StringArrayInput `pulumi:"loadBalancerSourceRanges"`
	NodePort                 pulumi.StringPtrInput   `pulumi:"nodePort"`
	ServicePort              pulumi.IntPtrInput      `pulumi:"servicePort"`
	Type                     pulumi.StringPtrInput   `pulumi:"type"`
}

func (ControllerMetricsServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerMetricsService)(nil)).Elem()
}

func (i ControllerMetricsServiceArgs) ToControllerMetricsServiceOutput() ControllerMetricsServiceOutput {
	return i.ToControllerMetricsServiceOutputWithContext(context.Background())
}

func (i ControllerMetricsServiceArgs) ToControllerMetricsServiceOutputWithContext(ctx context.Context) ControllerMetricsServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerMetricsServiceOutput)
}

func (i ControllerMetricsServiceArgs) ToControllerMetricsServicePtrOutput() ControllerMetricsServicePtrOutput {
	return i.ToControllerMetricsServicePtrOutputWithContext(context.Background())
}

func (i ControllerMetricsServiceArgs) ToControllerMetricsServicePtrOutputWithContext(ctx context.Context) ControllerMetricsServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerMetricsServiceOutput).ToControllerMetricsServicePtrOutputWithContext(ctx)
}

// ControllerMetricsServicePtrInput is an input type that accepts ControllerMetricsServiceArgs, ControllerMetricsServicePtr and ControllerMetricsServicePtrOutput values.
// You can construct a concrete instance of `ControllerMetricsServicePtrInput` via:
//
//	        ControllerMetricsServiceArgs{...}
//
//	or:
//
//	        nil
type ControllerMetricsServicePtrInput interface {
	pulumi.Input

	ToControllerMetricsServicePtrOutput() ControllerMetricsServicePtrOutput
	ToControllerMetricsServicePtrOutputWithContext(context.Context) ControllerMetricsServicePtrOutput
}

type controllerMetricsServicePtrType ControllerMetricsServiceArgs

func ControllerMetricsServicePtr(v *ControllerMetricsServiceArgs) ControllerMetricsServicePtrInput {
	return (*controllerMetricsServicePtrType)(v)
}

func (*controllerMetricsServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerMetricsService)(nil)).Elem()
}

func (i *controllerMetricsServicePtrType) ToControllerMetricsServicePtrOutput() ControllerMetricsServicePtrOutput {
	return i.ToControllerMetricsServicePtrOutputWithContext(context.Background())
}

func (i *controllerMetricsServicePtrType) ToControllerMetricsServicePtrOutputWithContext(ctx context.Context) ControllerMetricsServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerMetricsServicePtrOutput)
}

type ControllerMetricsServiceOutput struct{ *pulumi.OutputState }

func (ControllerMetricsServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerMetricsService)(nil)).Elem()
}

func (o ControllerMetricsServiceOutput) ToControllerMetricsServiceOutput() ControllerMetricsServiceOutput {
	return o
}

func (o ControllerMetricsServiceOutput) ToControllerMetricsServiceOutputWithContext(ctx context.Context) ControllerMetricsServiceOutput {
	return o
}

func (o ControllerMetricsServiceOutput) ToControllerMetricsServicePtrOutput() ControllerMetricsServicePtrOutput {
	return o.ToControllerMetricsServicePtrOutputWithContext(context.Background())
}

func (o ControllerMetricsServiceOutput) ToControllerMetricsServicePtrOutputWithContext(ctx context.Context) ControllerMetricsServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerMetricsService) *ControllerMetricsService {
		return &v
	}).(ControllerMetricsServicePtrOutput)
}

func (o ControllerMetricsServiceOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ControllerMetricsService) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o ControllerMetricsServiceOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerMetricsService) *string { return v.ClusterIP }).(pulumi.StringPtrOutput)
}

func (o ControllerMetricsServiceOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ControllerMetricsService) []string { return v.ExternalIPs }).(pulumi.StringArrayOutput)
}

func (o ControllerMetricsServiceOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerMetricsService) *string { return v.ExternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

func (o ControllerMetricsServiceOutput) LoadBalancerIPs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerMetricsService) *string { return v.LoadBalancerIPs }).(pulumi.StringPtrOutput)
}

func (o ControllerMetricsServiceOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ControllerMetricsService) []string { return v.LoadBalancerSourceRanges }).(pulumi.StringArrayOutput)
}

func (o ControllerMetricsServiceOutput) NodePort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerMetricsService) *string { return v.NodePort }).(pulumi.StringPtrOutput)
}

func (o ControllerMetricsServiceOutput) ServicePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ControllerMetricsService) *int { return v.ServicePort }).(pulumi.IntPtrOutput)
}

func (o ControllerMetricsServiceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerMetricsService) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ControllerMetricsServicePtrOutput struct{ *pulumi.OutputState }

func (ControllerMetricsServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerMetricsService)(nil)).Elem()
}

func (o ControllerMetricsServicePtrOutput) ToControllerMetricsServicePtrOutput() ControllerMetricsServicePtrOutput {
	return o
}

func (o ControllerMetricsServicePtrOutput) ToControllerMetricsServicePtrOutputWithContext(ctx context.Context) ControllerMetricsServicePtrOutput {
	return o
}

func (o ControllerMetricsServicePtrOutput) Elem() ControllerMetricsServiceOutput {
	return o.ApplyT(func(v *ControllerMetricsService) ControllerMetricsService {
		if v != nil {
			return *v
		}
		var ret ControllerMetricsService
		return ret
	}).(ControllerMetricsServiceOutput)
}

func (o ControllerMetricsServicePtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ControllerMetricsService) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o ControllerMetricsServicePtrOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerMetricsService) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIP
	}).(pulumi.StringPtrOutput)
}

func (o ControllerMetricsServicePtrOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ControllerMetricsService) []string {
		if v == nil {
			return nil
		}
		return v.ExternalIPs
	}).(pulumi.StringArrayOutput)
}

func (o ControllerMetricsServicePtrOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerMetricsService) *string {
		if v == nil {
			return nil
		}
		return v.ExternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

func (o ControllerMetricsServicePtrOutput) LoadBalancerIPs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerMetricsService) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIPs
	}).(pulumi.StringPtrOutput)
}

func (o ControllerMetricsServicePtrOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ControllerMetricsService) []string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSourceRanges
	}).(pulumi.StringArrayOutput)
}

func (o ControllerMetricsServicePtrOutput) NodePort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerMetricsService) *string {
		if v == nil {
			return nil
		}
		return v.NodePort
	}).(pulumi.StringPtrOutput)
}

func (o ControllerMetricsServicePtrOutput) ServicePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ControllerMetricsService) *int {
		if v == nil {
			return nil
		}
		return v.ServicePort
	}).(pulumi.IntPtrOutput)
}

func (o ControllerMetricsServicePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerMetricsService) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type ControllerMetricsServiceMonitor struct {
	AdditionalLabels map[string]string `pulumi:"additionalLabels"`
	Enabled          *bool             `pulumi:"enabled"`
	HonorLabels      *bool             `pulumi:"honorLabels"`
	// The label to use to retrieve the job name from.
	JobLabel          *string                      `pulumi:"jobLabel"`
	MetricRelabelings []string                     `pulumi:"metricRelabelings"`
	Namespace         *string                      `pulumi:"namespace"`
	NamespaceSelector map[string]map[string]string `pulumi:"namespaceSelector"`
	ScrapeInterval    *string                      `pulumi:"scrapeInterval"`
	TargetLabels      []string                     `pulumi:"targetLabels"`
}

// ControllerMetricsServiceMonitorInput is an input type that accepts ControllerMetricsServiceMonitorArgs and ControllerMetricsServiceMonitorOutput values.
// You can construct a concrete instance of `ControllerMetricsServiceMonitorInput` via:
//
//	ControllerMetricsServiceMonitorArgs{...}
type ControllerMetricsServiceMonitorInput interface {
	pulumi.Input

	ToControllerMetricsServiceMonitorOutput() ControllerMetricsServiceMonitorOutput
	ToControllerMetricsServiceMonitorOutputWithContext(context.Context) ControllerMetricsServiceMonitorOutput
}

type ControllerMetricsServiceMonitorArgs struct {
	AdditionalLabels pulumi.StringMapInput `pulumi:"additionalLabels"`
	Enabled          pulumi.BoolPtrInput   `pulumi:"enabled"`
	HonorLabels      pulumi.BoolPtrInput   `pulumi:"honorLabels"`
	// The label to use to retrieve the job name from.
	JobLabel          pulumi.StringPtrInput    `pulumi:"jobLabel"`
	MetricRelabelings pulumi.StringArrayInput  `pulumi:"metricRelabelings"`
	Namespace         pulumi.StringPtrInput    `pulumi:"namespace"`
	NamespaceSelector pulumi.StringMapMapInput `pulumi:"namespaceSelector"`
	ScrapeInterval    pulumi.StringPtrInput    `pulumi:"scrapeInterval"`
	TargetLabels      pulumi.StringArrayInput  `pulumi:"targetLabels"`
}

func (ControllerMetricsServiceMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerMetricsServiceMonitor)(nil)).Elem()
}

func (i ControllerMetricsServiceMonitorArgs) ToControllerMetricsServiceMonitorOutput() ControllerMetricsServiceMonitorOutput {
	return i.ToControllerMetricsServiceMonitorOutputWithContext(context.Background())
}

func (i ControllerMetricsServiceMonitorArgs) ToControllerMetricsServiceMonitorOutputWithContext(ctx context.Context) ControllerMetricsServiceMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerMetricsServiceMonitorOutput)
}

func (i ControllerMetricsServiceMonitorArgs) ToControllerMetricsServiceMonitorPtrOutput() ControllerMetricsServiceMonitorPtrOutput {
	return i.ToControllerMetricsServiceMonitorPtrOutputWithContext(context.Background())
}

func (i ControllerMetricsServiceMonitorArgs) ToControllerMetricsServiceMonitorPtrOutputWithContext(ctx context.Context) ControllerMetricsServiceMonitorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerMetricsServiceMonitorOutput).ToControllerMetricsServiceMonitorPtrOutputWithContext(ctx)
}

// ControllerMetricsServiceMonitorPtrInput is an input type that accepts ControllerMetricsServiceMonitorArgs, ControllerMetricsServiceMonitorPtr and ControllerMetricsServiceMonitorPtrOutput values.
// You can construct a concrete instance of `ControllerMetricsServiceMonitorPtrInput` via:
//
//	        ControllerMetricsServiceMonitorArgs{...}
//
//	or:
//
//	        nil
type ControllerMetricsServiceMonitorPtrInput interface {
	pulumi.Input

	ToControllerMetricsServiceMonitorPtrOutput() ControllerMetricsServiceMonitorPtrOutput
	ToControllerMetricsServiceMonitorPtrOutputWithContext(context.Context) ControllerMetricsServiceMonitorPtrOutput
}

type controllerMetricsServiceMonitorPtrType ControllerMetricsServiceMonitorArgs

func ControllerMetricsServiceMonitorPtr(v *ControllerMetricsServiceMonitorArgs) ControllerMetricsServiceMonitorPtrInput {
	return (*controllerMetricsServiceMonitorPtrType)(v)
}

func (*controllerMetricsServiceMonitorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerMetricsServiceMonitor)(nil)).Elem()
}

func (i *controllerMetricsServiceMonitorPtrType) ToControllerMetricsServiceMonitorPtrOutput() ControllerMetricsServiceMonitorPtrOutput {
	return i.ToControllerMetricsServiceMonitorPtrOutputWithContext(context.Background())
}

func (i *controllerMetricsServiceMonitorPtrType) ToControllerMetricsServiceMonitorPtrOutputWithContext(ctx context.Context) ControllerMetricsServiceMonitorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerMetricsServiceMonitorPtrOutput)
}

type ControllerMetricsServiceMonitorOutput struct{ *pulumi.OutputState }

func (ControllerMetricsServiceMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerMetricsServiceMonitor)(nil)).Elem()
}

func (o ControllerMetricsServiceMonitorOutput) ToControllerMetricsServiceMonitorOutput() ControllerMetricsServiceMonitorOutput {
	return o
}

func (o ControllerMetricsServiceMonitorOutput) ToControllerMetricsServiceMonitorOutputWithContext(ctx context.Context) ControllerMetricsServiceMonitorOutput {
	return o
}

func (o ControllerMetricsServiceMonitorOutput) ToControllerMetricsServiceMonitorPtrOutput() ControllerMetricsServiceMonitorPtrOutput {
	return o.ToControllerMetricsServiceMonitorPtrOutputWithContext(context.Background())
}

func (o ControllerMetricsServiceMonitorOutput) ToControllerMetricsServiceMonitorPtrOutputWithContext(ctx context.Context) ControllerMetricsServiceMonitorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerMetricsServiceMonitor) *ControllerMetricsServiceMonitor {
		return &v
	}).(ControllerMetricsServiceMonitorPtrOutput)
}

func (o ControllerMetricsServiceMonitorOutput) AdditionalLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ControllerMetricsServiceMonitor) map[string]string { return v.AdditionalLabels }).(pulumi.StringMapOutput)
}

func (o ControllerMetricsServiceMonitorOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ControllerMetricsServiceMonitor) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o ControllerMetricsServiceMonitorOutput) HonorLabels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ControllerMetricsServiceMonitor) *bool { return v.HonorLabels }).(pulumi.BoolPtrOutput)
}

// The label to use to retrieve the job name from.
func (o ControllerMetricsServiceMonitorOutput) JobLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerMetricsServiceMonitor) *string { return v.JobLabel }).(pulumi.StringPtrOutput)
}

func (o ControllerMetricsServiceMonitorOutput) MetricRelabelings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ControllerMetricsServiceMonitor) []string { return v.MetricRelabelings }).(pulumi.StringArrayOutput)
}

func (o ControllerMetricsServiceMonitorOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerMetricsServiceMonitor) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o ControllerMetricsServiceMonitorOutput) NamespaceSelector() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v ControllerMetricsServiceMonitor) map[string]map[string]string { return v.NamespaceSelector }).(pulumi.StringMapMapOutput)
}

func (o ControllerMetricsServiceMonitorOutput) ScrapeInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerMetricsServiceMonitor) *string { return v.ScrapeInterval }).(pulumi.StringPtrOutput)
}

func (o ControllerMetricsServiceMonitorOutput) TargetLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ControllerMetricsServiceMonitor) []string { return v.TargetLabels }).(pulumi.StringArrayOutput)
}

type ControllerMetricsServiceMonitorPtrOutput struct{ *pulumi.OutputState }

func (ControllerMetricsServiceMonitorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerMetricsServiceMonitor)(nil)).Elem()
}

func (o ControllerMetricsServiceMonitorPtrOutput) ToControllerMetricsServiceMonitorPtrOutput() ControllerMetricsServiceMonitorPtrOutput {
	return o
}

func (o ControllerMetricsServiceMonitorPtrOutput) ToControllerMetricsServiceMonitorPtrOutputWithContext(ctx context.Context) ControllerMetricsServiceMonitorPtrOutput {
	return o
}

func (o ControllerMetricsServiceMonitorPtrOutput) Elem() ControllerMetricsServiceMonitorOutput {
	return o.ApplyT(func(v *ControllerMetricsServiceMonitor) ControllerMetricsServiceMonitor {
		if v != nil {
			return *v
		}
		var ret ControllerMetricsServiceMonitor
		return ret
	}).(ControllerMetricsServiceMonitorOutput)
}

func (o ControllerMetricsServiceMonitorPtrOutput) AdditionalLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ControllerMetricsServiceMonitor) map[string]string {
		if v == nil {
			return nil
		}
		return v.AdditionalLabels
	}).(pulumi.StringMapOutput)
}

func (o ControllerMetricsServiceMonitorPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ControllerMetricsServiceMonitor) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o ControllerMetricsServiceMonitorPtrOutput) HonorLabels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ControllerMetricsServiceMonitor) *bool {
		if v == nil {
			return nil
		}
		return v.HonorLabels
	}).(pulumi.BoolPtrOutput)
}

// The label to use to retrieve the job name from.
func (o ControllerMetricsServiceMonitorPtrOutput) JobLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerMetricsServiceMonitor) *string {
		if v == nil {
			return nil
		}
		return v.JobLabel
	}).(pulumi.StringPtrOutput)
}

func (o ControllerMetricsServiceMonitorPtrOutput) MetricRelabelings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ControllerMetricsServiceMonitor) []string {
		if v == nil {
			return nil
		}
		return v.MetricRelabelings
	}).(pulumi.StringArrayOutput)
}

func (o ControllerMetricsServiceMonitorPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerMetricsServiceMonitor) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

func (o ControllerMetricsServiceMonitorPtrOutput) NamespaceSelector() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v *ControllerMetricsServiceMonitor) map[string]map[string]string {
		if v == nil {
			return nil
		}
		return v.NamespaceSelector
	}).(pulumi.StringMapMapOutput)
}

func (o ControllerMetricsServiceMonitorPtrOutput) ScrapeInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerMetricsServiceMonitor) *string {
		if v == nil {
			return nil
		}
		return v.ScrapeInterval
	}).(pulumi.StringPtrOutput)
}

func (o ControllerMetricsServiceMonitorPtrOutput) TargetLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ControllerMetricsServiceMonitor) []string {
		if v == nil {
			return nil
		}
		return v.TargetLabels
	}).(pulumi.StringArrayOutput)
}

type ControllerPodSecurityPolicy struct {
	Enabled *bool `pulumi:"enabled"`
}

// ControllerPodSecurityPolicyInput is an input type that accepts ControllerPodSecurityPolicyArgs and ControllerPodSecurityPolicyOutput values.
// You can construct a concrete instance of `ControllerPodSecurityPolicyInput` via:
//
//	ControllerPodSecurityPolicyArgs{...}
type ControllerPodSecurityPolicyInput interface {
	pulumi.Input

	ToControllerPodSecurityPolicyOutput() ControllerPodSecurityPolicyOutput
	ToControllerPodSecurityPolicyOutputWithContext(context.Context) ControllerPodSecurityPolicyOutput
}

type ControllerPodSecurityPolicyArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ControllerPodSecurityPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerPodSecurityPolicy)(nil)).Elem()
}

func (i ControllerPodSecurityPolicyArgs) ToControllerPodSecurityPolicyOutput() ControllerPodSecurityPolicyOutput {
	return i.ToControllerPodSecurityPolicyOutputWithContext(context.Background())
}

func (i ControllerPodSecurityPolicyArgs) ToControllerPodSecurityPolicyOutputWithContext(ctx context.Context) ControllerPodSecurityPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerPodSecurityPolicyOutput)
}

func (i ControllerPodSecurityPolicyArgs) ToControllerPodSecurityPolicyPtrOutput() ControllerPodSecurityPolicyPtrOutput {
	return i.ToControllerPodSecurityPolicyPtrOutputWithContext(context.Background())
}

func (i ControllerPodSecurityPolicyArgs) ToControllerPodSecurityPolicyPtrOutputWithContext(ctx context.Context) ControllerPodSecurityPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerPodSecurityPolicyOutput).ToControllerPodSecurityPolicyPtrOutputWithContext(ctx)
}

// ControllerPodSecurityPolicyPtrInput is an input type that accepts ControllerPodSecurityPolicyArgs, ControllerPodSecurityPolicyPtr and ControllerPodSecurityPolicyPtrOutput values.
// You can construct a concrete instance of `ControllerPodSecurityPolicyPtrInput` via:
//
//	        ControllerPodSecurityPolicyArgs{...}
//
//	or:
//
//	        nil
type ControllerPodSecurityPolicyPtrInput interface {
	pulumi.Input

	ToControllerPodSecurityPolicyPtrOutput() ControllerPodSecurityPolicyPtrOutput
	ToControllerPodSecurityPolicyPtrOutputWithContext(context.Context) ControllerPodSecurityPolicyPtrOutput
}

type controllerPodSecurityPolicyPtrType ControllerPodSecurityPolicyArgs

func ControllerPodSecurityPolicyPtr(v *ControllerPodSecurityPolicyArgs) ControllerPodSecurityPolicyPtrInput {
	return (*controllerPodSecurityPolicyPtrType)(v)
}

func (*controllerPodSecurityPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerPodSecurityPolicy)(nil)).Elem()
}

func (i *controllerPodSecurityPolicyPtrType) ToControllerPodSecurityPolicyPtrOutput() ControllerPodSecurityPolicyPtrOutput {
	return i.ToControllerPodSecurityPolicyPtrOutputWithContext(context.Background())
}

func (i *controllerPodSecurityPolicyPtrType) ToControllerPodSecurityPolicyPtrOutputWithContext(ctx context.Context) ControllerPodSecurityPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerPodSecurityPolicyPtrOutput)
}

type ControllerPodSecurityPolicyOutput struct{ *pulumi.OutputState }

func (ControllerPodSecurityPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerPodSecurityPolicy)(nil)).Elem()
}

func (o ControllerPodSecurityPolicyOutput) ToControllerPodSecurityPolicyOutput() ControllerPodSecurityPolicyOutput {
	return o
}

func (o ControllerPodSecurityPolicyOutput) ToControllerPodSecurityPolicyOutputWithContext(ctx context.Context) ControllerPodSecurityPolicyOutput {
	return o
}

func (o ControllerPodSecurityPolicyOutput) ToControllerPodSecurityPolicyPtrOutput() ControllerPodSecurityPolicyPtrOutput {
	return o.ToControllerPodSecurityPolicyPtrOutputWithContext(context.Background())
}

func (o ControllerPodSecurityPolicyOutput) ToControllerPodSecurityPolicyPtrOutputWithContext(ctx context.Context) ControllerPodSecurityPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerPodSecurityPolicy) *ControllerPodSecurityPolicy {
		return &v
	}).(ControllerPodSecurityPolicyPtrOutput)
}

func (o ControllerPodSecurityPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ControllerPodSecurityPolicy) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ControllerPodSecurityPolicyPtrOutput struct{ *pulumi.OutputState }

func (ControllerPodSecurityPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerPodSecurityPolicy)(nil)).Elem()
}

func (o ControllerPodSecurityPolicyPtrOutput) ToControllerPodSecurityPolicyPtrOutput() ControllerPodSecurityPolicyPtrOutput {
	return o
}

func (o ControllerPodSecurityPolicyPtrOutput) ToControllerPodSecurityPolicyPtrOutputWithContext(ctx context.Context) ControllerPodSecurityPolicyPtrOutput {
	return o
}

func (o ControllerPodSecurityPolicyPtrOutput) Elem() ControllerPodSecurityPolicyOutput {
	return o.ApplyT(func(v *ControllerPodSecurityPolicy) ControllerPodSecurityPolicy {
		if v != nil {
			return *v
		}
		var ret ControllerPodSecurityPolicy
		return ret
	}).(ControllerPodSecurityPolicyOutput)
}

func (o ControllerPodSecurityPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ControllerPodSecurityPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type ControllerPort struct {
	Http  *int `pulumi:"http"`
	Https *int `pulumi:"https"`
}

// ControllerPortInput is an input type that accepts ControllerPortArgs and ControllerPortOutput values.
// You can construct a concrete instance of `ControllerPortInput` via:
//
//	ControllerPortArgs{...}
type ControllerPortInput interface {
	pulumi.Input

	ToControllerPortOutput() ControllerPortOutput
	ToControllerPortOutputWithContext(context.Context) ControllerPortOutput
}

type ControllerPortArgs struct {
	Http  pulumi.IntPtrInput `pulumi:"http"`
	Https pulumi.IntPtrInput `pulumi:"https"`
}

func (ControllerPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerPort)(nil)).Elem()
}

func (i ControllerPortArgs) ToControllerPortOutput() ControllerPortOutput {
	return i.ToControllerPortOutputWithContext(context.Background())
}

func (i ControllerPortArgs) ToControllerPortOutputWithContext(ctx context.Context) ControllerPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerPortOutput)
}

func (i ControllerPortArgs) ToControllerPortPtrOutput() ControllerPortPtrOutput {
	return i.ToControllerPortPtrOutputWithContext(context.Background())
}

func (i ControllerPortArgs) ToControllerPortPtrOutputWithContext(ctx context.Context) ControllerPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerPortOutput).ToControllerPortPtrOutputWithContext(ctx)
}

// ControllerPortPtrInput is an input type that accepts ControllerPortArgs, ControllerPortPtr and ControllerPortPtrOutput values.
// You can construct a concrete instance of `ControllerPortPtrInput` via:
//
//	        ControllerPortArgs{...}
//
//	or:
//
//	        nil
type ControllerPortPtrInput interface {
	pulumi.Input

	ToControllerPortPtrOutput() ControllerPortPtrOutput
	ToControllerPortPtrOutputWithContext(context.Context) ControllerPortPtrOutput
}

type controllerPortPtrType ControllerPortArgs

func ControllerPortPtr(v *ControllerPortArgs) ControllerPortPtrInput {
	return (*controllerPortPtrType)(v)
}

func (*controllerPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerPort)(nil)).Elem()
}

func (i *controllerPortPtrType) ToControllerPortPtrOutput() ControllerPortPtrOutput {
	return i.ToControllerPortPtrOutputWithContext(context.Background())
}

func (i *controllerPortPtrType) ToControllerPortPtrOutputWithContext(ctx context.Context) ControllerPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerPortPtrOutput)
}

type ControllerPortOutput struct{ *pulumi.OutputState }

func (ControllerPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerPort)(nil)).Elem()
}

func (o ControllerPortOutput) ToControllerPortOutput() ControllerPortOutput {
	return o
}

func (o ControllerPortOutput) ToControllerPortOutputWithContext(ctx context.Context) ControllerPortOutput {
	return o
}

func (o ControllerPortOutput) ToControllerPortPtrOutput() ControllerPortPtrOutput {
	return o.ToControllerPortPtrOutputWithContext(context.Background())
}

func (o ControllerPortOutput) ToControllerPortPtrOutputWithContext(ctx context.Context) ControllerPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerPort) *ControllerPort {
		return &v
	}).(ControllerPortPtrOutput)
}

func (o ControllerPortOutput) Http() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ControllerPort) *int { return v.Http }).(pulumi.IntPtrOutput)
}

func (o ControllerPortOutput) Https() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ControllerPort) *int { return v.Https }).(pulumi.IntPtrOutput)
}

type ControllerPortPtrOutput struct{ *pulumi.OutputState }

func (ControllerPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerPort)(nil)).Elem()
}

func (o ControllerPortPtrOutput) ToControllerPortPtrOutput() ControllerPortPtrOutput {
	return o
}

func (o ControllerPortPtrOutput) ToControllerPortPtrOutputWithContext(ctx context.Context) ControllerPortPtrOutput {
	return o
}

func (o ControllerPortPtrOutput) Elem() ControllerPortOutput {
	return o.ApplyT(func(v *ControllerPort) ControllerPort {
		if v != nil {
			return *v
		}
		var ret ControllerPort
		return ret
	}).(ControllerPortOutput)
}

func (o ControllerPortPtrOutput) Http() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ControllerPort) *int {
		if v == nil {
			return nil
		}
		return v.Http
	}).(pulumi.IntPtrOutput)
}

func (o ControllerPortPtrOutput) Https() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ControllerPort) *int {
		if v == nil {
			return nil
		}
		return v.Https
	}).(pulumi.IntPtrOutput)
}

type ControllerPublishService struct {
	Enabled *bool `pulumi:"enabled"`
	// Allows overriding of the publish service to bind to. Must be <namespace>/<service_name>.
	PathOverride *string `pulumi:"pathOverride"`
}

// ControllerPublishServiceInput is an input type that accepts ControllerPublishServiceArgs and ControllerPublishServiceOutput values.
// You can construct a concrete instance of `ControllerPublishServiceInput` via:
//
//	ControllerPublishServiceArgs{...}
type ControllerPublishServiceInput interface {
	pulumi.Input

	ToControllerPublishServiceOutput() ControllerPublishServiceOutput
	ToControllerPublishServiceOutputWithContext(context.Context) ControllerPublishServiceOutput
}

type ControllerPublishServiceArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Allows overriding of the publish service to bind to. Must be <namespace>/<service_name>.
	PathOverride pulumi.StringPtrInput `pulumi:"pathOverride"`
}

func (ControllerPublishServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerPublishService)(nil)).Elem()
}

func (i ControllerPublishServiceArgs) ToControllerPublishServiceOutput() ControllerPublishServiceOutput {
	return i.ToControllerPublishServiceOutputWithContext(context.Background())
}

func (i ControllerPublishServiceArgs) ToControllerPublishServiceOutputWithContext(ctx context.Context) ControllerPublishServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerPublishServiceOutput)
}

func (i ControllerPublishServiceArgs) ToControllerPublishServicePtrOutput() ControllerPublishServicePtrOutput {
	return i.ToControllerPublishServicePtrOutputWithContext(context.Background())
}

func (i ControllerPublishServiceArgs) ToControllerPublishServicePtrOutputWithContext(ctx context.Context) ControllerPublishServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerPublishServiceOutput).ToControllerPublishServicePtrOutputWithContext(ctx)
}

// ControllerPublishServicePtrInput is an input type that accepts ControllerPublishServiceArgs, ControllerPublishServicePtr and ControllerPublishServicePtrOutput values.
// You can construct a concrete instance of `ControllerPublishServicePtrInput` via:
//
//	        ControllerPublishServiceArgs{...}
//
//	or:
//
//	        nil
type ControllerPublishServicePtrInput interface {
	pulumi.Input

	ToControllerPublishServicePtrOutput() ControllerPublishServicePtrOutput
	ToControllerPublishServicePtrOutputWithContext(context.Context) ControllerPublishServicePtrOutput
}

type controllerPublishServicePtrType ControllerPublishServiceArgs

func ControllerPublishServicePtr(v *ControllerPublishServiceArgs) ControllerPublishServicePtrInput {
	return (*controllerPublishServicePtrType)(v)
}

func (*controllerPublishServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerPublishService)(nil)).Elem()
}

func (i *controllerPublishServicePtrType) ToControllerPublishServicePtrOutput() ControllerPublishServicePtrOutput {
	return i.ToControllerPublishServicePtrOutputWithContext(context.Background())
}

func (i *controllerPublishServicePtrType) ToControllerPublishServicePtrOutputWithContext(ctx context.Context) ControllerPublishServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerPublishServicePtrOutput)
}

type ControllerPublishServiceOutput struct{ *pulumi.OutputState }

func (ControllerPublishServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerPublishService)(nil)).Elem()
}

func (o ControllerPublishServiceOutput) ToControllerPublishServiceOutput() ControllerPublishServiceOutput {
	return o
}

func (o ControllerPublishServiceOutput) ToControllerPublishServiceOutputWithContext(ctx context.Context) ControllerPublishServiceOutput {
	return o
}

func (o ControllerPublishServiceOutput) ToControllerPublishServicePtrOutput() ControllerPublishServicePtrOutput {
	return o.ToControllerPublishServicePtrOutputWithContext(context.Background())
}

func (o ControllerPublishServiceOutput) ToControllerPublishServicePtrOutputWithContext(ctx context.Context) ControllerPublishServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerPublishService) *ControllerPublishService {
		return &v
	}).(ControllerPublishServicePtrOutput)
}

func (o ControllerPublishServiceOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ControllerPublishService) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Allows overriding of the publish service to bind to. Must be <namespace>/<service_name>.
func (o ControllerPublishServiceOutput) PathOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerPublishService) *string { return v.PathOverride }).(pulumi.StringPtrOutput)
}

type ControllerPublishServicePtrOutput struct{ *pulumi.OutputState }

func (ControllerPublishServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerPublishService)(nil)).Elem()
}

func (o ControllerPublishServicePtrOutput) ToControllerPublishServicePtrOutput() ControllerPublishServicePtrOutput {
	return o
}

func (o ControllerPublishServicePtrOutput) ToControllerPublishServicePtrOutputWithContext(ctx context.Context) ControllerPublishServicePtrOutput {
	return o
}

func (o ControllerPublishServicePtrOutput) Elem() ControllerPublishServiceOutput {
	return o.ApplyT(func(v *ControllerPublishService) ControllerPublishService {
		if v != nil {
			return *v
		}
		var ret ControllerPublishService
		return ret
	}).(ControllerPublishServiceOutput)
}

func (o ControllerPublishServicePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ControllerPublishService) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Allows overriding of the publish service to bind to. Must be <namespace>/<service_name>.
func (o ControllerPublishServicePtrOutput) PathOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerPublishService) *string {
		if v == nil {
			return nil
		}
		return v.PathOverride
	}).(pulumi.StringPtrOutput)
}

type ControllerRBAC struct {
	Create *bool `pulumi:"create"`
	Scope  *bool `pulumi:"scope"`
}

// ControllerRBACInput is an input type that accepts ControllerRBACArgs and ControllerRBACOutput values.
// You can construct a concrete instance of `ControllerRBACInput` via:
//
//	ControllerRBACArgs{...}
type ControllerRBACInput interface {
	pulumi.Input

	ToControllerRBACOutput() ControllerRBACOutput
	ToControllerRBACOutputWithContext(context.Context) ControllerRBACOutput
}

type ControllerRBACArgs struct {
	Create pulumi.BoolPtrInput `pulumi:"create"`
	Scope  pulumi.BoolPtrInput `pulumi:"scope"`
}

func (ControllerRBACArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerRBAC)(nil)).Elem()
}

func (i ControllerRBACArgs) ToControllerRBACOutput() ControllerRBACOutput {
	return i.ToControllerRBACOutputWithContext(context.Background())
}

func (i ControllerRBACArgs) ToControllerRBACOutputWithContext(ctx context.Context) ControllerRBACOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerRBACOutput)
}

func (i ControllerRBACArgs) ToControllerRBACPtrOutput() ControllerRBACPtrOutput {
	return i.ToControllerRBACPtrOutputWithContext(context.Background())
}

func (i ControllerRBACArgs) ToControllerRBACPtrOutputWithContext(ctx context.Context) ControllerRBACPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerRBACOutput).ToControllerRBACPtrOutputWithContext(ctx)
}

// ControllerRBACPtrInput is an input type that accepts ControllerRBACArgs, ControllerRBACPtr and ControllerRBACPtrOutput values.
// You can construct a concrete instance of `ControllerRBACPtrInput` via:
//
//	        ControllerRBACArgs{...}
//
//	or:
//
//	        nil
type ControllerRBACPtrInput interface {
	pulumi.Input

	ToControllerRBACPtrOutput() ControllerRBACPtrOutput
	ToControllerRBACPtrOutputWithContext(context.Context) ControllerRBACPtrOutput
}

type controllerRBACPtrType ControllerRBACArgs

func ControllerRBACPtr(v *ControllerRBACArgs) ControllerRBACPtrInput {
	return (*controllerRBACPtrType)(v)
}

func (*controllerRBACPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerRBAC)(nil)).Elem()
}

func (i *controllerRBACPtrType) ToControllerRBACPtrOutput() ControllerRBACPtrOutput {
	return i.ToControllerRBACPtrOutputWithContext(context.Background())
}

func (i *controllerRBACPtrType) ToControllerRBACPtrOutputWithContext(ctx context.Context) ControllerRBACPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerRBACPtrOutput)
}

type ControllerRBACOutput struct{ *pulumi.OutputState }

func (ControllerRBACOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerRBAC)(nil)).Elem()
}

func (o ControllerRBACOutput) ToControllerRBACOutput() ControllerRBACOutput {
	return o
}

func (o ControllerRBACOutput) ToControllerRBACOutputWithContext(ctx context.Context) ControllerRBACOutput {
	return o
}

func (o ControllerRBACOutput) ToControllerRBACPtrOutput() ControllerRBACPtrOutput {
	return o.ToControllerRBACPtrOutputWithContext(context.Background())
}

func (o ControllerRBACOutput) ToControllerRBACPtrOutputWithContext(ctx context.Context) ControllerRBACPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerRBAC) *ControllerRBAC {
		return &v
	}).(ControllerRBACPtrOutput)
}

func (o ControllerRBACOutput) Create() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ControllerRBAC) *bool { return v.Create }).(pulumi.BoolPtrOutput)
}

func (o ControllerRBACOutput) Scope() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ControllerRBAC) *bool { return v.Scope }).(pulumi.BoolPtrOutput)
}

type ControllerRBACPtrOutput struct{ *pulumi.OutputState }

func (ControllerRBACPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerRBAC)(nil)).Elem()
}

func (o ControllerRBACPtrOutput) ToControllerRBACPtrOutput() ControllerRBACPtrOutput {
	return o
}

func (o ControllerRBACPtrOutput) ToControllerRBACPtrOutputWithContext(ctx context.Context) ControllerRBACPtrOutput {
	return o
}

func (o ControllerRBACPtrOutput) Elem() ControllerRBACOutput {
	return o.ApplyT(func(v *ControllerRBAC) ControllerRBAC {
		if v != nil {
			return *v
		}
		var ret ControllerRBAC
		return ret
	}).(ControllerRBACOutput)
}

func (o ControllerRBACPtrOutput) Create() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ControllerRBAC) *bool {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.BoolPtrOutput)
}

func (o ControllerRBACPtrOutput) Scope() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ControllerRBAC) *bool {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.BoolPtrOutput)
}

type ControllerRollingUpdate struct {
	MaxUnavailable *int `pulumi:"maxUnavailable"`
}

// ControllerRollingUpdateInput is an input type that accepts ControllerRollingUpdateArgs and ControllerRollingUpdateOutput values.
// You can construct a concrete instance of `ControllerRollingUpdateInput` via:
//
//	ControllerRollingUpdateArgs{...}
type ControllerRollingUpdateInput interface {
	pulumi.Input

	ToControllerRollingUpdateOutput() ControllerRollingUpdateOutput
	ToControllerRollingUpdateOutputWithContext(context.Context) ControllerRollingUpdateOutput
}

type ControllerRollingUpdateArgs struct {
	MaxUnavailable pulumi.IntPtrInput `pulumi:"maxUnavailable"`
}

func (ControllerRollingUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerRollingUpdate)(nil)).Elem()
}

func (i ControllerRollingUpdateArgs) ToControllerRollingUpdateOutput() ControllerRollingUpdateOutput {
	return i.ToControllerRollingUpdateOutputWithContext(context.Background())
}

func (i ControllerRollingUpdateArgs) ToControllerRollingUpdateOutputWithContext(ctx context.Context) ControllerRollingUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerRollingUpdateOutput)
}

func (i ControllerRollingUpdateArgs) ToControllerRollingUpdatePtrOutput() ControllerRollingUpdatePtrOutput {
	return i.ToControllerRollingUpdatePtrOutputWithContext(context.Background())
}

func (i ControllerRollingUpdateArgs) ToControllerRollingUpdatePtrOutputWithContext(ctx context.Context) ControllerRollingUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerRollingUpdateOutput).ToControllerRollingUpdatePtrOutputWithContext(ctx)
}

// ControllerRollingUpdatePtrInput is an input type that accepts ControllerRollingUpdateArgs, ControllerRollingUpdatePtr and ControllerRollingUpdatePtrOutput values.
// You can construct a concrete instance of `ControllerRollingUpdatePtrInput` via:
//
//	        ControllerRollingUpdateArgs{...}
//
//	or:
//
//	        nil
type ControllerRollingUpdatePtrInput interface {
	pulumi.Input

	ToControllerRollingUpdatePtrOutput() ControllerRollingUpdatePtrOutput
	ToControllerRollingUpdatePtrOutputWithContext(context.Context) ControllerRollingUpdatePtrOutput
}

type controllerRollingUpdatePtrType ControllerRollingUpdateArgs

func ControllerRollingUpdatePtr(v *ControllerRollingUpdateArgs) ControllerRollingUpdatePtrInput {
	return (*controllerRollingUpdatePtrType)(v)
}

func (*controllerRollingUpdatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerRollingUpdate)(nil)).Elem()
}

func (i *controllerRollingUpdatePtrType) ToControllerRollingUpdatePtrOutput() ControllerRollingUpdatePtrOutput {
	return i.ToControllerRollingUpdatePtrOutputWithContext(context.Background())
}

func (i *controllerRollingUpdatePtrType) ToControllerRollingUpdatePtrOutputWithContext(ctx context.Context) ControllerRollingUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerRollingUpdatePtrOutput)
}

type ControllerRollingUpdateOutput struct{ *pulumi.OutputState }

func (ControllerRollingUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerRollingUpdate)(nil)).Elem()
}

func (o ControllerRollingUpdateOutput) ToControllerRollingUpdateOutput() ControllerRollingUpdateOutput {
	return o
}

func (o ControllerRollingUpdateOutput) ToControllerRollingUpdateOutputWithContext(ctx context.Context) ControllerRollingUpdateOutput {
	return o
}

func (o ControllerRollingUpdateOutput) ToControllerRollingUpdatePtrOutput() ControllerRollingUpdatePtrOutput {
	return o.ToControllerRollingUpdatePtrOutputWithContext(context.Background())
}

func (o ControllerRollingUpdateOutput) ToControllerRollingUpdatePtrOutputWithContext(ctx context.Context) ControllerRollingUpdatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerRollingUpdate) *ControllerRollingUpdate {
		return &v
	}).(ControllerRollingUpdatePtrOutput)
}

func (o ControllerRollingUpdateOutput) MaxUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ControllerRollingUpdate) *int { return v.MaxUnavailable }).(pulumi.IntPtrOutput)
}

type ControllerRollingUpdatePtrOutput struct{ *pulumi.OutputState }

func (ControllerRollingUpdatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerRollingUpdate)(nil)).Elem()
}

func (o ControllerRollingUpdatePtrOutput) ToControllerRollingUpdatePtrOutput() ControllerRollingUpdatePtrOutput {
	return o
}

func (o ControllerRollingUpdatePtrOutput) ToControllerRollingUpdatePtrOutputWithContext(ctx context.Context) ControllerRollingUpdatePtrOutput {
	return o
}

func (o ControllerRollingUpdatePtrOutput) Elem() ControllerRollingUpdateOutput {
	return o.ApplyT(func(v *ControllerRollingUpdate) ControllerRollingUpdate {
		if v != nil {
			return *v
		}
		var ret ControllerRollingUpdate
		return ret
	}).(ControllerRollingUpdateOutput)
}

func (o ControllerRollingUpdatePtrOutput) MaxUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ControllerRollingUpdate) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnavailable
	}).(pulumi.IntPtrOutput)
}

type ControllerScope struct {
	Enabled   *bool   `pulumi:"enabled"`
	Namespace *string `pulumi:"namespace"`
}

// ControllerScopeInput is an input type that accepts ControllerScopeArgs and ControllerScopeOutput values.
// You can construct a concrete instance of `ControllerScopeInput` via:
//
//	ControllerScopeArgs{...}
type ControllerScopeInput interface {
	pulumi.Input

	ToControllerScopeOutput() ControllerScopeOutput
	ToControllerScopeOutputWithContext(context.Context) ControllerScopeOutput
}

type ControllerScopeArgs struct {
	Enabled   pulumi.BoolPtrInput   `pulumi:"enabled"`
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ControllerScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerScope)(nil)).Elem()
}

func (i ControllerScopeArgs) ToControllerScopeOutput() ControllerScopeOutput {
	return i.ToControllerScopeOutputWithContext(context.Background())
}

func (i ControllerScopeArgs) ToControllerScopeOutputWithContext(ctx context.Context) ControllerScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerScopeOutput)
}

func (i ControllerScopeArgs) ToControllerScopePtrOutput() ControllerScopePtrOutput {
	return i.ToControllerScopePtrOutputWithContext(context.Background())
}

func (i ControllerScopeArgs) ToControllerScopePtrOutputWithContext(ctx context.Context) ControllerScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerScopeOutput).ToControllerScopePtrOutputWithContext(ctx)
}

// ControllerScopePtrInput is an input type that accepts ControllerScopeArgs, ControllerScopePtr and ControllerScopePtrOutput values.
// You can construct a concrete instance of `ControllerScopePtrInput` via:
//
//	        ControllerScopeArgs{...}
//
//	or:
//
//	        nil
type ControllerScopePtrInput interface {
	pulumi.Input

	ToControllerScopePtrOutput() ControllerScopePtrOutput
	ToControllerScopePtrOutputWithContext(context.Context) ControllerScopePtrOutput
}

type controllerScopePtrType ControllerScopeArgs

func ControllerScopePtr(v *ControllerScopeArgs) ControllerScopePtrInput {
	return (*controllerScopePtrType)(v)
}

func (*controllerScopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerScope)(nil)).Elem()
}

func (i *controllerScopePtrType) ToControllerScopePtrOutput() ControllerScopePtrOutput {
	return i.ToControllerScopePtrOutputWithContext(context.Background())
}

func (i *controllerScopePtrType) ToControllerScopePtrOutputWithContext(ctx context.Context) ControllerScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerScopePtrOutput)
}

type ControllerScopeOutput struct{ *pulumi.OutputState }

func (ControllerScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerScope)(nil)).Elem()
}

func (o ControllerScopeOutput) ToControllerScopeOutput() ControllerScopeOutput {
	return o
}

func (o ControllerScopeOutput) ToControllerScopeOutputWithContext(ctx context.Context) ControllerScopeOutput {
	return o
}

func (o ControllerScopeOutput) ToControllerScopePtrOutput() ControllerScopePtrOutput {
	return o.ToControllerScopePtrOutputWithContext(context.Background())
}

func (o ControllerScopeOutput) ToControllerScopePtrOutputWithContext(ctx context.Context) ControllerScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerScope) *ControllerScope {
		return &v
	}).(ControllerScopePtrOutput)
}

func (o ControllerScopeOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ControllerScope) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o ControllerScopeOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerScope) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ControllerScopePtrOutput struct{ *pulumi.OutputState }

func (ControllerScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerScope)(nil)).Elem()
}

func (o ControllerScopePtrOutput) ToControllerScopePtrOutput() ControllerScopePtrOutput {
	return o
}

func (o ControllerScopePtrOutput) ToControllerScopePtrOutputWithContext(ctx context.Context) ControllerScopePtrOutput {
	return o
}

func (o ControllerScopePtrOutput) Elem() ControllerScopeOutput {
	return o.ApplyT(func(v *ControllerScope) ControllerScope {
		if v != nil {
			return *v
		}
		var ret ControllerScope
		return ret
	}).(ControllerScopeOutput)
}

func (o ControllerScopePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ControllerScope) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o ControllerScopePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerScope) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type ControllerService struct {
	Annotations map[string]string `pulumi:"annotations"`
	ClusterIP   *string           `pulumi:"clusterIP"`
	EnableHttp  *bool             `pulumi:"enableHttp"`
	EnableHttps *bool             `pulumi:"enableHttps"`
	Enabled     *bool             `pulumi:"enabled"`
	// List of IP addresses at which the controller services are available Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
	ExternalIPs []string `pulumi:"externalIPs"`
	// Set external traffic policy to: "Local" to preserve source IP on providers supporting it. Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer
	ExternalTrafficPolicy *string `pulumi:"externalTrafficPolicy"`
	// specifies the health check node port (numeric port number) for the service. If healthCheckNodePort isn’t specified, the service controller allocates a port from your cluster’s NodePort range. Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
	HealthCheckNodePort *int `pulumi:"healthCheckNodePort"`
	// Enables an additional internal load balancer (besides the external one). Annotations are mandatory for the load balancer to come up. Varies with the cloud service.
	Internal                 *ControllerServiceInternal  `pulumi:"internal"`
	Labels                   map[string]string           `pulumi:"labels"`
	LoadBalancerIP           *string                     `pulumi:"loadBalancerIP"`
	LoadBalancerIPs          *string                     `pulumi:"loadBalancerIPs"`
	LoadBalancerSourceRanges []string                    `pulumi:"loadBalancerSourceRanges"`
	NodePorts                *ControllerServiceNodePorts `pulumi:"nodePorts"`
	Ports                    *ControllerPort             `pulumi:"ports"`
	// Must be either "None" or "ClientIP" if set. Kubernetes will default to "None". Ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity *string         `pulumi:"sessionAffinity"`
	TargetPorts     *ControllerPort `pulumi:"targetPorts"`
	Type            *string         `pulumi:"type"`
}

// ControllerServiceInput is an input type that accepts ControllerServiceArgs and ControllerServiceOutput values.
// You can construct a concrete instance of `ControllerServiceInput` via:
//
//	ControllerServiceArgs{...}
type ControllerServiceInput interface {
	pulumi.Input

	ToControllerServiceOutput() ControllerServiceOutput
	ToControllerServiceOutputWithContext(context.Context) ControllerServiceOutput
}

type ControllerServiceArgs struct {
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	ClusterIP   pulumi.StringPtrInput `pulumi:"clusterIP"`
	EnableHttp  pulumi.BoolPtrInput   `pulumi:"enableHttp"`
	EnableHttps pulumi.BoolPtrInput   `pulumi:"enableHttps"`
	Enabled     pulumi.BoolPtrInput   `pulumi:"enabled"`
	// List of IP addresses at which the controller services are available Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
	ExternalIPs pulumi.StringArrayInput `pulumi:"externalIPs"`
	// Set external traffic policy to: "Local" to preserve source IP on providers supporting it. Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer
	ExternalTrafficPolicy pulumi.StringPtrInput `pulumi:"externalTrafficPolicy"`
	// specifies the health check node port (numeric port number) for the service. If healthCheckNodePort isn’t specified, the service controller allocates a port from your cluster’s NodePort range. Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
	HealthCheckNodePort pulumi.IntPtrInput `pulumi:"healthCheckNodePort"`
	// Enables an additional internal load balancer (besides the external one). Annotations are mandatory for the load balancer to come up. Varies with the cloud service.
	Internal                 ControllerServiceInternalPtrInput  `pulumi:"internal"`
	Labels                   pulumi.StringMapInput              `pulumi:"labels"`
	LoadBalancerIP           pulumi.StringPtrInput              `pulumi:"loadBalancerIP"`
	LoadBalancerIPs          pulumi.StringPtrInput              `pulumi:"loadBalancerIPs"`
	LoadBalancerSourceRanges pulumi.StringArrayInput            `pulumi:"loadBalancerSourceRanges"`
	NodePorts                ControllerServiceNodePortsPtrInput `pulumi:"nodePorts"`
	Ports                    ControllerPortPtrInput             `pulumi:"ports"`
	// Must be either "None" or "ClientIP" if set. Kubernetes will default to "None". Ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity pulumi.StringPtrInput  `pulumi:"sessionAffinity"`
	TargetPorts     ControllerPortPtrInput `pulumi:"targetPorts"`
	Type            pulumi.StringPtrInput  `pulumi:"type"`
}

func (ControllerServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerService)(nil)).Elem()
}

func (i ControllerServiceArgs) ToControllerServiceOutput() ControllerServiceOutput {
	return i.ToControllerServiceOutputWithContext(context.Background())
}

func (i ControllerServiceArgs) ToControllerServiceOutputWithContext(ctx context.Context) ControllerServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerServiceOutput)
}

func (i ControllerServiceArgs) ToControllerServicePtrOutput() ControllerServicePtrOutput {
	return i.ToControllerServicePtrOutputWithContext(context.Background())
}

func (i ControllerServiceArgs) ToControllerServicePtrOutputWithContext(ctx context.Context) ControllerServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerServiceOutput).ToControllerServicePtrOutputWithContext(ctx)
}

// ControllerServicePtrInput is an input type that accepts ControllerServiceArgs, ControllerServicePtr and ControllerServicePtrOutput values.
// You can construct a concrete instance of `ControllerServicePtrInput` via:
//
//	        ControllerServiceArgs{...}
//
//	or:
//
//	        nil
type ControllerServicePtrInput interface {
	pulumi.Input

	ToControllerServicePtrOutput() ControllerServicePtrOutput
	ToControllerServicePtrOutputWithContext(context.Context) ControllerServicePtrOutput
}

type controllerServicePtrType ControllerServiceArgs

func ControllerServicePtr(v *ControllerServiceArgs) ControllerServicePtrInput {
	return (*controllerServicePtrType)(v)
}

func (*controllerServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerService)(nil)).Elem()
}

func (i *controllerServicePtrType) ToControllerServicePtrOutput() ControllerServicePtrOutput {
	return i.ToControllerServicePtrOutputWithContext(context.Background())
}

func (i *controllerServicePtrType) ToControllerServicePtrOutputWithContext(ctx context.Context) ControllerServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerServicePtrOutput)
}

type ControllerServiceOutput struct{ *pulumi.OutputState }

func (ControllerServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerService)(nil)).Elem()
}

func (o ControllerServiceOutput) ToControllerServiceOutput() ControllerServiceOutput {
	return o
}

func (o ControllerServiceOutput) ToControllerServiceOutputWithContext(ctx context.Context) ControllerServiceOutput {
	return o
}

func (o ControllerServiceOutput) ToControllerServicePtrOutput() ControllerServicePtrOutput {
	return o.ToControllerServicePtrOutputWithContext(context.Background())
}

func (o ControllerServiceOutput) ToControllerServicePtrOutputWithContext(ctx context.Context) ControllerServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerService) *ControllerService {
		return &v
	}).(ControllerServicePtrOutput)
}

func (o ControllerServiceOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ControllerService) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o ControllerServiceOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerService) *string { return v.ClusterIP }).(pulumi.StringPtrOutput)
}

func (o ControllerServiceOutput) EnableHttp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ControllerService) *bool { return v.EnableHttp }).(pulumi.BoolPtrOutput)
}

func (o ControllerServiceOutput) EnableHttps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ControllerService) *bool { return v.EnableHttps }).(pulumi.BoolPtrOutput)
}

func (o ControllerServiceOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ControllerService) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// List of IP addresses at which the controller services are available Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
func (o ControllerServiceOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ControllerService) []string { return v.ExternalIPs }).(pulumi.StringArrayOutput)
}

// Set external traffic policy to: "Local" to preserve source IP on providers supporting it. Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer
func (o ControllerServiceOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerService) *string { return v.ExternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// specifies the health check node port (numeric port number) for the service. If healthCheckNodePort isn’t specified, the service controller allocates a port from your cluster’s NodePort range. Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
func (o ControllerServiceOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ControllerService) *int { return v.HealthCheckNodePort }).(pulumi.IntPtrOutput)
}

// Enables an additional internal load balancer (besides the external one). Annotations are mandatory for the load balancer to come up. Varies with the cloud service.
func (o ControllerServiceOutput) Internal() ControllerServiceInternalPtrOutput {
	return o.ApplyT(func(v ControllerService) *ControllerServiceInternal { return v.Internal }).(ControllerServiceInternalPtrOutput)
}

func (o ControllerServiceOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ControllerService) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ControllerServiceOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerService) *string { return v.LoadBalancerIP }).(pulumi.StringPtrOutput)
}

func (o ControllerServiceOutput) LoadBalancerIPs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerService) *string { return v.LoadBalancerIPs }).(pulumi.StringPtrOutput)
}

func (o ControllerServiceOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ControllerService) []string { return v.LoadBalancerSourceRanges }).(pulumi.StringArrayOutput)
}

func (o ControllerServiceOutput) NodePorts() ControllerServiceNodePortsPtrOutput {
	return o.ApplyT(func(v ControllerService) *ControllerServiceNodePorts { return v.NodePorts }).(ControllerServiceNodePortsPtrOutput)
}

func (o ControllerServiceOutput) Ports() ControllerPortPtrOutput {
	return o.ApplyT(func(v ControllerService) *ControllerPort { return v.Ports }).(ControllerPortPtrOutput)
}

// Must be either "None" or "ClientIP" if set. Kubernetes will default to "None". Ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ControllerServiceOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerService) *string { return v.SessionAffinity }).(pulumi.StringPtrOutput)
}

func (o ControllerServiceOutput) TargetPorts() ControllerPortPtrOutput {
	return o.ApplyT(func(v ControllerService) *ControllerPort { return v.TargetPorts }).(ControllerPortPtrOutput)
}

func (o ControllerServiceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerService) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ControllerServicePtrOutput struct{ *pulumi.OutputState }

func (ControllerServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerService)(nil)).Elem()
}

func (o ControllerServicePtrOutput) ToControllerServicePtrOutput() ControllerServicePtrOutput {
	return o
}

func (o ControllerServicePtrOutput) ToControllerServicePtrOutputWithContext(ctx context.Context) ControllerServicePtrOutput {
	return o
}

func (o ControllerServicePtrOutput) Elem() ControllerServiceOutput {
	return o.ApplyT(func(v *ControllerService) ControllerService {
		if v != nil {
			return *v
		}
		var ret ControllerService
		return ret
	}).(ControllerServiceOutput)
}

func (o ControllerServicePtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ControllerService) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o ControllerServicePtrOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerService) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIP
	}).(pulumi.StringPtrOutput)
}

func (o ControllerServicePtrOutput) EnableHttp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ControllerService) *bool {
		if v == nil {
			return nil
		}
		return v.EnableHttp
	}).(pulumi.BoolPtrOutput)
}

func (o ControllerServicePtrOutput) EnableHttps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ControllerService) *bool {
		if v == nil {
			return nil
		}
		return v.EnableHttps
	}).(pulumi.BoolPtrOutput)
}

func (o ControllerServicePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ControllerService) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// List of IP addresses at which the controller services are available Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
func (o ControllerServicePtrOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ControllerService) []string {
		if v == nil {
			return nil
		}
		return v.ExternalIPs
	}).(pulumi.StringArrayOutput)
}

// Set external traffic policy to: "Local" to preserve source IP on providers supporting it. Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer
func (o ControllerServicePtrOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerService) *string {
		if v == nil {
			return nil
		}
		return v.ExternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// specifies the health check node port (numeric port number) for the service. If healthCheckNodePort isn’t specified, the service controller allocates a port from your cluster’s NodePort range. Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
func (o ControllerServicePtrOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ControllerService) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckNodePort
	}).(pulumi.IntPtrOutput)
}

// Enables an additional internal load balancer (besides the external one). Annotations are mandatory for the load balancer to come up. Varies with the cloud service.
func (o ControllerServicePtrOutput) Internal() ControllerServiceInternalPtrOutput {
	return o.ApplyT(func(v *ControllerService) *ControllerServiceInternal {
		if v == nil {
			return nil
		}
		return v.Internal
	}).(ControllerServiceInternalPtrOutput)
}

func (o ControllerServicePtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ControllerService) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

func (o ControllerServicePtrOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerService) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIP
	}).(pulumi.StringPtrOutput)
}

func (o ControllerServicePtrOutput) LoadBalancerIPs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerService) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIPs
	}).(pulumi.StringPtrOutput)
}

func (o ControllerServicePtrOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ControllerService) []string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSourceRanges
	}).(pulumi.StringArrayOutput)
}

func (o ControllerServicePtrOutput) NodePorts() ControllerServiceNodePortsPtrOutput {
	return o.ApplyT(func(v *ControllerService) *ControllerServiceNodePorts {
		if v == nil {
			return nil
		}
		return v.NodePorts
	}).(ControllerServiceNodePortsPtrOutput)
}

func (o ControllerServicePtrOutput) Ports() ControllerPortPtrOutput {
	return o.ApplyT(func(v *ControllerService) *ControllerPort {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(ControllerPortPtrOutput)
}

// Must be either "None" or "ClientIP" if set. Kubernetes will default to "None". Ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ControllerServicePtrOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerService) *string {
		if v == nil {
			return nil
		}
		return v.SessionAffinity
	}).(pulumi.StringPtrOutput)
}

func (o ControllerServicePtrOutput) TargetPorts() ControllerPortPtrOutput {
	return o.ApplyT(func(v *ControllerService) *ControllerPort {
		if v == nil {
			return nil
		}
		return v.TargetPorts
	}).(ControllerPortPtrOutput)
}

func (o ControllerServicePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerService) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type ControllerServiceAccount struct {
	AutomountServiceAccountToken *bool   `pulumi:"automountServiceAccountToken"`
	Create                       *bool   `pulumi:"create"`
	Name                         *string `pulumi:"name"`
}

// ControllerServiceAccountInput is an input type that accepts ControllerServiceAccountArgs and ControllerServiceAccountOutput values.
// You can construct a concrete instance of `ControllerServiceAccountInput` via:
//
//	ControllerServiceAccountArgs{...}
type ControllerServiceAccountInput interface {
	pulumi.Input

	ToControllerServiceAccountOutput() ControllerServiceAccountOutput
	ToControllerServiceAccountOutputWithContext(context.Context) ControllerServiceAccountOutput
}

type ControllerServiceAccountArgs struct {
	AutomountServiceAccountToken pulumi.BoolPtrInput   `pulumi:"automountServiceAccountToken"`
	Create                       pulumi.BoolPtrInput   `pulumi:"create"`
	Name                         pulumi.StringPtrInput `pulumi:"name"`
}

func (ControllerServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerServiceAccount)(nil)).Elem()
}

func (i ControllerServiceAccountArgs) ToControllerServiceAccountOutput() ControllerServiceAccountOutput {
	return i.ToControllerServiceAccountOutputWithContext(context.Background())
}

func (i ControllerServiceAccountArgs) ToControllerServiceAccountOutputWithContext(ctx context.Context) ControllerServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerServiceAccountOutput)
}

func (i ControllerServiceAccountArgs) ToControllerServiceAccountPtrOutput() ControllerServiceAccountPtrOutput {
	return i.ToControllerServiceAccountPtrOutputWithContext(context.Background())
}

func (i ControllerServiceAccountArgs) ToControllerServiceAccountPtrOutputWithContext(ctx context.Context) ControllerServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerServiceAccountOutput).ToControllerServiceAccountPtrOutputWithContext(ctx)
}

// ControllerServiceAccountPtrInput is an input type that accepts ControllerServiceAccountArgs, ControllerServiceAccountPtr and ControllerServiceAccountPtrOutput values.
// You can construct a concrete instance of `ControllerServiceAccountPtrInput` via:
//
//	        ControllerServiceAccountArgs{...}
//
//	or:
//
//	        nil
type ControllerServiceAccountPtrInput interface {
	pulumi.Input

	ToControllerServiceAccountPtrOutput() ControllerServiceAccountPtrOutput
	ToControllerServiceAccountPtrOutputWithContext(context.Context) ControllerServiceAccountPtrOutput
}

type controllerServiceAccountPtrType ControllerServiceAccountArgs

func ControllerServiceAccountPtr(v *ControllerServiceAccountArgs) ControllerServiceAccountPtrInput {
	return (*controllerServiceAccountPtrType)(v)
}

func (*controllerServiceAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerServiceAccount)(nil)).Elem()
}

func (i *controllerServiceAccountPtrType) ToControllerServiceAccountPtrOutput() ControllerServiceAccountPtrOutput {
	return i.ToControllerServiceAccountPtrOutputWithContext(context.Background())
}

func (i *controllerServiceAccountPtrType) ToControllerServiceAccountPtrOutputWithContext(ctx context.Context) ControllerServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerServiceAccountPtrOutput)
}

type ControllerServiceAccountOutput struct{ *pulumi.OutputState }

func (ControllerServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerServiceAccount)(nil)).Elem()
}

func (o ControllerServiceAccountOutput) ToControllerServiceAccountOutput() ControllerServiceAccountOutput {
	return o
}

func (o ControllerServiceAccountOutput) ToControllerServiceAccountOutputWithContext(ctx context.Context) ControllerServiceAccountOutput {
	return o
}

func (o ControllerServiceAccountOutput) ToControllerServiceAccountPtrOutput() ControllerServiceAccountPtrOutput {
	return o.ToControllerServiceAccountPtrOutputWithContext(context.Background())
}

func (o ControllerServiceAccountOutput) ToControllerServiceAccountPtrOutputWithContext(ctx context.Context) ControllerServiceAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerServiceAccount) *ControllerServiceAccount {
		return &v
	}).(ControllerServiceAccountPtrOutput)
}

func (o ControllerServiceAccountOutput) AutomountServiceAccountToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ControllerServiceAccount) *bool { return v.AutomountServiceAccountToken }).(pulumi.BoolPtrOutput)
}

func (o ControllerServiceAccountOutput) Create() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ControllerServiceAccount) *bool { return v.Create }).(pulumi.BoolPtrOutput)
}

func (o ControllerServiceAccountOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerServiceAccount) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ControllerServiceAccountPtrOutput struct{ *pulumi.OutputState }

func (ControllerServiceAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerServiceAccount)(nil)).Elem()
}

func (o ControllerServiceAccountPtrOutput) ToControllerServiceAccountPtrOutput() ControllerServiceAccountPtrOutput {
	return o
}

func (o ControllerServiceAccountPtrOutput) ToControllerServiceAccountPtrOutputWithContext(ctx context.Context) ControllerServiceAccountPtrOutput {
	return o
}

func (o ControllerServiceAccountPtrOutput) Elem() ControllerServiceAccountOutput {
	return o.ApplyT(func(v *ControllerServiceAccount) ControllerServiceAccount {
		if v != nil {
			return *v
		}
		var ret ControllerServiceAccount
		return ret
	}).(ControllerServiceAccountOutput)
}

func (o ControllerServiceAccountPtrOutput) AutomountServiceAccountToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ControllerServiceAccount) *bool {
		if v == nil {
			return nil
		}
		return v.AutomountServiceAccountToken
	}).(pulumi.BoolPtrOutput)
}

func (o ControllerServiceAccountPtrOutput) Create() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ControllerServiceAccount) *bool {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.BoolPtrOutput)
}

func (o ControllerServiceAccountPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type ControllerServiceInternal struct {
	Annotations map[string]string `pulumi:"annotations"`
	Enabled     *bool             `pulumi:"enabled"`
	// Set external traffic policy to: "Local" to preserve source IP on providers supporting it. Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer
	ExternalTrafficPolicy *string           `pulumi:"externalTrafficPolicy"`
	Labels                map[string]string `pulumi:"labels"`
	LoadBalancerIPs       *string           `pulumi:"loadBalancerIPs"`
	// Restrict access For LoadBalancer service. Defaults to 0.0.0.0/0.
	LoadBalancerSourceRanges []string `pulumi:"loadBalancerSourceRanges"`
}

// ControllerServiceInternalInput is an input type that accepts ControllerServiceInternalArgs and ControllerServiceInternalOutput values.
// You can construct a concrete instance of `ControllerServiceInternalInput` via:
//
//	ControllerServiceInternalArgs{...}
type ControllerServiceInternalInput interface {
	pulumi.Input

	ToControllerServiceInternalOutput() ControllerServiceInternalOutput
	ToControllerServiceInternalOutputWithContext(context.Context) ControllerServiceInternalOutput
}

type ControllerServiceInternalArgs struct {
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	Enabled     pulumi.BoolPtrInput   `pulumi:"enabled"`
	// Set external traffic policy to: "Local" to preserve source IP on providers supporting it. Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer
	ExternalTrafficPolicy pulumi.StringPtrInput `pulumi:"externalTrafficPolicy"`
	Labels                pulumi.StringMapInput `pulumi:"labels"`
	LoadBalancerIPs       pulumi.StringPtrInput `pulumi:"loadBalancerIPs"`
	// Restrict access For LoadBalancer service. Defaults to 0.0.0.0/0.
	LoadBalancerSourceRanges pulumi.StringArrayInput `pulumi:"loadBalancerSourceRanges"`
}

func (ControllerServiceInternalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerServiceInternal)(nil)).Elem()
}

func (i ControllerServiceInternalArgs) ToControllerServiceInternalOutput() ControllerServiceInternalOutput {
	return i.ToControllerServiceInternalOutputWithContext(context.Background())
}

func (i ControllerServiceInternalArgs) ToControllerServiceInternalOutputWithContext(ctx context.Context) ControllerServiceInternalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerServiceInternalOutput)
}

func (i ControllerServiceInternalArgs) ToControllerServiceInternalPtrOutput() ControllerServiceInternalPtrOutput {
	return i.ToControllerServiceInternalPtrOutputWithContext(context.Background())
}

func (i ControllerServiceInternalArgs) ToControllerServiceInternalPtrOutputWithContext(ctx context.Context) ControllerServiceInternalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerServiceInternalOutput).ToControllerServiceInternalPtrOutputWithContext(ctx)
}

// ControllerServiceInternalPtrInput is an input type that accepts ControllerServiceInternalArgs, ControllerServiceInternalPtr and ControllerServiceInternalPtrOutput values.
// You can construct a concrete instance of `ControllerServiceInternalPtrInput` via:
//
//	        ControllerServiceInternalArgs{...}
//
//	or:
//
//	        nil
type ControllerServiceInternalPtrInput interface {
	pulumi.Input

	ToControllerServiceInternalPtrOutput() ControllerServiceInternalPtrOutput
	ToControllerServiceInternalPtrOutputWithContext(context.Context) ControllerServiceInternalPtrOutput
}

type controllerServiceInternalPtrType ControllerServiceInternalArgs

func ControllerServiceInternalPtr(v *ControllerServiceInternalArgs) ControllerServiceInternalPtrInput {
	return (*controllerServiceInternalPtrType)(v)
}

func (*controllerServiceInternalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerServiceInternal)(nil)).Elem()
}

func (i *controllerServiceInternalPtrType) ToControllerServiceInternalPtrOutput() ControllerServiceInternalPtrOutput {
	return i.ToControllerServiceInternalPtrOutputWithContext(context.Background())
}

func (i *controllerServiceInternalPtrType) ToControllerServiceInternalPtrOutputWithContext(ctx context.Context) ControllerServiceInternalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerServiceInternalPtrOutput)
}

type ControllerServiceInternalOutput struct{ *pulumi.OutputState }

func (ControllerServiceInternalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerServiceInternal)(nil)).Elem()
}

func (o ControllerServiceInternalOutput) ToControllerServiceInternalOutput() ControllerServiceInternalOutput {
	return o
}

func (o ControllerServiceInternalOutput) ToControllerServiceInternalOutputWithContext(ctx context.Context) ControllerServiceInternalOutput {
	return o
}

func (o ControllerServiceInternalOutput) ToControllerServiceInternalPtrOutput() ControllerServiceInternalPtrOutput {
	return o.ToControllerServiceInternalPtrOutputWithContext(context.Background())
}

func (o ControllerServiceInternalOutput) ToControllerServiceInternalPtrOutputWithContext(ctx context.Context) ControllerServiceInternalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerServiceInternal) *ControllerServiceInternal {
		return &v
	}).(ControllerServiceInternalPtrOutput)
}

func (o ControllerServiceInternalOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ControllerServiceInternal) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o ControllerServiceInternalOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ControllerServiceInternal) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Set external traffic policy to: "Local" to preserve source IP on providers supporting it. Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer
func (o ControllerServiceInternalOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerServiceInternal) *string { return v.ExternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

func (o ControllerServiceInternalOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ControllerServiceInternal) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ControllerServiceInternalOutput) LoadBalancerIPs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerServiceInternal) *string { return v.LoadBalancerIPs }).(pulumi.StringPtrOutput)
}

// Restrict access For LoadBalancer service. Defaults to 0.0.0.0/0.
func (o ControllerServiceInternalOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ControllerServiceInternal) []string { return v.LoadBalancerSourceRanges }).(pulumi.StringArrayOutput)
}

type ControllerServiceInternalPtrOutput struct{ *pulumi.OutputState }

func (ControllerServiceInternalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerServiceInternal)(nil)).Elem()
}

func (o ControllerServiceInternalPtrOutput) ToControllerServiceInternalPtrOutput() ControllerServiceInternalPtrOutput {
	return o
}

func (o ControllerServiceInternalPtrOutput) ToControllerServiceInternalPtrOutputWithContext(ctx context.Context) ControllerServiceInternalPtrOutput {
	return o
}

func (o ControllerServiceInternalPtrOutput) Elem() ControllerServiceInternalOutput {
	return o.ApplyT(func(v *ControllerServiceInternal) ControllerServiceInternal {
		if v != nil {
			return *v
		}
		var ret ControllerServiceInternal
		return ret
	}).(ControllerServiceInternalOutput)
}

func (o ControllerServiceInternalPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ControllerServiceInternal) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o ControllerServiceInternalPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ControllerServiceInternal) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Set external traffic policy to: "Local" to preserve source IP on providers supporting it. Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer
func (o ControllerServiceInternalPtrOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerServiceInternal) *string {
		if v == nil {
			return nil
		}
		return v.ExternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

func (o ControllerServiceInternalPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ControllerServiceInternal) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

func (o ControllerServiceInternalPtrOutput) LoadBalancerIPs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerServiceInternal) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIPs
	}).(pulumi.StringPtrOutput)
}

// Restrict access For LoadBalancer service. Defaults to 0.0.0.0/0.
func (o ControllerServiceInternalPtrOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ControllerServiceInternal) []string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSourceRanges
	}).(pulumi.StringArrayOutput)
}

type ControllerServiceNodePorts struct {
	Http  *string                      `pulumi:"http"`
	Https *string                      `pulumi:"https"`
	Tcp   map[string]map[string]string `pulumi:"tcp"`
	Udp   map[string]map[string]string `pulumi:"udp"`
}

// ControllerServiceNodePortsInput is an input type that accepts ControllerServiceNodePortsArgs and ControllerServiceNodePortsOutput values.
// You can construct a concrete instance of `ControllerServiceNodePortsInput` via:
//
//	ControllerServiceNodePortsArgs{...}
type ControllerServiceNodePortsInput interface {
	pulumi.Input

	ToControllerServiceNodePortsOutput() ControllerServiceNodePortsOutput
	ToControllerServiceNodePortsOutputWithContext(context.Context) ControllerServiceNodePortsOutput
}

type ControllerServiceNodePortsArgs struct {
	Http  pulumi.StringPtrInput    `pulumi:"http"`
	Https pulumi.StringPtrInput    `pulumi:"https"`
	Tcp   pulumi.StringMapMapInput `pulumi:"tcp"`
	Udp   pulumi.StringMapMapInput `pulumi:"udp"`
}

func (ControllerServiceNodePortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerServiceNodePorts)(nil)).Elem()
}

func (i ControllerServiceNodePortsArgs) ToControllerServiceNodePortsOutput() ControllerServiceNodePortsOutput {
	return i.ToControllerServiceNodePortsOutputWithContext(context.Background())
}

func (i ControllerServiceNodePortsArgs) ToControllerServiceNodePortsOutputWithContext(ctx context.Context) ControllerServiceNodePortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerServiceNodePortsOutput)
}

func (i ControllerServiceNodePortsArgs) ToControllerServiceNodePortsPtrOutput() ControllerServiceNodePortsPtrOutput {
	return i.ToControllerServiceNodePortsPtrOutputWithContext(context.Background())
}

func (i ControllerServiceNodePortsArgs) ToControllerServiceNodePortsPtrOutputWithContext(ctx context.Context) ControllerServiceNodePortsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerServiceNodePortsOutput).ToControllerServiceNodePortsPtrOutputWithContext(ctx)
}

// ControllerServiceNodePortsPtrInput is an input type that accepts ControllerServiceNodePortsArgs, ControllerServiceNodePortsPtr and ControllerServiceNodePortsPtrOutput values.
// You can construct a concrete instance of `ControllerServiceNodePortsPtrInput` via:
//
//	        ControllerServiceNodePortsArgs{...}
//
//	or:
//
//	        nil
type ControllerServiceNodePortsPtrInput interface {
	pulumi.Input

	ToControllerServiceNodePortsPtrOutput() ControllerServiceNodePortsPtrOutput
	ToControllerServiceNodePortsPtrOutputWithContext(context.Context) ControllerServiceNodePortsPtrOutput
}

type controllerServiceNodePortsPtrType ControllerServiceNodePortsArgs

func ControllerServiceNodePortsPtr(v *ControllerServiceNodePortsArgs) ControllerServiceNodePortsPtrInput {
	return (*controllerServiceNodePortsPtrType)(v)
}

func (*controllerServiceNodePortsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerServiceNodePorts)(nil)).Elem()
}

func (i *controllerServiceNodePortsPtrType) ToControllerServiceNodePortsPtrOutput() ControllerServiceNodePortsPtrOutput {
	return i.ToControllerServiceNodePortsPtrOutputWithContext(context.Background())
}

func (i *controllerServiceNodePortsPtrType) ToControllerServiceNodePortsPtrOutputWithContext(ctx context.Context) ControllerServiceNodePortsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerServiceNodePortsPtrOutput)
}

type ControllerServiceNodePortsOutput struct{ *pulumi.OutputState }

func (ControllerServiceNodePortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerServiceNodePorts)(nil)).Elem()
}

func (o ControllerServiceNodePortsOutput) ToControllerServiceNodePortsOutput() ControllerServiceNodePortsOutput {
	return o
}

func (o ControllerServiceNodePortsOutput) ToControllerServiceNodePortsOutputWithContext(ctx context.Context) ControllerServiceNodePortsOutput {
	return o
}

func (o ControllerServiceNodePortsOutput) ToControllerServiceNodePortsPtrOutput() ControllerServiceNodePortsPtrOutput {
	return o.ToControllerServiceNodePortsPtrOutputWithContext(context.Background())
}

func (o ControllerServiceNodePortsOutput) ToControllerServiceNodePortsPtrOutputWithContext(ctx context.Context) ControllerServiceNodePortsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerServiceNodePorts) *ControllerServiceNodePorts {
		return &v
	}).(ControllerServiceNodePortsPtrOutput)
}

func (o ControllerServiceNodePortsOutput) Http() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerServiceNodePorts) *string { return v.Http }).(pulumi.StringPtrOutput)
}

func (o ControllerServiceNodePortsOutput) Https() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerServiceNodePorts) *string { return v.Https }).(pulumi.StringPtrOutput)
}

func (o ControllerServiceNodePortsOutput) Tcp() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v ControllerServiceNodePorts) map[string]map[string]string { return v.Tcp }).(pulumi.StringMapMapOutput)
}

func (o ControllerServiceNodePortsOutput) Udp() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v ControllerServiceNodePorts) map[string]map[string]string { return v.Udp }).(pulumi.StringMapMapOutput)
}

type ControllerServiceNodePortsPtrOutput struct{ *pulumi.OutputState }

func (ControllerServiceNodePortsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerServiceNodePorts)(nil)).Elem()
}

func (o ControllerServiceNodePortsPtrOutput) ToControllerServiceNodePortsPtrOutput() ControllerServiceNodePortsPtrOutput {
	return o
}

func (o ControllerServiceNodePortsPtrOutput) ToControllerServiceNodePortsPtrOutputWithContext(ctx context.Context) ControllerServiceNodePortsPtrOutput {
	return o
}

func (o ControllerServiceNodePortsPtrOutput) Elem() ControllerServiceNodePortsOutput {
	return o.ApplyT(func(v *ControllerServiceNodePorts) ControllerServiceNodePorts {
		if v != nil {
			return *v
		}
		var ret ControllerServiceNodePorts
		return ret
	}).(ControllerServiceNodePortsOutput)
}

func (o ControllerServiceNodePortsPtrOutput) Http() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerServiceNodePorts) *string {
		if v == nil {
			return nil
		}
		return v.Http
	}).(pulumi.StringPtrOutput)
}

func (o ControllerServiceNodePortsPtrOutput) Https() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerServiceNodePorts) *string {
		if v == nil {
			return nil
		}
		return v.Https
	}).(pulumi.StringPtrOutput)
}

func (o ControllerServiceNodePortsPtrOutput) Tcp() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v *ControllerServiceNodePorts) map[string]map[string]string {
		if v == nil {
			return nil
		}
		return v.Tcp
	}).(pulumi.StringMapMapOutput)
}

func (o ControllerServiceNodePortsPtrOutput) Udp() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v *ControllerServiceNodePorts) map[string]map[string]string {
		if v == nil {
			return nil
		}
		return v.Udp
	}).(pulumi.StringMapMapOutput)
}

type ControllerTcp struct {
	// Annotations to be added to the tcp config configmap.
	Annotations        map[string]string `pulumi:"annotations"`
	ConfigMapNamespace *string           `pulumi:"configMapNamespace"`
}

// ControllerTcpInput is an input type that accepts ControllerTcpArgs and ControllerTcpOutput values.
// You can construct a concrete instance of `ControllerTcpInput` via:
//
//	ControllerTcpArgs{...}
type ControllerTcpInput interface {
	pulumi.Input

	ToControllerTcpOutput() ControllerTcpOutput
	ToControllerTcpOutputWithContext(context.Context) ControllerTcpOutput
}

type ControllerTcpArgs struct {
	// Annotations to be added to the tcp config configmap.
	Annotations        pulumi.StringMapInput `pulumi:"annotations"`
	ConfigMapNamespace pulumi.StringPtrInput `pulumi:"configMapNamespace"`
}

func (ControllerTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerTcp)(nil)).Elem()
}

func (i ControllerTcpArgs) ToControllerTcpOutput() ControllerTcpOutput {
	return i.ToControllerTcpOutputWithContext(context.Background())
}

func (i ControllerTcpArgs) ToControllerTcpOutputWithContext(ctx context.Context) ControllerTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerTcpOutput)
}

func (i ControllerTcpArgs) ToControllerTcpPtrOutput() ControllerTcpPtrOutput {
	return i.ToControllerTcpPtrOutputWithContext(context.Background())
}

func (i ControllerTcpArgs) ToControllerTcpPtrOutputWithContext(ctx context.Context) ControllerTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerTcpOutput).ToControllerTcpPtrOutputWithContext(ctx)
}

// ControllerTcpPtrInput is an input type that accepts ControllerTcpArgs, ControllerTcpPtr and ControllerTcpPtrOutput values.
// You can construct a concrete instance of `ControllerTcpPtrInput` via:
//
//	        ControllerTcpArgs{...}
//
//	or:
//
//	        nil
type ControllerTcpPtrInput interface {
	pulumi.Input

	ToControllerTcpPtrOutput() ControllerTcpPtrOutput
	ToControllerTcpPtrOutputWithContext(context.Context) ControllerTcpPtrOutput
}

type controllerTcpPtrType ControllerTcpArgs

func ControllerTcpPtr(v *ControllerTcpArgs) ControllerTcpPtrInput {
	return (*controllerTcpPtrType)(v)
}

func (*controllerTcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerTcp)(nil)).Elem()
}

func (i *controllerTcpPtrType) ToControllerTcpPtrOutput() ControllerTcpPtrOutput {
	return i.ToControllerTcpPtrOutputWithContext(context.Background())
}

func (i *controllerTcpPtrType) ToControllerTcpPtrOutputWithContext(ctx context.Context) ControllerTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerTcpPtrOutput)
}

type ControllerTcpOutput struct{ *pulumi.OutputState }

func (ControllerTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerTcp)(nil)).Elem()
}

func (o ControllerTcpOutput) ToControllerTcpOutput() ControllerTcpOutput {
	return o
}

func (o ControllerTcpOutput) ToControllerTcpOutputWithContext(ctx context.Context) ControllerTcpOutput {
	return o
}

func (o ControllerTcpOutput) ToControllerTcpPtrOutput() ControllerTcpPtrOutput {
	return o.ToControllerTcpPtrOutputWithContext(context.Background())
}

func (o ControllerTcpOutput) ToControllerTcpPtrOutputWithContext(ctx context.Context) ControllerTcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerTcp) *ControllerTcp {
		return &v
	}).(ControllerTcpPtrOutput)
}

// Annotations to be added to the tcp config configmap.
func (o ControllerTcpOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ControllerTcp) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o ControllerTcpOutput) ConfigMapNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerTcp) *string { return v.ConfigMapNamespace }).(pulumi.StringPtrOutput)
}

type ControllerTcpPtrOutput struct{ *pulumi.OutputState }

func (ControllerTcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerTcp)(nil)).Elem()
}

func (o ControllerTcpPtrOutput) ToControllerTcpPtrOutput() ControllerTcpPtrOutput {
	return o
}

func (o ControllerTcpPtrOutput) ToControllerTcpPtrOutputWithContext(ctx context.Context) ControllerTcpPtrOutput {
	return o
}

func (o ControllerTcpPtrOutput) Elem() ControllerTcpOutput {
	return o.ApplyT(func(v *ControllerTcp) ControllerTcp {
		if v != nil {
			return *v
		}
		var ret ControllerTcp
		return ret
	}).(ControllerTcpOutput)
}

// Annotations to be added to the tcp config configmap.
func (o ControllerTcpPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ControllerTcp) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o ControllerTcpPtrOutput) ConfigMapNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerTcp) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMapNamespace
	}).(pulumi.StringPtrOutput)
}

type ControllerUdp struct {
	// Annotations to be added to the udp config configmap.
	Annotations        map[string]string `pulumi:"annotations"`
	ConfigMapNamespace *string           `pulumi:"configMapNamespace"`
}

// ControllerUdpInput is an input type that accepts ControllerUdpArgs and ControllerUdpOutput values.
// You can construct a concrete instance of `ControllerUdpInput` via:
//
//	ControllerUdpArgs{...}
type ControllerUdpInput interface {
	pulumi.Input

	ToControllerUdpOutput() ControllerUdpOutput
	ToControllerUdpOutputWithContext(context.Context) ControllerUdpOutput
}

type ControllerUdpArgs struct {
	// Annotations to be added to the udp config configmap.
	Annotations        pulumi.StringMapInput `pulumi:"annotations"`
	ConfigMapNamespace pulumi.StringPtrInput `pulumi:"configMapNamespace"`
}

func (ControllerUdpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerUdp)(nil)).Elem()
}

func (i ControllerUdpArgs) ToControllerUdpOutput() ControllerUdpOutput {
	return i.ToControllerUdpOutputWithContext(context.Background())
}

func (i ControllerUdpArgs) ToControllerUdpOutputWithContext(ctx context.Context) ControllerUdpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerUdpOutput)
}

func (i ControllerUdpArgs) ToControllerUdpPtrOutput() ControllerUdpPtrOutput {
	return i.ToControllerUdpPtrOutputWithContext(context.Background())
}

func (i ControllerUdpArgs) ToControllerUdpPtrOutputWithContext(ctx context.Context) ControllerUdpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerUdpOutput).ToControllerUdpPtrOutputWithContext(ctx)
}

// ControllerUdpPtrInput is an input type that accepts ControllerUdpArgs, ControllerUdpPtr and ControllerUdpPtrOutput values.
// You can construct a concrete instance of `ControllerUdpPtrInput` via:
//
//	        ControllerUdpArgs{...}
//
//	or:
//
//	        nil
type ControllerUdpPtrInput interface {
	pulumi.Input

	ToControllerUdpPtrOutput() ControllerUdpPtrOutput
	ToControllerUdpPtrOutputWithContext(context.Context) ControllerUdpPtrOutput
}

type controllerUdpPtrType ControllerUdpArgs

func ControllerUdpPtr(v *ControllerUdpArgs) ControllerUdpPtrInput {
	return (*controllerUdpPtrType)(v)
}

func (*controllerUdpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerUdp)(nil)).Elem()
}

func (i *controllerUdpPtrType) ToControllerUdpPtrOutput() ControllerUdpPtrOutput {
	return i.ToControllerUdpPtrOutputWithContext(context.Background())
}

func (i *controllerUdpPtrType) ToControllerUdpPtrOutputWithContext(ctx context.Context) ControllerUdpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerUdpPtrOutput)
}

type ControllerUdpOutput struct{ *pulumi.OutputState }

func (ControllerUdpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerUdp)(nil)).Elem()
}

func (o ControllerUdpOutput) ToControllerUdpOutput() ControllerUdpOutput {
	return o
}

func (o ControllerUdpOutput) ToControllerUdpOutputWithContext(ctx context.Context) ControllerUdpOutput {
	return o
}

func (o ControllerUdpOutput) ToControllerUdpPtrOutput() ControllerUdpPtrOutput {
	return o.ToControllerUdpPtrOutputWithContext(context.Background())
}

func (o ControllerUdpOutput) ToControllerUdpPtrOutputWithContext(ctx context.Context) ControllerUdpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerUdp) *ControllerUdp {
		return &v
	}).(ControllerUdpPtrOutput)
}

// Annotations to be added to the udp config configmap.
func (o ControllerUdpOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ControllerUdp) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o ControllerUdpOutput) ConfigMapNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerUdp) *string { return v.ConfigMapNamespace }).(pulumi.StringPtrOutput)
}

type ControllerUdpPtrOutput struct{ *pulumi.OutputState }

func (ControllerUdpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerUdp)(nil)).Elem()
}

func (o ControllerUdpPtrOutput) ToControllerUdpPtrOutput() ControllerUdpPtrOutput {
	return o
}

func (o ControllerUdpPtrOutput) ToControllerUdpPtrOutputWithContext(ctx context.Context) ControllerUdpPtrOutput {
	return o
}

func (o ControllerUdpPtrOutput) Elem() ControllerUdpOutput {
	return o.ApplyT(func(v *ControllerUdp) ControllerUdp {
		if v != nil {
			return *v
		}
		var ret ControllerUdp
		return ret
	}).(ControllerUdpOutput)
}

// Annotations to be added to the udp config configmap.
func (o ControllerUdpPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ControllerUdp) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o ControllerUdpPtrOutput) ConfigMapNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerUdp) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMapNamespace
	}).(pulumi.StringPtrOutput)
}

type ControllerUpdateStrategy struct {
	RollingUpdate *ControllerRollingUpdate `pulumi:"rollingUpdate"`
	Type          *string                  `pulumi:"type"`
}

// ControllerUpdateStrategyInput is an input type that accepts ControllerUpdateStrategyArgs and ControllerUpdateStrategyOutput values.
// You can construct a concrete instance of `ControllerUpdateStrategyInput` via:
//
//	ControllerUpdateStrategyArgs{...}
type ControllerUpdateStrategyInput interface {
	pulumi.Input

	ToControllerUpdateStrategyOutput() ControllerUpdateStrategyOutput
	ToControllerUpdateStrategyOutputWithContext(context.Context) ControllerUpdateStrategyOutput
}

type ControllerUpdateStrategyArgs struct {
	RollingUpdate ControllerRollingUpdatePtrInput `pulumi:"rollingUpdate"`
	Type          pulumi.StringPtrInput           `pulumi:"type"`
}

func (ControllerUpdateStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerUpdateStrategy)(nil)).Elem()
}

func (i ControllerUpdateStrategyArgs) ToControllerUpdateStrategyOutput() ControllerUpdateStrategyOutput {
	return i.ToControllerUpdateStrategyOutputWithContext(context.Background())
}

func (i ControllerUpdateStrategyArgs) ToControllerUpdateStrategyOutputWithContext(ctx context.Context) ControllerUpdateStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerUpdateStrategyOutput)
}

func (i ControllerUpdateStrategyArgs) ToControllerUpdateStrategyPtrOutput() ControllerUpdateStrategyPtrOutput {
	return i.ToControllerUpdateStrategyPtrOutputWithContext(context.Background())
}

func (i ControllerUpdateStrategyArgs) ToControllerUpdateStrategyPtrOutputWithContext(ctx context.Context) ControllerUpdateStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerUpdateStrategyOutput).ToControllerUpdateStrategyPtrOutputWithContext(ctx)
}

// ControllerUpdateStrategyPtrInput is an input type that accepts ControllerUpdateStrategyArgs, ControllerUpdateStrategyPtr and ControllerUpdateStrategyPtrOutput values.
// You can construct a concrete instance of `ControllerUpdateStrategyPtrInput` via:
//
//	        ControllerUpdateStrategyArgs{...}
//
//	or:
//
//	        nil
type ControllerUpdateStrategyPtrInput interface {
	pulumi.Input

	ToControllerUpdateStrategyPtrOutput() ControllerUpdateStrategyPtrOutput
	ToControllerUpdateStrategyPtrOutputWithContext(context.Context) ControllerUpdateStrategyPtrOutput
}

type controllerUpdateStrategyPtrType ControllerUpdateStrategyArgs

func ControllerUpdateStrategyPtr(v *ControllerUpdateStrategyArgs) ControllerUpdateStrategyPtrInput {
	return (*controllerUpdateStrategyPtrType)(v)
}

func (*controllerUpdateStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerUpdateStrategy)(nil)).Elem()
}

func (i *controllerUpdateStrategyPtrType) ToControllerUpdateStrategyPtrOutput() ControllerUpdateStrategyPtrOutput {
	return i.ToControllerUpdateStrategyPtrOutputWithContext(context.Background())
}

func (i *controllerUpdateStrategyPtrType) ToControllerUpdateStrategyPtrOutputWithContext(ctx context.Context) ControllerUpdateStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerUpdateStrategyPtrOutput)
}

type ControllerUpdateStrategyOutput struct{ *pulumi.OutputState }

func (ControllerUpdateStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerUpdateStrategy)(nil)).Elem()
}

func (o ControllerUpdateStrategyOutput) ToControllerUpdateStrategyOutput() ControllerUpdateStrategyOutput {
	return o
}

func (o ControllerUpdateStrategyOutput) ToControllerUpdateStrategyOutputWithContext(ctx context.Context) ControllerUpdateStrategyOutput {
	return o
}

func (o ControllerUpdateStrategyOutput) ToControllerUpdateStrategyPtrOutput() ControllerUpdateStrategyPtrOutput {
	return o.ToControllerUpdateStrategyPtrOutputWithContext(context.Background())
}

func (o ControllerUpdateStrategyOutput) ToControllerUpdateStrategyPtrOutputWithContext(ctx context.Context) ControllerUpdateStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ControllerUpdateStrategy) *ControllerUpdateStrategy {
		return &v
	}).(ControllerUpdateStrategyPtrOutput)
}

func (o ControllerUpdateStrategyOutput) RollingUpdate() ControllerRollingUpdatePtrOutput {
	return o.ApplyT(func(v ControllerUpdateStrategy) *ControllerRollingUpdate { return v.RollingUpdate }).(ControllerRollingUpdatePtrOutput)
}

func (o ControllerUpdateStrategyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerUpdateStrategy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ControllerUpdateStrategyPtrOutput struct{ *pulumi.OutputState }

func (ControllerUpdateStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerUpdateStrategy)(nil)).Elem()
}

func (o ControllerUpdateStrategyPtrOutput) ToControllerUpdateStrategyPtrOutput() ControllerUpdateStrategyPtrOutput {
	return o
}

func (o ControllerUpdateStrategyPtrOutput) ToControllerUpdateStrategyPtrOutputWithContext(ctx context.Context) ControllerUpdateStrategyPtrOutput {
	return o
}

func (o ControllerUpdateStrategyPtrOutput) Elem() ControllerUpdateStrategyOutput {
	return o.ApplyT(func(v *ControllerUpdateStrategy) ControllerUpdateStrategy {
		if v != nil {
			return *v
		}
		var ret ControllerUpdateStrategy
		return ret
	}).(ControllerUpdateStrategyOutput)
}

func (o ControllerUpdateStrategyPtrOutput) RollingUpdate() ControllerRollingUpdatePtrOutput {
	return o.ApplyT(func(v *ControllerUpdateStrategy) *ControllerRollingUpdate {
		if v == nil {
			return nil
		}
		return v.RollingUpdate
	}).(ControllerRollingUpdatePtrOutput)
}

func (o ControllerUpdateStrategyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerUpdateStrategy) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type Keda struct {
	// apiVersion changes with keda 1.x vs 2.x: 2.x = keda.sh/v1alpha1, 1.x = keda.k8s.io/v1alpha1.
	ApiVersion                    *string              `pulumi:"apiVersion"`
	Behavior                      *AutoscalingBehavior `pulumi:"behavior"`
	CooldownPeriod                *int                 `pulumi:"cooldownPeriod"`
	Enabled                       *bool                `pulumi:"enabled"`
	MaxReplicas                   *int                 `pulumi:"maxReplicas"`
	MinReplicas                   *int                 `pulumi:"minReplicas"`
	PollingInterval               *int                 `pulumi:"pollingInterval"`
	RestoreToOriginalReplicaCount *bool                `pulumi:"restoreToOriginalReplicaCount"`
	ScaledObject                  *KedaScaledObject    `pulumi:"scaledObject"`
	Triggers                      []KedaTrigger        `pulumi:"triggers"`
}

// KedaInput is an input type that accepts KedaArgs and KedaOutput values.
// You can construct a concrete instance of `KedaInput` via:
//
//	KedaArgs{...}
type KedaInput interface {
	pulumi.Input

	ToKedaOutput() KedaOutput
	ToKedaOutputWithContext(context.Context) KedaOutput
}

type KedaArgs struct {
	// apiVersion changes with keda 1.x vs 2.x: 2.x = keda.sh/v1alpha1, 1.x = keda.k8s.io/v1alpha1.
	ApiVersion                    pulumi.StringPtrInput       `pulumi:"apiVersion"`
	Behavior                      AutoscalingBehaviorPtrInput `pulumi:"behavior"`
	CooldownPeriod                pulumi.IntPtrInput          `pulumi:"cooldownPeriod"`
	Enabled                       pulumi.BoolPtrInput         `pulumi:"enabled"`
	MaxReplicas                   pulumi.IntPtrInput          `pulumi:"maxReplicas"`
	MinReplicas                   pulumi.IntPtrInput          `pulumi:"minReplicas"`
	PollingInterval               pulumi.IntPtrInput          `pulumi:"pollingInterval"`
	RestoreToOriginalReplicaCount pulumi.BoolPtrInput         `pulumi:"restoreToOriginalReplicaCount"`
	ScaledObject                  KedaScaledObjectPtrInput    `pulumi:"scaledObject"`
	Triggers                      KedaTriggerArrayInput       `pulumi:"triggers"`
}

func (KedaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Keda)(nil)).Elem()
}

func (i KedaArgs) ToKedaOutput() KedaOutput {
	return i.ToKedaOutputWithContext(context.Background())
}

func (i KedaArgs) ToKedaOutputWithContext(ctx context.Context) KedaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KedaOutput)
}

func (i KedaArgs) ToKedaPtrOutput() KedaPtrOutput {
	return i.ToKedaPtrOutputWithContext(context.Background())
}

func (i KedaArgs) ToKedaPtrOutputWithContext(ctx context.Context) KedaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KedaOutput).ToKedaPtrOutputWithContext(ctx)
}

// KedaPtrInput is an input type that accepts KedaArgs, KedaPtr and KedaPtrOutput values.
// You can construct a concrete instance of `KedaPtrInput` via:
//
//	        KedaArgs{...}
//
//	or:
//
//	        nil
type KedaPtrInput interface {
	pulumi.Input

	ToKedaPtrOutput() KedaPtrOutput
	ToKedaPtrOutputWithContext(context.Context) KedaPtrOutput
}

type kedaPtrType KedaArgs

func KedaPtr(v *KedaArgs) KedaPtrInput {
	return (*kedaPtrType)(v)
}

func (*kedaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Keda)(nil)).Elem()
}

func (i *kedaPtrType) ToKedaPtrOutput() KedaPtrOutput {
	return i.ToKedaPtrOutputWithContext(context.Background())
}

func (i *kedaPtrType) ToKedaPtrOutputWithContext(ctx context.Context) KedaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KedaPtrOutput)
}

type KedaOutput struct{ *pulumi.OutputState }

func (KedaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Keda)(nil)).Elem()
}

func (o KedaOutput) ToKedaOutput() KedaOutput {
	return o
}

func (o KedaOutput) ToKedaOutputWithContext(ctx context.Context) KedaOutput {
	return o
}

func (o KedaOutput) ToKedaPtrOutput() KedaPtrOutput {
	return o.ToKedaPtrOutputWithContext(context.Background())
}

func (o KedaOutput) ToKedaPtrOutputWithContext(ctx context.Context) KedaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Keda) *Keda {
		return &v
	}).(KedaPtrOutput)
}

// apiVersion changes with keda 1.x vs 2.x: 2.x = keda.sh/v1alpha1, 1.x = keda.k8s.io/v1alpha1.
func (o KedaOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Keda) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KedaOutput) Behavior() AutoscalingBehaviorPtrOutput {
	return o.ApplyT(func(v Keda) *AutoscalingBehavior { return v.Behavior }).(AutoscalingBehaviorPtrOutput)
}

func (o KedaOutput) CooldownPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Keda) *int { return v.CooldownPeriod }).(pulumi.IntPtrOutput)
}

func (o KedaOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Keda) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o KedaOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Keda) *int { return v.MaxReplicas }).(pulumi.IntPtrOutput)
}

func (o KedaOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Keda) *int { return v.MinReplicas }).(pulumi.IntPtrOutput)
}

func (o KedaOutput) PollingInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Keda) *int { return v.PollingInterval }).(pulumi.IntPtrOutput)
}

func (o KedaOutput) RestoreToOriginalReplicaCount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Keda) *bool { return v.RestoreToOriginalReplicaCount }).(pulumi.BoolPtrOutput)
}

func (o KedaOutput) ScaledObject() KedaScaledObjectPtrOutput {
	return o.ApplyT(func(v Keda) *KedaScaledObject { return v.ScaledObject }).(KedaScaledObjectPtrOutput)
}

func (o KedaOutput) Triggers() KedaTriggerArrayOutput {
	return o.ApplyT(func(v Keda) []KedaTrigger { return v.Triggers }).(KedaTriggerArrayOutput)
}

type KedaPtrOutput struct{ *pulumi.OutputState }

func (KedaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Keda)(nil)).Elem()
}

func (o KedaPtrOutput) ToKedaPtrOutput() KedaPtrOutput {
	return o
}

func (o KedaPtrOutput) ToKedaPtrOutputWithContext(ctx context.Context) KedaPtrOutput {
	return o
}

func (o KedaPtrOutput) Elem() KedaOutput {
	return o.ApplyT(func(v *Keda) Keda {
		if v != nil {
			return *v
		}
		var ret Keda
		return ret
	}).(KedaOutput)
}

// apiVersion changes with keda 1.x vs 2.x: 2.x = keda.sh/v1alpha1, 1.x = keda.k8s.io/v1alpha1.
func (o KedaPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Keda) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

func (o KedaPtrOutput) Behavior() AutoscalingBehaviorPtrOutput {
	return o.ApplyT(func(v *Keda) *AutoscalingBehavior {
		if v == nil {
			return nil
		}
		return v.Behavior
	}).(AutoscalingBehaviorPtrOutput)
}

func (o KedaPtrOutput) CooldownPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Keda) *int {
		if v == nil {
			return nil
		}
		return v.CooldownPeriod
	}).(pulumi.IntPtrOutput)
}

func (o KedaPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Keda) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o KedaPtrOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Keda) *int {
		if v == nil {
			return nil
		}
		return v.MaxReplicas
	}).(pulumi.IntPtrOutput)
}

func (o KedaPtrOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Keda) *int {
		if v == nil {
			return nil
		}
		return v.MinReplicas
	}).(pulumi.IntPtrOutput)
}

func (o KedaPtrOutput) PollingInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Keda) *int {
		if v == nil {
			return nil
		}
		return v.PollingInterval
	}).(pulumi.IntPtrOutput)
}

func (o KedaPtrOutput) RestoreToOriginalReplicaCount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Keda) *bool {
		if v == nil {
			return nil
		}
		return v.RestoreToOriginalReplicaCount
	}).(pulumi.BoolPtrOutput)
}

func (o KedaPtrOutput) ScaledObject() KedaScaledObjectPtrOutput {
	return o.ApplyT(func(v *Keda) *KedaScaledObject {
		if v == nil {
			return nil
		}
		return v.ScaledObject
	}).(KedaScaledObjectPtrOutput)
}

func (o KedaPtrOutput) Triggers() KedaTriggerArrayOutput {
	return o.ApplyT(func(v *Keda) []KedaTrigger {
		if v == nil {
			return nil
		}
		return v.Triggers
	}).(KedaTriggerArrayOutput)
}

type KedaScaledObject struct {
	// Custom annotations for ScaledObject resource.
	Annotations map[string]string `pulumi:"annotations"`
}

// KedaScaledObjectInput is an input type that accepts KedaScaledObjectArgs and KedaScaledObjectOutput values.
// You can construct a concrete instance of `KedaScaledObjectInput` via:
//
//	KedaScaledObjectArgs{...}
type KedaScaledObjectInput interface {
	pulumi.Input

	ToKedaScaledObjectOutput() KedaScaledObjectOutput
	ToKedaScaledObjectOutputWithContext(context.Context) KedaScaledObjectOutput
}

type KedaScaledObjectArgs struct {
	// Custom annotations for ScaledObject resource.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
}

func (KedaScaledObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KedaScaledObject)(nil)).Elem()
}

func (i KedaScaledObjectArgs) ToKedaScaledObjectOutput() KedaScaledObjectOutput {
	return i.ToKedaScaledObjectOutputWithContext(context.Background())
}

func (i KedaScaledObjectArgs) ToKedaScaledObjectOutputWithContext(ctx context.Context) KedaScaledObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KedaScaledObjectOutput)
}

func (i KedaScaledObjectArgs) ToKedaScaledObjectPtrOutput() KedaScaledObjectPtrOutput {
	return i.ToKedaScaledObjectPtrOutputWithContext(context.Background())
}

func (i KedaScaledObjectArgs) ToKedaScaledObjectPtrOutputWithContext(ctx context.Context) KedaScaledObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KedaScaledObjectOutput).ToKedaScaledObjectPtrOutputWithContext(ctx)
}

// KedaScaledObjectPtrInput is an input type that accepts KedaScaledObjectArgs, KedaScaledObjectPtr and KedaScaledObjectPtrOutput values.
// You can construct a concrete instance of `KedaScaledObjectPtrInput` via:
//
//	        KedaScaledObjectArgs{...}
//
//	or:
//
//	        nil
type KedaScaledObjectPtrInput interface {
	pulumi.Input

	ToKedaScaledObjectPtrOutput() KedaScaledObjectPtrOutput
	ToKedaScaledObjectPtrOutputWithContext(context.Context) KedaScaledObjectPtrOutput
}

type kedaScaledObjectPtrType KedaScaledObjectArgs

func KedaScaledObjectPtr(v *KedaScaledObjectArgs) KedaScaledObjectPtrInput {
	return (*kedaScaledObjectPtrType)(v)
}

func (*kedaScaledObjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KedaScaledObject)(nil)).Elem()
}

func (i *kedaScaledObjectPtrType) ToKedaScaledObjectPtrOutput() KedaScaledObjectPtrOutput {
	return i.ToKedaScaledObjectPtrOutputWithContext(context.Background())
}

func (i *kedaScaledObjectPtrType) ToKedaScaledObjectPtrOutputWithContext(ctx context.Context) KedaScaledObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KedaScaledObjectPtrOutput)
}

type KedaScaledObjectOutput struct{ *pulumi.OutputState }

func (KedaScaledObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KedaScaledObject)(nil)).Elem()
}

func (o KedaScaledObjectOutput) ToKedaScaledObjectOutput() KedaScaledObjectOutput {
	return o
}

func (o KedaScaledObjectOutput) ToKedaScaledObjectOutputWithContext(ctx context.Context) KedaScaledObjectOutput {
	return o
}

func (o KedaScaledObjectOutput) ToKedaScaledObjectPtrOutput() KedaScaledObjectPtrOutput {
	return o.ToKedaScaledObjectPtrOutputWithContext(context.Background())
}

func (o KedaScaledObjectOutput) ToKedaScaledObjectPtrOutputWithContext(ctx context.Context) KedaScaledObjectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KedaScaledObject) *KedaScaledObject {
		return &v
	}).(KedaScaledObjectPtrOutput)
}

// Custom annotations for ScaledObject resource.
func (o KedaScaledObjectOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v KedaScaledObject) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

type KedaScaledObjectPtrOutput struct{ *pulumi.OutputState }

func (KedaScaledObjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KedaScaledObject)(nil)).Elem()
}

func (o KedaScaledObjectPtrOutput) ToKedaScaledObjectPtrOutput() KedaScaledObjectPtrOutput {
	return o
}

func (o KedaScaledObjectPtrOutput) ToKedaScaledObjectPtrOutputWithContext(ctx context.Context) KedaScaledObjectPtrOutput {
	return o
}

func (o KedaScaledObjectPtrOutput) Elem() KedaScaledObjectOutput {
	return o.ApplyT(func(v *KedaScaledObject) KedaScaledObject {
		if v != nil {
			return *v
		}
		var ret KedaScaledObject
		return ret
	}).(KedaScaledObjectOutput)
}

// Custom annotations for ScaledObject resource.
func (o KedaScaledObjectPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KedaScaledObject) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

type KedaTrigger struct {
	Metadata map[string]map[string]string `pulumi:"metadata"`
	Type     *string                      `pulumi:"type"`
}

// KedaTriggerInput is an input type that accepts KedaTriggerArgs and KedaTriggerOutput values.
// You can construct a concrete instance of `KedaTriggerInput` via:
//
//	KedaTriggerArgs{...}
type KedaTriggerInput interface {
	pulumi.Input

	ToKedaTriggerOutput() KedaTriggerOutput
	ToKedaTriggerOutputWithContext(context.Context) KedaTriggerOutput
}

type KedaTriggerArgs struct {
	Metadata pulumi.StringMapMapInput `pulumi:"metadata"`
	Type     pulumi.StringPtrInput    `pulumi:"type"`
}

func (KedaTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KedaTrigger)(nil)).Elem()
}

func (i KedaTriggerArgs) ToKedaTriggerOutput() KedaTriggerOutput {
	return i.ToKedaTriggerOutputWithContext(context.Background())
}

func (i KedaTriggerArgs) ToKedaTriggerOutputWithContext(ctx context.Context) KedaTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KedaTriggerOutput)
}

// KedaTriggerArrayInput is an input type that accepts KedaTriggerArray and KedaTriggerArrayOutput values.
// You can construct a concrete instance of `KedaTriggerArrayInput` via:
//
//	KedaTriggerArray{ KedaTriggerArgs{...} }
type KedaTriggerArrayInput interface {
	pulumi.Input

	ToKedaTriggerArrayOutput() KedaTriggerArrayOutput
	ToKedaTriggerArrayOutputWithContext(context.Context) KedaTriggerArrayOutput
}

type KedaTriggerArray []KedaTriggerInput

func (KedaTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KedaTrigger)(nil)).Elem()
}

func (i KedaTriggerArray) ToKedaTriggerArrayOutput() KedaTriggerArrayOutput {
	return i.ToKedaTriggerArrayOutputWithContext(context.Background())
}

func (i KedaTriggerArray) ToKedaTriggerArrayOutputWithContext(ctx context.Context) KedaTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KedaTriggerArrayOutput)
}

type KedaTriggerOutput struct{ *pulumi.OutputState }

func (KedaTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KedaTrigger)(nil)).Elem()
}

func (o KedaTriggerOutput) ToKedaTriggerOutput() KedaTriggerOutput {
	return o
}

func (o KedaTriggerOutput) ToKedaTriggerOutputWithContext(ctx context.Context) KedaTriggerOutput {
	return o
}

func (o KedaTriggerOutput) Metadata() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v KedaTrigger) map[string]map[string]string { return v.Metadata }).(pulumi.StringMapMapOutput)
}

func (o KedaTriggerOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KedaTrigger) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KedaTriggerArrayOutput struct{ *pulumi.OutputState }

func (KedaTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KedaTrigger)(nil)).Elem()
}

func (o KedaTriggerArrayOutput) ToKedaTriggerArrayOutput() KedaTriggerArrayOutput {
	return o
}

func (o KedaTriggerArrayOutput) ToKedaTriggerArrayOutputWithContext(ctx context.Context) KedaTriggerArrayOutput {
	return o
}

func (o KedaTriggerArrayOutput) Index(i pulumi.IntInput) KedaTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KedaTrigger {
		return vs[0].([]KedaTrigger)[vs[1].(int)]
	}).(KedaTriggerOutput)
}

// A Release is an instance of a chart running in a Kubernetes cluster.
// A Chart is a Helm package. It contains all of the resource definitions necessary to run an application, tool, or service inside of a Kubernetes cluster.
// Note - Helm Release is currently in BETA and may change. Use in production environment is discouraged.
type Release struct {
	// If set, installation process purges chart on fail. `skipAwait` will be disabled automatically if atomic is used.
	Atomic *bool `pulumi:"atomic"`
	// Chart name to be installed. A path may be used.
	Chart *string `pulumi:"chart"`
	// Allow deletion of new resources created in this upgrade when upgrade fails.
	CleanupOnFail *bool `pulumi:"cleanupOnFail"`
	// Create the namespace if it does not exist.
	CreateNamespace *bool `pulumi:"createNamespace"`
	// Run helm dependency update before installing the chart.
	DependencyUpdate *bool `pulumi:"dependencyUpdate"`
	// Add a custom description
	Description *string `pulumi:"description"`
	// Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored.
	Devel *bool `pulumi:"devel"`
	// Prevent CRD hooks from, running, but run other hooks.  See helm install --no-crd-hook
	DisableCRDHooks *bool `pulumi:"disableCRDHooks"`
	// If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
	DisableOpenapiValidation *bool `pulumi:"disableOpenapiValidation"`
	// Prevent hooks from running.
	DisableWebhooks *bool `pulumi:"disableWebhooks"`
	// Force resource update through delete/recreate if needed.
	ForceUpdate *bool `pulumi:"forceUpdate"`
	// Location of public keys used for verification. Used only if `verify` is true
	Keyring *string `pulumi:"keyring"`
	// Run helm lint when planning.
	Lint *bool `pulumi:"lint"`
	// The rendered manifests as JSON. Not yet supported.
	Manifest map[string]interface{} `pulumi:"manifest"`
	// Limit the maximum number of revisions saved per release. Use 0 for no limit.
	MaxHistory *int `pulumi:"maxHistory"`
	// Release name.
	Name *string `pulumi:"name"`
	// Namespace to install the release into.
	Namespace *string `pulumi:"namespace"`
	// Postrender command to run.
	Postrender *string `pulumi:"postrender"`
	// Perform pods restart during upgrade/rollback.
	RecreatePods *bool `pulumi:"recreatePods"`
	// If set, render subchart notes along with the parent.
	RenderSubchartNotes *bool `pulumi:"renderSubchartNotes"`
	// Re-use the given name, even if that name is already used. This is unsafe in production
	Replace *bool `pulumi:"replace"`
	// Specification defining the Helm chart repository to use.
	RepositoryOpts *RepositoryOpts `pulumi:"repositoryOpts"`
	// When upgrading, reset the values to the ones built into the chart.
	ResetValues *bool `pulumi:"resetValues"`
	// Names of resources created by the release grouped by "kind/version".
	ResourceNames map[string][]string `pulumi:"resourceNames"`
	// When upgrading, reuse the last release's values and merge in any overrides. If 'resetValues' is specified, this is ignored
	ReuseValues *bool `pulumi:"reuseValues"`
	// By default, the provider waits until all resources are in a ready state before marking the release as successful. Setting this to true will skip such await logic.
	SkipAwait *bool `pulumi:"skipAwait"`
	// If set, no CRDs will be installed. By default, CRDs are installed if not already present.
	SkipCrds *bool `pulumi:"skipCrds"`
	// Time in seconds to wait for any individual kubernetes operation.
	Timeout *int `pulumi:"timeout"`
	// List of assets (raw yaml files). Content is read and merged with values. Not yet supported.
	ValueYamlFiles []pulumi.AssetOrArchive `pulumi:"valueYamlFiles"`
	// Custom values set for the release.
	Values map[string]interface{} `pulumi:"values"`
	// Verify the package before installing it.
	Verify *bool `pulumi:"verify"`
	// Specify the exact chart version to install. If this is not specified, the latest version is installed.
	Version *string `pulumi:"version"`
	// Will wait until all Jobs have been completed before marking the release as successful. This is ignored if `skipAwait` is enabled.
	WaitForJobs *bool `pulumi:"waitForJobs"`
}

// ReleaseInput is an input type that accepts ReleaseArgs and ReleaseOutput values.
// You can construct a concrete instance of `ReleaseInput` via:
//
//	ReleaseArgs{...}
type ReleaseInput interface {
	pulumi.Input

	ToReleaseOutput() ReleaseOutput
	ToReleaseOutputWithContext(context.Context) ReleaseOutput
}

// A Release is an instance of a chart running in a Kubernetes cluster.
// A Chart is a Helm package. It contains all of the resource definitions necessary to run an application, tool, or service inside of a Kubernetes cluster.
// Note - Helm Release is currently in BETA and may change. Use in production environment is discouraged.
type ReleaseArgs struct {
	// If set, installation process purges chart on fail. `skipAwait` will be disabled automatically if atomic is used.
	Atomic pulumi.BoolPtrInput `pulumi:"atomic"`
	// Chart name to be installed. A path may be used.
	Chart pulumi.StringPtrInput `pulumi:"chart"`
	// Allow deletion of new resources created in this upgrade when upgrade fails.
	CleanupOnFail pulumi.BoolPtrInput `pulumi:"cleanupOnFail"`
	// Create the namespace if it does not exist.
	CreateNamespace pulumi.BoolPtrInput `pulumi:"createNamespace"`
	// Run helm dependency update before installing the chart.
	DependencyUpdate pulumi.BoolPtrInput `pulumi:"dependencyUpdate"`
	// Add a custom description
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored.
	Devel pulumi.BoolPtrInput `pulumi:"devel"`
	// Prevent CRD hooks from, running, but run other hooks.  See helm install --no-crd-hook
	DisableCRDHooks pulumi.BoolPtrInput `pulumi:"disableCRDHooks"`
	// If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
	DisableOpenapiValidation pulumi.BoolPtrInput `pulumi:"disableOpenapiValidation"`
	// Prevent hooks from running.
	DisableWebhooks pulumi.BoolPtrInput `pulumi:"disableWebhooks"`
	// Force resource update through delete/recreate if needed.
	ForceUpdate pulumi.BoolPtrInput `pulumi:"forceUpdate"`
	// Location of public keys used for verification. Used only if `verify` is true
	Keyring pulumi.StringPtrInput `pulumi:"keyring"`
	// Run helm lint when planning.
	Lint pulumi.BoolPtrInput `pulumi:"lint"`
	// The rendered manifests as JSON. Not yet supported.
	Manifest pulumi.MapInput `pulumi:"manifest"`
	// Limit the maximum number of revisions saved per release. Use 0 for no limit.
	MaxHistory pulumi.IntPtrInput `pulumi:"maxHistory"`
	// Release name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace to install the release into.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Postrender command to run.
	Postrender pulumi.StringPtrInput `pulumi:"postrender"`
	// Perform pods restart during upgrade/rollback.
	RecreatePods pulumi.BoolPtrInput `pulumi:"recreatePods"`
	// If set, render subchart notes along with the parent.
	RenderSubchartNotes pulumi.BoolPtrInput `pulumi:"renderSubchartNotes"`
	// Re-use the given name, even if that name is already used. This is unsafe in production
	Replace pulumi.BoolPtrInput `pulumi:"replace"`
	// Specification defining the Helm chart repository to use.
	RepositoryOpts RepositoryOptsPtrInput `pulumi:"repositoryOpts"`
	// When upgrading, reset the values to the ones built into the chart.
	ResetValues pulumi.BoolPtrInput `pulumi:"resetValues"`
	// Names of resources created by the release grouped by "kind/version".
	ResourceNames pulumi.StringArrayMapInput `pulumi:"resourceNames"`
	// When upgrading, reuse the last release's values and merge in any overrides. If 'resetValues' is specified, this is ignored
	ReuseValues pulumi.BoolPtrInput `pulumi:"reuseValues"`
	// By default, the provider waits until all resources are in a ready state before marking the release as successful. Setting this to true will skip such await logic.
	SkipAwait pulumi.BoolPtrInput `pulumi:"skipAwait"`
	// If set, no CRDs will be installed. By default, CRDs are installed if not already present.
	SkipCrds pulumi.BoolPtrInput `pulumi:"skipCrds"`
	// Time in seconds to wait for any individual kubernetes operation.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// List of assets (raw yaml files). Content is read and merged with values. Not yet supported.
	ValueYamlFiles pulumi.AssetOrArchiveArrayInput `pulumi:"valueYamlFiles"`
	// Custom values set for the release.
	Values pulumi.MapInput `pulumi:"values"`
	// Verify the package before installing it.
	Verify pulumi.BoolPtrInput `pulumi:"verify"`
	// Specify the exact chart version to install. If this is not specified, the latest version is installed.
	Version pulumi.StringPtrInput `pulumi:"version"`
	// Will wait until all Jobs have been completed before marking the release as successful. This is ignored if `skipAwait` is enabled.
	WaitForJobs pulumi.BoolPtrInput `pulumi:"waitForJobs"`
}

func (ReleaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Release)(nil)).Elem()
}

func (i ReleaseArgs) ToReleaseOutput() ReleaseOutput {
	return i.ToReleaseOutputWithContext(context.Background())
}

func (i ReleaseArgs) ToReleaseOutputWithContext(ctx context.Context) ReleaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseOutput)
}

func (i ReleaseArgs) ToReleasePtrOutput() ReleasePtrOutput {
	return i.ToReleasePtrOutputWithContext(context.Background())
}

func (i ReleaseArgs) ToReleasePtrOutputWithContext(ctx context.Context) ReleasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseOutput).ToReleasePtrOutputWithContext(ctx)
}

// ReleasePtrInput is an input type that accepts ReleaseArgs, ReleasePtr and ReleasePtrOutput values.
// You can construct a concrete instance of `ReleasePtrInput` via:
//
//	        ReleaseArgs{...}
//
//	or:
//
//	        nil
type ReleasePtrInput interface {
	pulumi.Input

	ToReleasePtrOutput() ReleasePtrOutput
	ToReleasePtrOutputWithContext(context.Context) ReleasePtrOutput
}

type releasePtrType ReleaseArgs

func ReleasePtr(v *ReleaseArgs) ReleasePtrInput {
	return (*releasePtrType)(v)
}

func (*releasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Release)(nil)).Elem()
}

func (i *releasePtrType) ToReleasePtrOutput() ReleasePtrOutput {
	return i.ToReleasePtrOutputWithContext(context.Background())
}

func (i *releasePtrType) ToReleasePtrOutputWithContext(ctx context.Context) ReleasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleasePtrOutput)
}

// A Release is an instance of a chart running in a Kubernetes cluster.
// A Chart is a Helm package. It contains all of the resource definitions necessary to run an application, tool, or service inside of a Kubernetes cluster.
// Note - Helm Release is currently in BETA and may change. Use in production environment is discouraged.
type ReleaseOutput struct{ *pulumi.OutputState }

func (ReleaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Release)(nil)).Elem()
}

func (o ReleaseOutput) ToReleaseOutput() ReleaseOutput {
	return o
}

func (o ReleaseOutput) ToReleaseOutputWithContext(ctx context.Context) ReleaseOutput {
	return o
}

func (o ReleaseOutput) ToReleasePtrOutput() ReleasePtrOutput {
	return o.ToReleasePtrOutputWithContext(context.Background())
}

func (o ReleaseOutput) ToReleasePtrOutputWithContext(ctx context.Context) ReleasePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Release) *Release {
		return &v
	}).(ReleasePtrOutput)
}

// If set, installation process purges chart on fail. `skipAwait` will be disabled automatically if atomic is used.
func (o ReleaseOutput) Atomic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.Atomic }).(pulumi.BoolPtrOutput)
}

// Chart name to be installed. A path may be used.
func (o ReleaseOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Release) *string { return v.Chart }).(pulumi.StringPtrOutput)
}

// Allow deletion of new resources created in this upgrade when upgrade fails.
func (o ReleaseOutput) CleanupOnFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.CleanupOnFail }).(pulumi.BoolPtrOutput)
}

// Create the namespace if it does not exist.
func (o ReleaseOutput) CreateNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.CreateNamespace }).(pulumi.BoolPtrOutput)
}

// Run helm dependency update before installing the chart.
func (o ReleaseOutput) DependencyUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.DependencyUpdate }).(pulumi.BoolPtrOutput)
}

// Add a custom description
func (o ReleaseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Release) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored.
func (o ReleaseOutput) Devel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.Devel }).(pulumi.BoolPtrOutput)
}

// Prevent CRD hooks from, running, but run other hooks.  See helm install --no-crd-hook
func (o ReleaseOutput) DisableCRDHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.DisableCRDHooks }).(pulumi.BoolPtrOutput)
}

// If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
func (o ReleaseOutput) DisableOpenapiValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.DisableOpenapiValidation }).(pulumi.BoolPtrOutput)
}

// Prevent hooks from running.
func (o ReleaseOutput) DisableWebhooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.DisableWebhooks }).(pulumi.BoolPtrOutput)
}

// Force resource update through delete/recreate if needed.
func (o ReleaseOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.ForceUpdate }).(pulumi.BoolPtrOutput)
}

// Location of public keys used for verification. Used only if `verify` is true
func (o ReleaseOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Release) *string { return v.Keyring }).(pulumi.StringPtrOutput)
}

// Run helm lint when planning.
func (o ReleaseOutput) Lint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.Lint }).(pulumi.BoolPtrOutput)
}

// The rendered manifests as JSON. Not yet supported.
func (o ReleaseOutput) Manifest() pulumi.MapOutput {
	return o.ApplyT(func(v Release) map[string]interface{} { return v.Manifest }).(pulumi.MapOutput)
}

// Limit the maximum number of revisions saved per release. Use 0 for no limit.
func (o ReleaseOutput) MaxHistory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Release) *int { return v.MaxHistory }).(pulumi.IntPtrOutput)
}

// Release name.
func (o ReleaseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Release) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace to install the release into.
func (o ReleaseOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Release) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Postrender command to run.
func (o ReleaseOutput) Postrender() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Release) *string { return v.Postrender }).(pulumi.StringPtrOutput)
}

// Perform pods restart during upgrade/rollback.
func (o ReleaseOutput) RecreatePods() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.RecreatePods }).(pulumi.BoolPtrOutput)
}

// If set, render subchart notes along with the parent.
func (o ReleaseOutput) RenderSubchartNotes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.RenderSubchartNotes }).(pulumi.BoolPtrOutput)
}

// Re-use the given name, even if that name is already used. This is unsafe in production
func (o ReleaseOutput) Replace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.Replace }).(pulumi.BoolPtrOutput)
}

// Specification defining the Helm chart repository to use.
func (o ReleaseOutput) RepositoryOpts() RepositoryOptsPtrOutput {
	return o.ApplyT(func(v Release) *RepositoryOpts { return v.RepositoryOpts }).(RepositoryOptsPtrOutput)
}

// When upgrading, reset the values to the ones built into the chart.
func (o ReleaseOutput) ResetValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.ResetValues }).(pulumi.BoolPtrOutput)
}

// Names of resources created by the release grouped by "kind/version".
func (o ReleaseOutput) ResourceNames() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v Release) map[string][]string { return v.ResourceNames }).(pulumi.StringArrayMapOutput)
}

// When upgrading, reuse the last release's values and merge in any overrides. If 'resetValues' is specified, this is ignored
func (o ReleaseOutput) ReuseValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.ReuseValues }).(pulumi.BoolPtrOutput)
}

// By default, the provider waits until all resources are in a ready state before marking the release as successful. Setting this to true will skip such await logic.
func (o ReleaseOutput) SkipAwait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.SkipAwait }).(pulumi.BoolPtrOutput)
}

// If set, no CRDs will be installed. By default, CRDs are installed if not already present.
func (o ReleaseOutput) SkipCrds() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.SkipCrds }).(pulumi.BoolPtrOutput)
}

// Time in seconds to wait for any individual kubernetes operation.
func (o ReleaseOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Release) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// List of assets (raw yaml files). Content is read and merged with values. Not yet supported.
func (o ReleaseOutput) ValueYamlFiles() pulumi.AssetOrArchiveArrayOutput {
	return o.ApplyT(func(v Release) []pulumi.AssetOrArchive { return v.ValueYamlFiles }).(pulumi.AssetOrArchiveArrayOutput)
}

// Custom values set for the release.
func (o ReleaseOutput) Values() pulumi.MapOutput {
	return o.ApplyT(func(v Release) map[string]interface{} { return v.Values }).(pulumi.MapOutput)
}

// Verify the package before installing it.
func (o ReleaseOutput) Verify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.Verify }).(pulumi.BoolPtrOutput)
}

// Specify the exact chart version to install. If this is not specified, the latest version is installed.
func (o ReleaseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Release) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// Will wait until all Jobs have been completed before marking the release as successful. This is ignored if `skipAwait` is enabled.
func (o ReleaseOutput) WaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Release) *bool { return v.WaitForJobs }).(pulumi.BoolPtrOutput)
}

type ReleasePtrOutput struct{ *pulumi.OutputState }

func (ReleasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Release)(nil)).Elem()
}

func (o ReleasePtrOutput) ToReleasePtrOutput() ReleasePtrOutput {
	return o
}

func (o ReleasePtrOutput) ToReleasePtrOutputWithContext(ctx context.Context) ReleasePtrOutput {
	return o
}

func (o ReleasePtrOutput) Elem() ReleaseOutput {
	return o.ApplyT(func(v *Release) Release {
		if v != nil {
			return *v
		}
		var ret Release
		return ret
	}).(ReleaseOutput)
}

// If set, installation process purges chart on fail. `skipAwait` will be disabled automatically if atomic is used.
func (o ReleasePtrOutput) Atomic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.Atomic
	}).(pulumi.BoolPtrOutput)
}

// Chart name to be installed. A path may be used.
func (o ReleasePtrOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) *string {
		if v == nil {
			return nil
		}
		return v.Chart
	}).(pulumi.StringPtrOutput)
}

// Allow deletion of new resources created in this upgrade when upgrade fails.
func (o ReleasePtrOutput) CleanupOnFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.CleanupOnFail
	}).(pulumi.BoolPtrOutput)
}

// Create the namespace if it does not exist.
func (o ReleasePtrOutput) CreateNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.CreateNamespace
	}).(pulumi.BoolPtrOutput)
}

// Run helm dependency update before installing the chart.
func (o ReleasePtrOutput) DependencyUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.DependencyUpdate
	}).(pulumi.BoolPtrOutput)
}

// Add a custom description
func (o ReleasePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored.
func (o ReleasePtrOutput) Devel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.Devel
	}).(pulumi.BoolPtrOutput)
}

// Prevent CRD hooks from, running, but run other hooks.  See helm install --no-crd-hook
func (o ReleasePtrOutput) DisableCRDHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.DisableCRDHooks
	}).(pulumi.BoolPtrOutput)
}

// If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
func (o ReleasePtrOutput) DisableOpenapiValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.DisableOpenapiValidation
	}).(pulumi.BoolPtrOutput)
}

// Prevent hooks from running.
func (o ReleasePtrOutput) DisableWebhooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWebhooks
	}).(pulumi.BoolPtrOutput)
}

// Force resource update through delete/recreate if needed.
func (o ReleasePtrOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.ForceUpdate
	}).(pulumi.BoolPtrOutput)
}

// Location of public keys used for verification. Used only if `verify` is true
func (o ReleasePtrOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) *string {
		if v == nil {
			return nil
		}
		return v.Keyring
	}).(pulumi.StringPtrOutput)
}

// Run helm lint when planning.
func (o ReleasePtrOutput) Lint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.Lint
	}).(pulumi.BoolPtrOutput)
}

// The rendered manifests as JSON. Not yet supported.
func (o ReleasePtrOutput) Manifest() pulumi.MapOutput {
	return o.ApplyT(func(v *Release) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Manifest
	}).(pulumi.MapOutput)
}

// Limit the maximum number of revisions saved per release. Use 0 for no limit.
func (o ReleasePtrOutput) MaxHistory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Release) *int {
		if v == nil {
			return nil
		}
		return v.MaxHistory
	}).(pulumi.IntPtrOutput)
}

// Release name.
func (o ReleasePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace to install the release into.
func (o ReleasePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Postrender command to run.
func (o ReleasePtrOutput) Postrender() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) *string {
		if v == nil {
			return nil
		}
		return v.Postrender
	}).(pulumi.StringPtrOutput)
}

// Perform pods restart during upgrade/rollback.
func (o ReleasePtrOutput) RecreatePods() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.RecreatePods
	}).(pulumi.BoolPtrOutput)
}

// If set, render subchart notes along with the parent.
func (o ReleasePtrOutput) RenderSubchartNotes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.RenderSubchartNotes
	}).(pulumi.BoolPtrOutput)
}

// Re-use the given name, even if that name is already used. This is unsafe in production
func (o ReleasePtrOutput) Replace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.Replace
	}).(pulumi.BoolPtrOutput)
}

// Specification defining the Helm chart repository to use.
func (o ReleasePtrOutput) RepositoryOpts() RepositoryOptsPtrOutput {
	return o.ApplyT(func(v *Release) *RepositoryOpts {
		if v == nil {
			return nil
		}
		return v.RepositoryOpts
	}).(RepositoryOptsPtrOutput)
}

// When upgrading, reset the values to the ones built into the chart.
func (o ReleasePtrOutput) ResetValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.ResetValues
	}).(pulumi.BoolPtrOutput)
}

// Names of resources created by the release grouped by "kind/version".
func (o ReleasePtrOutput) ResourceNames() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *Release) map[string][]string {
		if v == nil {
			return nil
		}
		return v.ResourceNames
	}).(pulumi.StringArrayMapOutput)
}

// When upgrading, reuse the last release's values and merge in any overrides. If 'resetValues' is specified, this is ignored
func (o ReleasePtrOutput) ReuseValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.ReuseValues
	}).(pulumi.BoolPtrOutput)
}

// By default, the provider waits until all resources are in a ready state before marking the release as successful. Setting this to true will skip such await logic.
func (o ReleasePtrOutput) SkipAwait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.SkipAwait
	}).(pulumi.BoolPtrOutput)
}

// If set, no CRDs will be installed. By default, CRDs are installed if not already present.
func (o ReleasePtrOutput) SkipCrds() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.SkipCrds
	}).(pulumi.BoolPtrOutput)
}

// Time in seconds to wait for any individual kubernetes operation.
func (o ReleasePtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Release) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// List of assets (raw yaml files). Content is read and merged with values. Not yet supported.
func (o ReleasePtrOutput) ValueYamlFiles() pulumi.AssetOrArchiveArrayOutput {
	return o.ApplyT(func(v *Release) []pulumi.AssetOrArchive {
		if v == nil {
			return nil
		}
		return v.ValueYamlFiles
	}).(pulumi.AssetOrArchiveArrayOutput)
}

// Custom values set for the release.
func (o ReleasePtrOutput) Values() pulumi.MapOutput {
	return o.ApplyT(func(v *Release) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.MapOutput)
}

// Verify the package before installing it.
func (o ReleasePtrOutput) Verify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.Verify
	}).(pulumi.BoolPtrOutput)
}

// Specify the exact chart version to install. If this is not specified, the latest version is installed.
func (o ReleasePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Will wait until all Jobs have been completed before marking the release as successful. This is ignored if `skipAwait` is enabled.
func (o ReleasePtrOutput) WaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Release) *bool {
		if v == nil {
			return nil
		}
		return v.WaitForJobs
	}).(pulumi.BoolPtrOutput)
}

type ReleaseStatus struct {
	// The version number of the application being deployed.
	AppVersion string `pulumi:"appVersion"`
	// The name of the chart.
	Chart string `pulumi:"chart"`
	// Name is the name of the release.
	Name string `pulumi:"name"`
	// Namespace is the kubernetes namespace of the release.
	Namespace string `pulumi:"namespace"`
	// Version is an int32 which represents the version of the release.
	Revision int `pulumi:"revision"`
	// Status of the release.
	Status string `pulumi:"status"`
	// A SemVer 2 conformant version string of the chart.
	Version string `pulumi:"version"`
}

// ReleaseStatusInput is an input type that accepts ReleaseStatusArgs and ReleaseStatusOutput values.
// You can construct a concrete instance of `ReleaseStatusInput` via:
//
//	ReleaseStatusArgs{...}
type ReleaseStatusInput interface {
	pulumi.Input

	ToReleaseStatusOutput() ReleaseStatusOutput
	ToReleaseStatusOutputWithContext(context.Context) ReleaseStatusOutput
}

type ReleaseStatusArgs struct {
	// The version number of the application being deployed.
	AppVersion pulumi.StringInput `pulumi:"appVersion"`
	// The name of the chart.
	Chart pulumi.StringInput `pulumi:"chart"`
	// Name is the name of the release.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace is the kubernetes namespace of the release.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// Version is an int32 which represents the version of the release.
	Revision pulumi.IntInput `pulumi:"revision"`
	// Status of the release.
	Status pulumi.StringInput `pulumi:"status"`
	// A SemVer 2 conformant version string of the chart.
	Version pulumi.StringInput `pulumi:"version"`
}

func (ReleaseStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseStatus)(nil)).Elem()
}

func (i ReleaseStatusArgs) ToReleaseStatusOutput() ReleaseStatusOutput {
	return i.ToReleaseStatusOutputWithContext(context.Background())
}

func (i ReleaseStatusArgs) ToReleaseStatusOutputWithContext(ctx context.Context) ReleaseStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseStatusOutput)
}

type ReleaseStatusOutput struct{ *pulumi.OutputState }

func (ReleaseStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseStatus)(nil)).Elem()
}

func (o ReleaseStatusOutput) ToReleaseStatusOutput() ReleaseStatusOutput {
	return o
}

func (o ReleaseStatusOutput) ToReleaseStatusOutputWithContext(ctx context.Context) ReleaseStatusOutput {
	return o
}

// The version number of the application being deployed.
func (o ReleaseStatusOutput) AppVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseStatus) string { return v.AppVersion }).(pulumi.StringOutput)
}

// The name of the chart.
func (o ReleaseStatusOutput) Chart() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseStatus) string { return v.Chart }).(pulumi.StringOutput)
}

// Name is the name of the release.
func (o ReleaseStatusOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseStatus) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace is the kubernetes namespace of the release.
func (o ReleaseStatusOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseStatus) string { return v.Namespace }).(pulumi.StringOutput)
}

// Version is an int32 which represents the version of the release.
func (o ReleaseStatusOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func(v ReleaseStatus) int { return v.Revision }).(pulumi.IntOutput)
}

// Status of the release.
func (o ReleaseStatusOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseStatus) string { return v.Status }).(pulumi.StringOutput)
}

// A SemVer 2 conformant version string of the chart.
func (o ReleaseStatusOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseStatus) string { return v.Version }).(pulumi.StringOutput)
}

// Specification defining the Helm chart repository to use.
type RepositoryOpts struct {
	// The Repository's CA File
	CaFile *string `pulumi:"caFile"`
	// The repository's cert file
	CertFile *string `pulumi:"certFile"`
	// The repository's cert key file
	KeyFile *string `pulumi:"keyFile"`
	// Password for HTTP basic authentication
	Password *string `pulumi:"password"`
	// Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
	Repo *string `pulumi:"repo"`
	// Username for HTTP basic authentication
	Username *string `pulumi:"username"`
}

// RepositoryOptsInput is an input type that accepts RepositoryOptsArgs and RepositoryOptsOutput values.
// You can construct a concrete instance of `RepositoryOptsInput` via:
//
//	RepositoryOptsArgs{...}
type RepositoryOptsInput interface {
	pulumi.Input

	ToRepositoryOptsOutput() RepositoryOptsOutput
	ToRepositoryOptsOutputWithContext(context.Context) RepositoryOptsOutput
}

// Specification defining the Helm chart repository to use.
type RepositoryOptsArgs struct {
	// The Repository's CA File
	CaFile pulumi.StringPtrInput `pulumi:"caFile"`
	// The repository's cert file
	CertFile pulumi.StringPtrInput `pulumi:"certFile"`
	// The repository's cert key file
	KeyFile pulumi.StringPtrInput `pulumi:"keyFile"`
	// Password for HTTP basic authentication
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
	Repo pulumi.StringPtrInput `pulumi:"repo"`
	// Username for HTTP basic authentication
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (RepositoryOptsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryOpts)(nil)).Elem()
}

func (i RepositoryOptsArgs) ToRepositoryOptsOutput() RepositoryOptsOutput {
	return i.ToRepositoryOptsOutputWithContext(context.Background())
}

func (i RepositoryOptsArgs) ToRepositoryOptsOutputWithContext(ctx context.Context) RepositoryOptsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryOptsOutput)
}

func (i RepositoryOptsArgs) ToRepositoryOptsPtrOutput() RepositoryOptsPtrOutput {
	return i.ToRepositoryOptsPtrOutputWithContext(context.Background())
}

func (i RepositoryOptsArgs) ToRepositoryOptsPtrOutputWithContext(ctx context.Context) RepositoryOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryOptsOutput).ToRepositoryOptsPtrOutputWithContext(ctx)
}

// RepositoryOptsPtrInput is an input type that accepts RepositoryOptsArgs, RepositoryOptsPtr and RepositoryOptsPtrOutput values.
// You can construct a concrete instance of `RepositoryOptsPtrInput` via:
//
//	        RepositoryOptsArgs{...}
//
//	or:
//
//	        nil
type RepositoryOptsPtrInput interface {
	pulumi.Input

	ToRepositoryOptsPtrOutput() RepositoryOptsPtrOutput
	ToRepositoryOptsPtrOutputWithContext(context.Context) RepositoryOptsPtrOutput
}

type repositoryOptsPtrType RepositoryOptsArgs

func RepositoryOptsPtr(v *RepositoryOptsArgs) RepositoryOptsPtrInput {
	return (*repositoryOptsPtrType)(v)
}

func (*repositoryOptsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryOpts)(nil)).Elem()
}

func (i *repositoryOptsPtrType) ToRepositoryOptsPtrOutput() RepositoryOptsPtrOutput {
	return i.ToRepositoryOptsPtrOutputWithContext(context.Background())
}

func (i *repositoryOptsPtrType) ToRepositoryOptsPtrOutputWithContext(ctx context.Context) RepositoryOptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryOptsPtrOutput)
}

// Specification defining the Helm chart repository to use.
type RepositoryOptsOutput struct{ *pulumi.OutputState }

func (RepositoryOptsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryOpts)(nil)).Elem()
}

func (o RepositoryOptsOutput) ToRepositoryOptsOutput() RepositoryOptsOutput {
	return o
}

func (o RepositoryOptsOutput) ToRepositoryOptsOutputWithContext(ctx context.Context) RepositoryOptsOutput {
	return o
}

func (o RepositoryOptsOutput) ToRepositoryOptsPtrOutput() RepositoryOptsPtrOutput {
	return o.ToRepositoryOptsPtrOutputWithContext(context.Background())
}

func (o RepositoryOptsOutput) ToRepositoryOptsPtrOutputWithContext(ctx context.Context) RepositoryOptsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryOpts) *RepositoryOpts {
		return &v
	}).(RepositoryOptsPtrOutput)
}

// The Repository's CA File
func (o RepositoryOptsOutput) CaFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryOpts) *string { return v.CaFile }).(pulumi.StringPtrOutput)
}

// The repository's cert file
func (o RepositoryOptsOutput) CertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryOpts) *string { return v.CertFile }).(pulumi.StringPtrOutput)
}

// The repository's cert key file
func (o RepositoryOptsOutput) KeyFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryOpts) *string { return v.KeyFile }).(pulumi.StringPtrOutput)
}

// Password for HTTP basic authentication
func (o RepositoryOptsOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryOpts) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
func (o RepositoryOptsOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryOpts) *string { return v.Repo }).(pulumi.StringPtrOutput)
}

// Username for HTTP basic authentication
func (o RepositoryOptsOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryOpts) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type RepositoryOptsPtrOutput struct{ *pulumi.OutputState }

func (RepositoryOptsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryOpts)(nil)).Elem()
}

func (o RepositoryOptsPtrOutput) ToRepositoryOptsPtrOutput() RepositoryOptsPtrOutput {
	return o
}

func (o RepositoryOptsPtrOutput) ToRepositoryOptsPtrOutputWithContext(ctx context.Context) RepositoryOptsPtrOutput {
	return o
}

func (o RepositoryOptsPtrOutput) Elem() RepositoryOptsOutput {
	return o.ApplyT(func(v *RepositoryOpts) RepositoryOpts {
		if v != nil {
			return *v
		}
		var ret RepositoryOpts
		return ret
	}).(RepositoryOptsOutput)
}

// The Repository's CA File
func (o RepositoryOptsPtrOutput) CaFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryOpts) *string {
		if v == nil {
			return nil
		}
		return v.CaFile
	}).(pulumi.StringPtrOutput)
}

// The repository's cert file
func (o RepositoryOptsPtrOutput) CertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryOpts) *string {
		if v == nil {
			return nil
		}
		return v.CertFile
	}).(pulumi.StringPtrOutput)
}

// The repository's cert key file
func (o RepositoryOptsPtrOutput) KeyFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryOpts) *string {
		if v == nil {
			return nil
		}
		return v.KeyFile
	}).(pulumi.StringPtrOutput)
}

// Password for HTTP basic authentication
func (o RepositoryOptsPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryOpts) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
func (o RepositoryOptsPtrOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryOpts) *string {
		if v == nil {
			return nil
		}
		return v.Repo
	}).(pulumi.StringPtrOutput)
}

// Username for HTTP basic authentication
func (o RepositoryOptsPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryOpts) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingInput)(nil)).Elem(), AutoscalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingPtrInput)(nil)).Elem(), AutoscalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingBehaviorInput)(nil)).Elem(), AutoscalingBehaviorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingBehaviorPtrInput)(nil)).Elem(), AutoscalingBehaviorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingBehaviorScalingInput)(nil)).Elem(), AutoscalingBehaviorScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingBehaviorScalingPtrInput)(nil)).Elem(), AutoscalingBehaviorScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingBehaviorScalingPolicyInput)(nil)).Elem(), AutoscalingBehaviorScalingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingBehaviorScalingPolicyArrayInput)(nil)).Elem(), AutoscalingBehaviorScalingPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingTemplateInput)(nil)).Elem(), AutoscalingTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingTemplateArrayInput)(nil)).Elem(), AutoscalingTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingTemplatePodsInput)(nil)).Elem(), AutoscalingTemplatePodsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingTemplatePodsPtrInput)(nil)).Elem(), AutoscalingTemplatePodsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingTemplatePodsMetricInput)(nil)).Elem(), AutoscalingTemplatePodsMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingTemplatePodsMetricPtrInput)(nil)).Elem(), AutoscalingTemplatePodsMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingTemplatePodsTargetInput)(nil)).Elem(), AutoscalingTemplatePodsTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingTemplatePodsTargetPtrInput)(nil)).Elem(), AutoscalingTemplatePodsTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContollerAdmissionWebhooksInput)(nil)).Elem(), ContollerAdmissionWebhooksArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContollerAdmissionWebhooksPtrInput)(nil)).Elem(), ContollerAdmissionWebhooksArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerInput)(nil)).Elem(), ControllerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerPtrInput)(nil)).Elem(), ControllerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerAdmissionWebhooksCreateSecretJobInput)(nil)).Elem(), ControllerAdmissionWebhooksCreateSecretJobArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerAdmissionWebhooksCreateSecretJobPtrInput)(nil)).Elem(), ControllerAdmissionWebhooksCreateSecretJobArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerAdmissionWebhooksPatchInput)(nil)).Elem(), ControllerAdmissionWebhooksPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerAdmissionWebhooksPatchPtrInput)(nil)).Elem(), ControllerAdmissionWebhooksPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerAdmissionWebhooksPatchWebhbookJobInput)(nil)).Elem(), ControllerAdmissionWebhooksPatchWebhbookJobArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerAdmissionWebhooksPatchWebhbookJobPtrInput)(nil)).Elem(), ControllerAdmissionWebhooksPatchWebhbookJobArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerAdmissionWebhooksServiceInput)(nil)).Elem(), ControllerAdmissionWebhooksServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerAdmissionWebhooksServicePtrInput)(nil)).Elem(), ControllerAdmissionWebhooksServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerCustomTemplateInput)(nil)).Elem(), ControllerCustomTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerCustomTemplatePtrInput)(nil)).Elem(), ControllerCustomTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerDefaultBackendInput)(nil)).Elem(), ControllerDefaultBackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerDefaultBackendPtrInput)(nil)).Elem(), ControllerDefaultBackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerDefaultBackendServiceInput)(nil)).Elem(), ControllerDefaultBackendServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerDefaultBackendServicePtrInput)(nil)).Elem(), ControllerDefaultBackendServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerHostPortInput)(nil)).Elem(), ControllerHostPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerHostPortPtrInput)(nil)).Elem(), ControllerHostPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerHostPortPortsInput)(nil)).Elem(), ControllerHostPortPortsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerHostPortPortsPtrInput)(nil)).Elem(), ControllerHostPortPortsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerImageInput)(nil)).Elem(), ControllerImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerImagePtrInput)(nil)).Elem(), ControllerImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerIngressClassResourceInput)(nil)).Elem(), ControllerIngressClassResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerIngressClassResourcePtrInput)(nil)).Elem(), ControllerIngressClassResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerMetricsInput)(nil)).Elem(), ControllerMetricsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerMetricsPtrInput)(nil)).Elem(), ControllerMetricsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerMetricsPrometheusRulesInput)(nil)).Elem(), ControllerMetricsPrometheusRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerMetricsPrometheusRulesPtrInput)(nil)).Elem(), ControllerMetricsPrometheusRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerMetricsServiceInput)(nil)).Elem(), ControllerMetricsServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerMetricsServicePtrInput)(nil)).Elem(), ControllerMetricsServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerMetricsServiceMonitorInput)(nil)).Elem(), ControllerMetricsServiceMonitorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerMetricsServiceMonitorPtrInput)(nil)).Elem(), ControllerMetricsServiceMonitorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerPodSecurityPolicyInput)(nil)).Elem(), ControllerPodSecurityPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerPodSecurityPolicyPtrInput)(nil)).Elem(), ControllerPodSecurityPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerPortInput)(nil)).Elem(), ControllerPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerPortPtrInput)(nil)).Elem(), ControllerPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerPublishServiceInput)(nil)).Elem(), ControllerPublishServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerPublishServicePtrInput)(nil)).Elem(), ControllerPublishServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerRBACInput)(nil)).Elem(), ControllerRBACArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerRBACPtrInput)(nil)).Elem(), ControllerRBACArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerRollingUpdateInput)(nil)).Elem(), ControllerRollingUpdateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerRollingUpdatePtrInput)(nil)).Elem(), ControllerRollingUpdateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerScopeInput)(nil)).Elem(), ControllerScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerScopePtrInput)(nil)).Elem(), ControllerScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerServiceInput)(nil)).Elem(), ControllerServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerServicePtrInput)(nil)).Elem(), ControllerServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerServiceAccountInput)(nil)).Elem(), ControllerServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerServiceAccountPtrInput)(nil)).Elem(), ControllerServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerServiceInternalInput)(nil)).Elem(), ControllerServiceInternalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerServiceInternalPtrInput)(nil)).Elem(), ControllerServiceInternalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerServiceNodePortsInput)(nil)).Elem(), ControllerServiceNodePortsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerServiceNodePortsPtrInput)(nil)).Elem(), ControllerServiceNodePortsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerTcpInput)(nil)).Elem(), ControllerTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerTcpPtrInput)(nil)).Elem(), ControllerTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerUdpInput)(nil)).Elem(), ControllerUdpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerUdpPtrInput)(nil)).Elem(), ControllerUdpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerUpdateStrategyInput)(nil)).Elem(), ControllerUpdateStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ControllerUpdateStrategyPtrInput)(nil)).Elem(), ControllerUpdateStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KedaInput)(nil)).Elem(), KedaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KedaPtrInput)(nil)).Elem(), KedaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KedaScaledObjectInput)(nil)).Elem(), KedaScaledObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KedaScaledObjectPtrInput)(nil)).Elem(), KedaScaledObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KedaTriggerInput)(nil)).Elem(), KedaTriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KedaTriggerArrayInput)(nil)).Elem(), KedaTriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseInput)(nil)).Elem(), ReleaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleasePtrInput)(nil)).Elem(), ReleaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseStatusInput)(nil)).Elem(), ReleaseStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryOptsInput)(nil)).Elem(), RepositoryOptsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryOptsPtrInput)(nil)).Elem(), RepositoryOptsArgs{})
	pulumi.RegisterOutputType(AutoscalingOutput{})
	pulumi.RegisterOutputType(AutoscalingPtrOutput{})
	pulumi.RegisterOutputType(AutoscalingBehaviorOutput{})
	pulumi.RegisterOutputType(AutoscalingBehaviorPtrOutput{})
	pulumi.RegisterOutputType(AutoscalingBehaviorScalingOutput{})
	pulumi.RegisterOutputType(AutoscalingBehaviorScalingPtrOutput{})
	pulumi.RegisterOutputType(AutoscalingBehaviorScalingPolicyOutput{})
	pulumi.RegisterOutputType(AutoscalingBehaviorScalingPolicyArrayOutput{})
	pulumi.RegisterOutputType(AutoscalingTemplateOutput{})
	pulumi.RegisterOutputType(AutoscalingTemplateArrayOutput{})
	pulumi.RegisterOutputType(AutoscalingTemplatePodsOutput{})
	pulumi.RegisterOutputType(AutoscalingTemplatePodsPtrOutput{})
	pulumi.RegisterOutputType(AutoscalingTemplatePodsMetricOutput{})
	pulumi.RegisterOutputType(AutoscalingTemplatePodsMetricPtrOutput{})
	pulumi.RegisterOutputType(AutoscalingTemplatePodsTargetOutput{})
	pulumi.RegisterOutputType(AutoscalingTemplatePodsTargetPtrOutput{})
	pulumi.RegisterOutputType(ContollerAdmissionWebhooksOutput{})
	pulumi.RegisterOutputType(ContollerAdmissionWebhooksPtrOutput{})
	pulumi.RegisterOutputType(ControllerOutput{})
	pulumi.RegisterOutputType(ControllerPtrOutput{})
	pulumi.RegisterOutputType(ControllerAdmissionWebhooksCreateSecretJobOutput{})
	pulumi.RegisterOutputType(ControllerAdmissionWebhooksCreateSecretJobPtrOutput{})
	pulumi.RegisterOutputType(ControllerAdmissionWebhooksPatchOutput{})
	pulumi.RegisterOutputType(ControllerAdmissionWebhooksPatchPtrOutput{})
	pulumi.RegisterOutputType(ControllerAdmissionWebhooksPatchWebhbookJobOutput{})
	pulumi.RegisterOutputType(ControllerAdmissionWebhooksPatchWebhbookJobPtrOutput{})
	pulumi.RegisterOutputType(ControllerAdmissionWebhooksServiceOutput{})
	pulumi.RegisterOutputType(ControllerAdmissionWebhooksServicePtrOutput{})
	pulumi.RegisterOutputType(ControllerCustomTemplateOutput{})
	pulumi.RegisterOutputType(ControllerCustomTemplatePtrOutput{})
	pulumi.RegisterOutputType(ControllerDefaultBackendOutput{})
	pulumi.RegisterOutputType(ControllerDefaultBackendPtrOutput{})
	pulumi.RegisterOutputType(ControllerDefaultBackendServiceOutput{})
	pulumi.RegisterOutputType(ControllerDefaultBackendServicePtrOutput{})
	pulumi.RegisterOutputType(ControllerHostPortOutput{})
	pulumi.RegisterOutputType(ControllerHostPortPtrOutput{})
	pulumi.RegisterOutputType(ControllerHostPortPortsOutput{})
	pulumi.RegisterOutputType(ControllerHostPortPortsPtrOutput{})
	pulumi.RegisterOutputType(ControllerImageOutput{})
	pulumi.RegisterOutputType(ControllerImagePtrOutput{})
	pulumi.RegisterOutputType(ControllerIngressClassResourceOutput{})
	pulumi.RegisterOutputType(ControllerIngressClassResourcePtrOutput{})
	pulumi.RegisterOutputType(ControllerMetricsOutput{})
	pulumi.RegisterOutputType(ControllerMetricsPtrOutput{})
	pulumi.RegisterOutputType(ControllerMetricsPrometheusRulesOutput{})
	pulumi.RegisterOutputType(ControllerMetricsPrometheusRulesPtrOutput{})
	pulumi.RegisterOutputType(ControllerMetricsServiceOutput{})
	pulumi.RegisterOutputType(ControllerMetricsServicePtrOutput{})
	pulumi.RegisterOutputType(ControllerMetricsServiceMonitorOutput{})
	pulumi.RegisterOutputType(ControllerMetricsServiceMonitorPtrOutput{})
	pulumi.RegisterOutputType(ControllerPodSecurityPolicyOutput{})
	pulumi.RegisterOutputType(ControllerPodSecurityPolicyPtrOutput{})
	pulumi.RegisterOutputType(ControllerPortOutput{})
	pulumi.RegisterOutputType(ControllerPortPtrOutput{})
	pulumi.RegisterOutputType(ControllerPublishServiceOutput{})
	pulumi.RegisterOutputType(ControllerPublishServicePtrOutput{})
	pulumi.RegisterOutputType(ControllerRBACOutput{})
	pulumi.RegisterOutputType(ControllerRBACPtrOutput{})
	pulumi.RegisterOutputType(ControllerRollingUpdateOutput{})
	pulumi.RegisterOutputType(ControllerRollingUpdatePtrOutput{})
	pulumi.RegisterOutputType(ControllerScopeOutput{})
	pulumi.RegisterOutputType(ControllerScopePtrOutput{})
	pulumi.RegisterOutputType(ControllerServiceOutput{})
	pulumi.RegisterOutputType(ControllerServicePtrOutput{})
	pulumi.RegisterOutputType(ControllerServiceAccountOutput{})
	pulumi.RegisterOutputType(ControllerServiceAccountPtrOutput{})
	pulumi.RegisterOutputType(ControllerServiceInternalOutput{})
	pulumi.RegisterOutputType(ControllerServiceInternalPtrOutput{})
	pulumi.RegisterOutputType(ControllerServiceNodePortsOutput{})
	pulumi.RegisterOutputType(ControllerServiceNodePortsPtrOutput{})
	pulumi.RegisterOutputType(ControllerTcpOutput{})
	pulumi.RegisterOutputType(ControllerTcpPtrOutput{})
	pulumi.RegisterOutputType(ControllerUdpOutput{})
	pulumi.RegisterOutputType(ControllerUdpPtrOutput{})
	pulumi.RegisterOutputType(ControllerUpdateStrategyOutput{})
	pulumi.RegisterOutputType(ControllerUpdateStrategyPtrOutput{})
	pulumi.RegisterOutputType(KedaOutput{})
	pulumi.RegisterOutputType(KedaPtrOutput{})
	pulumi.RegisterOutputType(KedaScaledObjectOutput{})
	pulumi.RegisterOutputType(KedaScaledObjectPtrOutput{})
	pulumi.RegisterOutputType(KedaTriggerOutput{})
	pulumi.RegisterOutputType(KedaTriggerArrayOutput{})
	pulumi.RegisterOutputType(ReleaseOutput{})
	pulumi.RegisterOutputType(ReleasePtrOutput{})
	pulumi.RegisterOutputType(ReleaseStatusOutput{})
	pulumi.RegisterOutputType(RepositoryOptsOutput{})
	pulumi.RegisterOutputType(RepositoryOptsPtrOutput{})
}
