# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
import pulumi_kubernetes

__all__ = [
    'AutoscalingBehaviorScalingPolicyArgs',
    'AutoscalingBehaviorScalingArgs',
    'AutoscalingBehaviorArgs',
    'AutoscalingTemplatePodsMetricArgs',
    'AutoscalingTemplatePodsTargetArgs',
    'AutoscalingTemplatePodsArgs',
    'AutoscalingTemplateArgs',
    'AutoscalingArgs',
    'ContollerAdmissionWebhooksArgs',
    'ControllerAdmissionWebhooksCreateSecretJobArgs',
    'ControllerAdmissionWebhooksPatchWebhbookJobArgs',
    'ControllerAdmissionWebhooksPatchArgs',
    'ControllerAdmissionWebhooksServiceArgs',
    'ControllerCustomTemplateArgs',
    'ControllerDefaultBackendServiceArgs',
    'ControllerDefaultBackendArgs',
    'ControllerHostPortPortsArgs',
    'ControllerHostPortArgs',
    'ControllerImageArgs',
    'ControllerIngressClassResourceArgs',
    'ControllerMetricsPrometheusRulesArgs',
    'ControllerMetricsServiceMonitorArgs',
    'ControllerMetricsServiceArgs',
    'ControllerMetricsArgs',
    'ControllerPodSecurityPolicyArgs',
    'ControllerPortArgs',
    'ControllerPublishServiceArgs',
    'ControllerRBACArgs',
    'ControllerRollingUpdateArgs',
    'ControllerScopeArgs',
    'ControllerServiceAccountArgs',
    'ControllerServiceInternalArgs',
    'ControllerServiceNodePortsArgs',
    'ControllerServiceArgs',
    'ControllerTcpArgs',
    'ControllerUdpArgs',
    'ControllerUpdateStrategyArgs',
    'ControllerArgs',
    'KedaScaledObjectArgs',
    'KedaTriggerArgs',
    'KedaArgs',
    'ReleaseArgs',
    'RepositoryOptsArgs',
]

@pulumi.input_type
class AutoscalingBehaviorScalingPolicyArgs:
    def __init__(__self__, *,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        AutoscalingBehaviorScalingPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            period_seconds=period_seconds,
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             period_seconds: Optional[pulumi.Input[int]] = None,
             type: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if period_seconds is not None:
            _setter("period_seconds", period_seconds)
        if type is not None:
            _setter("type", type)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutoscalingBehaviorScalingArgs:
    def __init__(__self__, *,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input['AutoscalingBehaviorScalingPolicyArgs']]]] = None,
                 stabilization_window_seconds: Optional[pulumi.Input[int]] = None):
        AutoscalingBehaviorScalingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            policies=policies,
            stabilization_window_seconds=stabilization_window_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             policies: Optional[pulumi.Input[Sequence[pulumi.Input['AutoscalingBehaviorScalingPolicyArgs']]]] = None,
             stabilization_window_seconds: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if policies is not None:
            _setter("policies", policies)
        if stabilization_window_seconds is not None:
            _setter("stabilization_window_seconds", stabilization_window_seconds)

    @property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutoscalingBehaviorScalingPolicyArgs']]]]:
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutoscalingBehaviorScalingPolicyArgs']]]]):
        pulumi.set(self, "policies", value)

    @property
    @pulumi.getter(name="stabilizationWindowSeconds")
    def stabilization_window_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "stabilization_window_seconds")

    @stabilization_window_seconds.setter
    def stabilization_window_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stabilization_window_seconds", value)


@pulumi.input_type
class AutoscalingBehaviorArgs:
    def __init__(__self__, *,
                 scale_down: Optional[pulumi.Input['AutoscalingBehaviorScalingArgs']] = None,
                 scale_up: Optional[pulumi.Input['AutoscalingBehaviorScalingArgs']] = None):
        AutoscalingBehaviorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            scale_down=scale_down,
            scale_up=scale_up,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             scale_down: Optional[pulumi.Input['AutoscalingBehaviorScalingArgs']] = None,
             scale_up: Optional[pulumi.Input['AutoscalingBehaviorScalingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if scale_down is not None:
            _setter("scale_down", scale_down)
        if scale_up is not None:
            _setter("scale_up", scale_up)

    @property
    @pulumi.getter(name="scaleDown")
    def scale_down(self) -> Optional[pulumi.Input['AutoscalingBehaviorScalingArgs']]:
        return pulumi.get(self, "scale_down")

    @scale_down.setter
    def scale_down(self, value: Optional[pulumi.Input['AutoscalingBehaviorScalingArgs']]):
        pulumi.set(self, "scale_down", value)

    @property
    @pulumi.getter(name="scaleUp")
    def scale_up(self) -> Optional[pulumi.Input['AutoscalingBehaviorScalingArgs']]:
        return pulumi.get(self, "scale_up")

    @scale_up.setter
    def scale_up(self, value: Optional[pulumi.Input['AutoscalingBehaviorScalingArgs']]):
        pulumi.set(self, "scale_up", value)


@pulumi.input_type
class AutoscalingTemplatePodsMetricArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        AutoscalingTemplatePodsMetricArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AutoscalingTemplatePodsTargetArgs:
    def __init__(__self__, *,
                 average_value: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        AutoscalingTemplatePodsTargetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            average_value=average_value,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             average_value: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if average_value is not None:
            _setter("average_value", average_value)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "average_value")

    @average_value.setter
    def average_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "average_value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class AutoscalingTemplatePodsArgs:
    def __init__(__self__, *,
                 metric: Optional[pulumi.Input['AutoscalingTemplatePodsMetricArgs']] = None,
                 target: Optional[pulumi.Input['AutoscalingTemplatePodsTargetArgs']] = None):
        AutoscalingTemplatePodsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metric=metric,
            target=target,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metric: Optional[pulumi.Input['AutoscalingTemplatePodsMetricArgs']] = None,
             target: Optional[pulumi.Input['AutoscalingTemplatePodsTargetArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metric is not None:
            _setter("metric", metric)
        if target is not None:
            _setter("target", target)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input['AutoscalingTemplatePodsMetricArgs']]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input['AutoscalingTemplatePodsMetricArgs']]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['AutoscalingTemplatePodsTargetArgs']]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['AutoscalingTemplatePodsTargetArgs']]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class AutoscalingTemplateArgs:
    def __init__(__self__, *,
                 pods: Optional[pulumi.Input['AutoscalingTemplatePodsArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        AutoscalingTemplateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pods=pods,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pods: Optional[pulumi.Input['AutoscalingTemplatePodsArgs']] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if pods is not None:
            _setter("pods", pods)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def pods(self) -> Optional[pulumi.Input['AutoscalingTemplatePodsArgs']]:
        return pulumi.get(self, "pods")

    @pods.setter
    def pods(self, value: Optional[pulumi.Input['AutoscalingTemplatePodsArgs']]):
        pulumi.set(self, "pods", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class AutoscalingArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 controller_autoscaling_behavior: Optional[pulumi.Input['AutoscalingBehaviorArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 max_replicas: Optional[pulumi.Input[int]] = None,
                 min_replicas: Optional[pulumi.Input[int]] = None,
                 target_cpu_utilization_percentage: Optional[pulumi.Input[int]] = None,
                 target_memory_utilization_percentage: Optional[pulumi.Input[int]] = None):
        AutoscalingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotations=annotations,
            controller_autoscaling_behavior=controller_autoscaling_behavior,
            enabled=enabled,
            max_replicas=max_replicas,
            min_replicas=min_replicas,
            target_cpu_utilization_percentage=target_cpu_utilization_percentage,
            target_memory_utilization_percentage=target_memory_utilization_percentage,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             controller_autoscaling_behavior: Optional[pulumi.Input['AutoscalingBehaviorArgs']] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             max_replicas: Optional[pulumi.Input[int]] = None,
             min_replicas: Optional[pulumi.Input[int]] = None,
             target_cpu_utilization_percentage: Optional[pulumi.Input[int]] = None,
             target_memory_utilization_percentage: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if annotations is not None:
            _setter("annotations", annotations)
        if controller_autoscaling_behavior is not None:
            _setter("controller_autoscaling_behavior", controller_autoscaling_behavior)
        if enabled is not None:
            _setter("enabled", enabled)
        if max_replicas is not None:
            _setter("max_replicas", max_replicas)
        if min_replicas is not None:
            _setter("min_replicas", min_replicas)
        if target_cpu_utilization_percentage is not None:
            _setter("target_cpu_utilization_percentage", target_cpu_utilization_percentage)
        if target_memory_utilization_percentage is not None:
            _setter("target_memory_utilization_percentage", target_memory_utilization_percentage)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="controllerAutoscalingBehavior")
    def controller_autoscaling_behavior(self) -> Optional[pulumi.Input['AutoscalingBehaviorArgs']]:
        return pulumi.get(self, "controller_autoscaling_behavior")

    @controller_autoscaling_behavior.setter
    def controller_autoscaling_behavior(self, value: Optional[pulumi.Input['AutoscalingBehaviorArgs']]):
        pulumi.set(self, "controller_autoscaling_behavior", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter(name="targetCPUUtilizationPercentage")
    def target_cpu_utilization_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "target_cpu_utilization_percentage")

    @target_cpu_utilization_percentage.setter
    def target_cpu_utilization_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_cpu_utilization_percentage", value)

    @property
    @pulumi.getter(name="targetMemoryUtilizationPercentage")
    def target_memory_utilization_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "target_memory_utilization_percentage")

    @target_memory_utilization_percentage.setter
    def target_memory_utilization_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_memory_utilization_percentage", value)


@pulumi.input_type
class ContollerAdmissionWebhooksArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 create_secret_job: Optional[pulumi.Input['ControllerAdmissionWebhooksCreateSecretJobArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 existing_psp: Optional[pulumi.Input[str]] = None,
                 failure_policy: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 namespace_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 object_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 patch: Optional[pulumi.Input['ControllerAdmissionWebhooksPatchArgs']] = None,
                 patch_webhook_job: Optional[pulumi.Input['ControllerAdmissionWebhooksPatchWebhbookJobArgs']] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 service: Optional[pulumi.Input['ControllerAdmissionWebhooksServiceArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] existing_psp: Use an existing PSP instead of creating one.
        """
        ContollerAdmissionWebhooksArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotations=annotations,
            certificate=certificate,
            create_secret_job=create_secret_job,
            enabled=enabled,
            existing_psp=existing_psp,
            failure_policy=failure_policy,
            key=key,
            namespace_selector=namespace_selector,
            object_selector=object_selector,
            patch=patch,
            patch_webhook_job=patch_webhook_job,
            port=port,
            service=service,
            timeout_seconds=timeout_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             certificate: Optional[pulumi.Input[str]] = None,
             create_secret_job: Optional[pulumi.Input['ControllerAdmissionWebhooksCreateSecretJobArgs']] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             existing_psp: Optional[pulumi.Input[str]] = None,
             failure_policy: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             namespace_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             object_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             patch: Optional[pulumi.Input['ControllerAdmissionWebhooksPatchArgs']] = None,
             patch_webhook_job: Optional[pulumi.Input['ControllerAdmissionWebhooksPatchWebhbookJobArgs']] = None,
             port: Optional[pulumi.Input[int]] = None,
             service: Optional[pulumi.Input['ControllerAdmissionWebhooksServiceArgs']] = None,
             timeout_seconds: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if annotations is not None:
            _setter("annotations", annotations)
        if certificate is not None:
            _setter("certificate", certificate)
        if create_secret_job is not None:
            _setter("create_secret_job", create_secret_job)
        if enabled is not None:
            _setter("enabled", enabled)
        if existing_psp is not None:
            _setter("existing_psp", existing_psp)
        if failure_policy is not None:
            _setter("failure_policy", failure_policy)
        if key is not None:
            _setter("key", key)
        if namespace_selector is not None:
            _setter("namespace_selector", namespace_selector)
        if object_selector is not None:
            _setter("object_selector", object_selector)
        if patch is not None:
            _setter("patch", patch)
        if patch_webhook_job is not None:
            _setter("patch_webhook_job", patch_webhook_job)
        if port is not None:
            _setter("port", port)
        if service is not None:
            _setter("service", service)
        if timeout_seconds is not None:
            _setter("timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="createSecretJob")
    def create_secret_job(self) -> Optional[pulumi.Input['ControllerAdmissionWebhooksCreateSecretJobArgs']]:
        return pulumi.get(self, "create_secret_job")

    @create_secret_job.setter
    def create_secret_job(self, value: Optional[pulumi.Input['ControllerAdmissionWebhooksCreateSecretJobArgs']]):
        pulumi.set(self, "create_secret_job", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="existingPsp")
    def existing_psp(self) -> Optional[pulumi.Input[str]]:
        """
        Use an existing PSP instead of creating one.
        """
        return pulumi.get(self, "existing_psp")

    @existing_psp.setter
    def existing_psp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "existing_psp", value)

    @property
    @pulumi.getter(name="failurePolicy")
    def failure_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "failure_policy")

    @failure_policy.setter
    def failure_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_policy", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter(name="objectSelector")
    def object_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        return pulumi.get(self, "object_selector")

    @object_selector.setter
    def object_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "object_selector", value)

    @property
    @pulumi.getter
    def patch(self) -> Optional[pulumi.Input['ControllerAdmissionWebhooksPatchArgs']]:
        return pulumi.get(self, "patch")

    @patch.setter
    def patch(self, value: Optional[pulumi.Input['ControllerAdmissionWebhooksPatchArgs']]):
        pulumi.set(self, "patch", value)

    @property
    @pulumi.getter(name="patchWebhookJob")
    def patch_webhook_job(self) -> Optional[pulumi.Input['ControllerAdmissionWebhooksPatchWebhbookJobArgs']]:
        return pulumi.get(self, "patch_webhook_job")

    @patch_webhook_job.setter
    def patch_webhook_job(self, value: Optional[pulumi.Input['ControllerAdmissionWebhooksPatchWebhbookJobArgs']]):
        pulumi.set(self, "patch_webhook_job", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['ControllerAdmissionWebhooksServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['ControllerAdmissionWebhooksServiceArgs']]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ControllerAdmissionWebhooksCreateSecretJobArgs:
    def __init__(__self__, *,
                 resources: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ResourceRequirementsArgs']] = None):
        ControllerAdmissionWebhooksCreateSecretJobArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resources=resources,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resources: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ResourceRequirementsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if resources is not None:
            _setter("resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.ResourceRequirementsArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ResourceRequirementsArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ControllerAdmissionWebhooksPatchWebhbookJobArgs:
    def __init__(__self__, *,
                 resources: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ResourceRequirementsArgs']] = None):
        ControllerAdmissionWebhooksPatchWebhbookJobArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resources=resources,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resources: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ResourceRequirementsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if resources is not None:
            _setter("resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.ResourceRequirementsArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ResourceRequirementsArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ControllerAdmissionWebhooksPatchArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input['ControllerImageArgs']] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 pod_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 run_as_user: Optional[pulumi.Input[int]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.TolerationArgs']]]] = None):
        """
        :param pulumi.Input[str] priority_class_name: Provide a priority class name to the webhook patching job.
        """
        ControllerAdmissionWebhooksPatchArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            image=image,
            node_selector=node_selector,
            pod_annotations=pod_annotations,
            priority_class_name=priority_class_name,
            run_as_user=run_as_user,
            tolerations=tolerations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             image: Optional[pulumi.Input['ControllerImageArgs']] = None,
             node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             pod_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             priority_class_name: Optional[pulumi.Input[str]] = None,
             run_as_user: Optional[pulumi.Input[int]] = None,
             tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.TolerationArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if enabled is not None:
            _setter("enabled", enabled)
        if image is not None:
            _setter("image", image)
        if node_selector is not None:
            _setter("node_selector", node_selector)
        if pod_annotations is not None:
            _setter("pod_annotations", pod_annotations)
        if priority_class_name is not None:
            _setter("priority_class_name", priority_class_name)
        if run_as_user is not None:
            _setter("run_as_user", run_as_user)
        if tolerations is not None:
            _setter("tolerations", tolerations)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['ControllerImageArgs']]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['ControllerImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="podAnnotations")
    def pod_annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        return pulumi.get(self, "pod_annotations")

    @pod_annotations.setter
    def pod_annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "pod_annotations", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        Provide a priority class name to the webhook patching job.
        """
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.TolerationArgs']]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.TolerationArgs']]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class ControllerAdmissionWebhooksServiceArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 cluster_ip: Optional[pulumi.Input[str]] = None,
                 external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 load_balancer_ips: Optional[pulumi.Input[str]] = None,
                 load_balancer_source_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_port: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        ControllerAdmissionWebhooksServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotations=annotations,
            cluster_ip=cluster_ip,
            external_ips=external_ips,
            load_balancer_ips=load_balancer_ips,
            load_balancer_source_ranges=load_balancer_source_ranges,
            service_port=service_port,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             cluster_ip: Optional[pulumi.Input[str]] = None,
             external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             load_balancer_ips: Optional[pulumi.Input[str]] = None,
             load_balancer_source_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             service_port: Optional[pulumi.Input[int]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if annotations is not None:
            _setter("annotations", annotations)
        if cluster_ip is not None:
            _setter("cluster_ip", cluster_ip)
        if external_ips is not None:
            _setter("external_ips", external_ips)
        if load_balancer_ips is not None:
            _setter("load_balancer_ips", load_balancer_ips)
        if load_balancer_source_ranges is not None:
            _setter("load_balancer_source_ranges", load_balancer_source_ranges)
        if service_port is not None:
            _setter("service_port", service_port)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_ip")

    @cluster_ip.setter
    def cluster_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ip", value)

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "external_ips")

    @external_ips.setter
    def external_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_ips", value)

    @property
    @pulumi.getter(name="loadBalancerIPs")
    def load_balancer_ips(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancer_ips")

    @load_balancer_ips.setter
    def load_balancer_ips(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_ips", value)

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @load_balancer_source_ranges.setter
    def load_balancer_source_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_source_ranges", value)

    @property
    @pulumi.getter(name="servicePort")
    def service_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "service_port")

    @service_port.setter
    def service_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "service_port", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ControllerCustomTemplateArgs:
    def __init__(__self__, *,
                 config_map_key: Optional[pulumi.Input[str]] = None,
                 config_map_name: Optional[pulumi.Input[str]] = None):
        ControllerCustomTemplateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config_map_key=config_map_key,
            config_map_name=config_map_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config_map_key: Optional[pulumi.Input[str]] = None,
             config_map_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if config_map_key is not None:
            _setter("config_map_key", config_map_key)
        if config_map_name is not None:
            _setter("config_map_name", config_map_name)

    @property
    @pulumi.getter(name="configMapKey")
    def config_map_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config_map_key")

    @config_map_key.setter
    def config_map_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_map_key", value)

    @property
    @pulumi.getter(name="configMapName")
    def config_map_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config_map_name")

    @config_map_name.setter
    def config_map_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_map_name", value)


@pulumi.input_type
class ControllerDefaultBackendServiceArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 cluster_ip: Optional[pulumi.Input[str]] = None,
                 external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 load_balancer_ip: Optional[pulumi.Input[str]] = None,
                 load_balancer_source_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_port: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] external_ips: List of IP addresses at which the default backend service is available. Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
        """
        ControllerDefaultBackendServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotations=annotations,
            cluster_ip=cluster_ip,
            external_ips=external_ips,
            load_balancer_ip=load_balancer_ip,
            load_balancer_source_ranges=load_balancer_source_ranges,
            service_port=service_port,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             cluster_ip: Optional[pulumi.Input[str]] = None,
             external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             load_balancer_ip: Optional[pulumi.Input[str]] = None,
             load_balancer_source_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             service_port: Optional[pulumi.Input[int]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if annotations is not None:
            _setter("annotations", annotations)
        if cluster_ip is not None:
            _setter("cluster_ip", cluster_ip)
        if external_ips is not None:
            _setter("external_ips", external_ips)
        if load_balancer_ip is not None:
            _setter("load_balancer_ip", load_balancer_ip)
        if load_balancer_source_ranges is not None:
            _setter("load_balancer_source_ranges", load_balancer_source_ranges)
        if service_port is not None:
            _setter("service_port", service_port)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_ip")

    @cluster_ip.setter
    def cluster_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ip", value)

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of IP addresses at which the default backend service is available. Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
        """
        return pulumi.get(self, "external_ips")

    @external_ips.setter
    def external_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_ips", value)

    @property
    @pulumi.getter(name="loadBalancerIP")
    def load_balancer_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancer_ip")

    @load_balancer_ip.setter
    def load_balancer_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_ip", value)

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @load_balancer_source_ranges.setter
    def load_balancer_source_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_source_ranges", value)

    @property
    @pulumi.getter(name="servicePort")
    def service_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "service_port")

    @service_port.setter
    def service_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "service_port", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ControllerDefaultBackendArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input['pulumi_kubernetes.core.v1.AffinityArgs']] = None,
                 autoscaling: Optional[pulumi.Input['AutoscalingArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 existing_psp: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.EnvVarArgs']]]] = None,
                 extra_volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeMountArgs']]]] = None,
                 extra_volumes: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeArgs']]]] = None,
                 image: Optional[pulumi.Input['ControllerImageArgs']] = None,
                 liveness_probe: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs']] = None,
                 min_available: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 pod_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 pod_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 pod_security_context: Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodSecurityContextArgs']] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 readiness_probe: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs']] = None,
                 replica_count: Optional[pulumi.Input[int]] = None,
                 resources: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ResourceRequirementsArgs']] = None,
                 service: Optional[pulumi.Input['ControllerDefaultBackendServiceArgs']] = None,
                 service_account: Optional[pulumi.Input['ControllerServiceAccountArgs']] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.TolerationArgs']]]] = None):
        """
        :param pulumi.Input[str] existing_psp: Use an existing PSP instead of creating one.
        :param pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeMountArgs']]] extra_volume_mounts: Additional volumeMounts to the default backend container.  - name: copy-portal-skins    mountPath: /var/lib/lemonldap-ng/portal/skins
        :param pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeArgs']]] extra_volumes: Additional volumes to the default backend pod.  - name: copy-portal-skins    emptyDir: {}
        :param pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs'] liveness_probe: Liveness probe values for default backend. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_selector: Node labels for default backend pod assignment Ref: https://kubernetes.io/docs/user-guide/node-selection/.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pod_annotations: Annotations to be added to default backend pods.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pod_labels: labels to add to the pod container metadata
        :param pulumi.Input['pulumi_kubernetes.core.v1.PodSecurityContextArgs'] pod_security_context: Security Context policies for controller pods. See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for notes on enabling and using sysctls.
        :param pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs'] readiness_probe: Readiness probe values for default backend. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
        :param pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.TolerationArgs']]] tolerations: Node tolerations for server scheduling to nodes with taints. Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        ControllerDefaultBackendArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            affinity=affinity,
            autoscaling=autoscaling,
            enabled=enabled,
            existing_psp=existing_psp,
            extra_args=extra_args,
            extra_envs=extra_envs,
            extra_volume_mounts=extra_volume_mounts,
            extra_volumes=extra_volumes,
            image=image,
            liveness_probe=liveness_probe,
            min_available=min_available,
            name=name,
            node_selector=node_selector,
            pod_annotations=pod_annotations,
            pod_labels=pod_labels,
            pod_security_context=pod_security_context,
            port=port,
            priority_class_name=priority_class_name,
            readiness_probe=readiness_probe,
            replica_count=replica_count,
            resources=resources,
            service=service,
            service_account=service_account,
            tolerations=tolerations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             affinity: Optional[pulumi.Input['pulumi_kubernetes.core.v1.AffinityArgs']] = None,
             autoscaling: Optional[pulumi.Input['AutoscalingArgs']] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             existing_psp: Optional[pulumi.Input[str]] = None,
             extra_args: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.EnvVarArgs']]]] = None,
             extra_volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeMountArgs']]]] = None,
             extra_volumes: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeArgs']]]] = None,
             image: Optional[pulumi.Input['ControllerImageArgs']] = None,
             liveness_probe: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs']] = None,
             min_available: Optional[pulumi.Input[int]] = None,
             name: Optional[pulumi.Input[str]] = None,
             node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             pod_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             pod_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             pod_security_context: Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodSecurityContextArgs']] = None,
             port: Optional[pulumi.Input[int]] = None,
             priority_class_name: Optional[pulumi.Input[str]] = None,
             readiness_probe: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs']] = None,
             replica_count: Optional[pulumi.Input[int]] = None,
             resources: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ResourceRequirementsArgs']] = None,
             service: Optional[pulumi.Input['ControllerDefaultBackendServiceArgs']] = None,
             service_account: Optional[pulumi.Input['ControllerServiceAccountArgs']] = None,
             tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.TolerationArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if affinity is not None:
            _setter("affinity", affinity)
        if autoscaling is not None:
            _setter("autoscaling", autoscaling)
        if enabled is not None:
            _setter("enabled", enabled)
        if existing_psp is not None:
            _setter("existing_psp", existing_psp)
        if extra_args is not None:
            _setter("extra_args", extra_args)
        if extra_envs is not None:
            _setter("extra_envs", extra_envs)
        if extra_volume_mounts is not None:
            _setter("extra_volume_mounts", extra_volume_mounts)
        if extra_volumes is not None:
            _setter("extra_volumes", extra_volumes)
        if image is not None:
            _setter("image", image)
        if liveness_probe is not None:
            _setter("liveness_probe", liveness_probe)
        if min_available is not None:
            _setter("min_available", min_available)
        if name is not None:
            _setter("name", name)
        if node_selector is not None:
            _setter("node_selector", node_selector)
        if pod_annotations is not None:
            _setter("pod_annotations", pod_annotations)
        if pod_labels is not None:
            _setter("pod_labels", pod_labels)
        if pod_security_context is not None:
            _setter("pod_security_context", pod_security_context)
        if port is not None:
            _setter("port", port)
        if priority_class_name is not None:
            _setter("priority_class_name", priority_class_name)
        if readiness_probe is not None:
            _setter("readiness_probe", readiness_probe)
        if replica_count is not None:
            _setter("replica_count", replica_count)
        if resources is not None:
            _setter("resources", resources)
        if service is not None:
            _setter("service", service)
        if service_account is not None:
            _setter("service_account", service_account)
        if tolerations is not None:
            _setter("tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.AffinityArgs']]:
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.AffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter
    def autoscaling(self) -> Optional[pulumi.Input['AutoscalingArgs']]:
        return pulumi.get(self, "autoscaling")

    @autoscaling.setter
    def autoscaling(self, value: Optional[pulumi.Input['AutoscalingArgs']]):
        pulumi.set(self, "autoscaling", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="existingPsp")
    def existing_psp(self) -> Optional[pulumi.Input[str]]:
        """
        Use an existing PSP instead of creating one.
        """
        return pulumi.get(self, "existing_psp")

    @existing_psp.setter
    def existing_psp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "existing_psp", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="extraEnvs")
    def extra_envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.EnvVarArgs']]]]:
        return pulumi.get(self, "extra_envs")

    @extra_envs.setter
    def extra_envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.EnvVarArgs']]]]):
        pulumi.set(self, "extra_envs", value)

    @property
    @pulumi.getter(name="extraVolumeMounts")
    def extra_volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeMountArgs']]]]:
        """
        Additional volumeMounts to the default backend container.  - name: copy-portal-skins    mountPath: /var/lib/lemonldap-ng/portal/skins
        """
        return pulumi.get(self, "extra_volume_mounts")

    @extra_volume_mounts.setter
    def extra_volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeMountArgs']]]]):
        pulumi.set(self, "extra_volume_mounts", value)

    @property
    @pulumi.getter(name="extraVolumes")
    def extra_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeArgs']]]]:
        """
        Additional volumes to the default backend pod.  - name: copy-portal-skins    emptyDir: {}
        """
        return pulumi.get(self, "extra_volumes")

    @extra_volumes.setter
    def extra_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeArgs']]]]):
        pulumi.set(self, "extra_volumes", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['ControllerImageArgs']]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['ControllerImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs']]:
        """
        Liveness probe values for default backend. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
        """
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @property
    @pulumi.getter(name="minAvailable")
    def min_available(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_available")

    @min_available.setter
    def min_available(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_available", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Node labels for default backend pod assignment Ref: https://kubernetes.io/docs/user-guide/node-selection/.
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="podAnnotations")
    def pod_annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations to be added to default backend pods.
        """
        return pulumi.get(self, "pod_annotations")

    @pod_annotations.setter
    def pod_annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "pod_annotations", value)

    @property
    @pulumi.getter(name="podLabels")
    def pod_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        labels to add to the pod container metadata
        """
        return pulumi.get(self, "pod_labels")

    @pod_labels.setter
    def pod_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "pod_labels", value)

    @property
    @pulumi.getter(name="podSecurityContext")
    def pod_security_context(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodSecurityContextArgs']]:
        """
        Security Context policies for controller pods. See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for notes on enabling and using sysctls.
        """
        return pulumi.get(self, "pod_security_context")

    @pod_security_context.setter
    def pod_security_context(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodSecurityContextArgs']]):
        pulumi.set(self, "pod_security_context", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs']]:
        """
        Readiness probe values for default backend. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
        """
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)

    @property
    @pulumi.getter(name="replicaCount")
    def replica_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replica_count")

    @replica_count.setter
    def replica_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replica_count", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.ResourceRequirementsArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ResourceRequirementsArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['ControllerDefaultBackendServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['ControllerDefaultBackendServiceArgs']]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input['ControllerServiceAccountArgs']]:
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input['ControllerServiceAccountArgs']]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.TolerationArgs']]]]:
        """
        Node tolerations for server scheduling to nodes with taints. Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.TolerationArgs']]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class ControllerHostPortPortsArgs:
    def __init__(__self__, *,
                 http: Optional[pulumi.Input[int]] = None,
                 https: Optional[pulumi.Input[int]] = None):
        ControllerHostPortPortsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            http=http,
            https=https,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             http: Optional[pulumi.Input[int]] = None,
             https: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if http is not None:
            _setter("http", http)
        if https is not None:
            _setter("https", https)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def https(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "https")

    @https.setter
    def https(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "https", value)


@pulumi.input_type
class ControllerHostPortArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ports: Optional[pulumi.Input['ControllerHostPortPortsArgs']] = None):
        ControllerHostPortArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            ports=ports,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             ports: Optional[pulumi.Input['ControllerHostPortPortsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if enabled is not None:
            _setter("enabled", enabled)
        if ports is not None:
            _setter("ports", ports)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input['ControllerHostPortPortsArgs']]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input['ControllerHostPortPortsArgs']]):
        pulumi.set(self, "ports", value)


@pulumi.input_type
class ControllerImageArgs:
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[pulumi.Input[bool]] = None,
                 digest: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 read_only_root_filesystem: Optional[pulumi.Input[bool]] = None,
                 registry: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 run_as_non_root: Optional[pulumi.Input[bool]] = None,
                 run_as_user: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] repository: for backwards compatibility consider setting the full image url via the repository value below use *either* current default registry/image or repository format or installing will fail.
        """
        ControllerImageArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_privilege_escalation=allow_privilege_escalation,
            digest=digest,
            image=image,
            pull_policy=pull_policy,
            read_only_root_filesystem=read_only_root_filesystem,
            registry=registry,
            repository=repository,
            run_as_non_root=run_as_non_root,
            run_as_user=run_as_user,
            tag=tag,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_privilege_escalation: Optional[pulumi.Input[bool]] = None,
             digest: Optional[pulumi.Input[str]] = None,
             image: Optional[pulumi.Input[str]] = None,
             pull_policy: Optional[pulumi.Input[str]] = None,
             read_only_root_filesystem: Optional[pulumi.Input[bool]] = None,
             registry: Optional[pulumi.Input[str]] = None,
             repository: Optional[pulumi.Input[str]] = None,
             run_as_non_root: Optional[pulumi.Input[bool]] = None,
             run_as_user: Optional[pulumi.Input[str]] = None,
             tag: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if allow_privilege_escalation is not None:
            _setter("allow_privilege_escalation", allow_privilege_escalation)
        if digest is not None:
            _setter("digest", digest)
        if image is not None:
            _setter("image", image)
        if pull_policy is not None:
            _setter("pull_policy", pull_policy)
        if read_only_root_filesystem is not None:
            _setter("read_only_root_filesystem", read_only_root_filesystem)
        if registry is not None:
            _setter("registry", registry)
        if repository is not None:
            _setter("repository", repository)
        if run_as_non_root is not None:
            _setter("run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            _setter("run_as_user", run_as_user)
        if tag is not None:
            _setter("tag", tag)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_privilege_escalation")

    @allow_privilege_escalation.setter
    def allow_privilege_escalation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_privilege_escalation", value)

    @property
    @pulumi.getter
    def digest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "digest")

    @digest.setter
    def digest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "digest", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only_root_filesystem")

    @read_only_root_filesystem.setter
    def read_only_root_filesystem(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only_root_filesystem", value)

    @property
    @pulumi.getter
    def registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        for backwards compatibility consider setting the full image url via the repository value below use *either* current default registry/image or repository format or installing will fail.
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class ControllerIngressClassResourceArgs:
    def __init__(__self__, *,
                 controller_value: Optional[pulumi.Input[str]] = None,
                 default: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] parameters: Parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters.
        """
        ControllerIngressClassResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            controller_value=controller_value,
            default=default,
            enabled=enabled,
            name=name,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             controller_value: Optional[pulumi.Input[str]] = None,
             default: Optional[pulumi.Input[bool]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             name: Optional[pulumi.Input[str]] = None,
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if controller_value is not None:
            _setter("controller_value", controller_value)
        if default is not None:
            _setter("default", default)
        if enabled is not None:
            _setter("enabled", enabled)
        if name is not None:
            _setter("name", name)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter(name="controllerValue")
    def controller_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "controller_value")

    @controller_value.setter
    def controller_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "controller_value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class ControllerMetricsPrometheusRulesArgs:
    def __init__(__self__, *,
                 additional_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None):
        ControllerMetricsPrometheusRulesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            additional_labels=additional_labels,
            enabled=enabled,
            namespace=namespace,
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             additional_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             namespace: Optional[pulumi.Input[str]] = None,
             rules: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if additional_labels is not None:
            _setter("additional_labels", additional_labels)
        if enabled is not None:
            _setter("enabled", enabled)
        if namespace is not None:
            _setter("namespace", namespace)
        if rules is not None:
            _setter("rules", rules)

    @property
    @pulumi.getter(name="additionalLabels")
    def additional_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        return pulumi.get(self, "additional_labels")

    @additional_labels.setter
    def additional_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "additional_labels", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class ControllerMetricsServiceMonitorArgs:
    def __init__(__self__, *,
                 additional_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 honor_labels: Optional[pulumi.Input[bool]] = None,
                 job_label: Optional[pulumi.Input[str]] = None,
                 metric_relabelings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 namespace_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 scrape_interval: Optional[pulumi.Input[str]] = None,
                 target_labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] job_label: The label to use to retrieve the job name from.
        """
        ControllerMetricsServiceMonitorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            additional_labels=additional_labels,
            enabled=enabled,
            honor_labels=honor_labels,
            job_label=job_label,
            metric_relabelings=metric_relabelings,
            namespace=namespace,
            namespace_selector=namespace_selector,
            scrape_interval=scrape_interval,
            target_labels=target_labels,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             additional_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             honor_labels: Optional[pulumi.Input[bool]] = None,
             job_label: Optional[pulumi.Input[str]] = None,
             metric_relabelings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             namespace: Optional[pulumi.Input[str]] = None,
             namespace_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             scrape_interval: Optional[pulumi.Input[str]] = None,
             target_labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if additional_labels is not None:
            _setter("additional_labels", additional_labels)
        if enabled is not None:
            _setter("enabled", enabled)
        if honor_labels is not None:
            _setter("honor_labels", honor_labels)
        if job_label is not None:
            _setter("job_label", job_label)
        if metric_relabelings is not None:
            _setter("metric_relabelings", metric_relabelings)
        if namespace is not None:
            _setter("namespace", namespace)
        if namespace_selector is not None:
            _setter("namespace_selector", namespace_selector)
        if scrape_interval is not None:
            _setter("scrape_interval", scrape_interval)
        if target_labels is not None:
            _setter("target_labels", target_labels)

    @property
    @pulumi.getter(name="additionalLabels")
    def additional_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        return pulumi.get(self, "additional_labels")

    @additional_labels.setter
    def additional_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "additional_labels", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="honorLabels")
    def honor_labels(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "honor_labels")

    @honor_labels.setter
    def honor_labels(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "honor_labels", value)

    @property
    @pulumi.getter(name="jobLabel")
    def job_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label to use to retrieve the job name from.
        """
        return pulumi.get(self, "job_label")

    @job_label.setter
    def job_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_label", value)

    @property
    @pulumi.getter(name="metricRelabelings")
    def metric_relabelings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "metric_relabelings")

    @metric_relabelings.setter
    def metric_relabelings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "metric_relabelings", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter(name="scrapeInterval")
    def scrape_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scrape_interval")

    @scrape_interval.setter
    def scrape_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scrape_interval", value)

    @property
    @pulumi.getter(name="targetLabels")
    def target_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "target_labels")

    @target_labels.setter
    def target_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "target_labels", value)


@pulumi.input_type
class ControllerMetricsServiceArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 cluster_ip: Optional[pulumi.Input[str]] = None,
                 external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_traffic_policy: Optional[pulumi.Input[str]] = None,
                 load_balancer_ips: Optional[pulumi.Input[str]] = None,
                 load_balancer_source_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 node_port: Optional[pulumi.Input[str]] = None,
                 service_port: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        ControllerMetricsServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotations=annotations,
            cluster_ip=cluster_ip,
            external_ips=external_ips,
            external_traffic_policy=external_traffic_policy,
            load_balancer_ips=load_balancer_ips,
            load_balancer_source_ranges=load_balancer_source_ranges,
            node_port=node_port,
            service_port=service_port,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             cluster_ip: Optional[pulumi.Input[str]] = None,
             external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             external_traffic_policy: Optional[pulumi.Input[str]] = None,
             load_balancer_ips: Optional[pulumi.Input[str]] = None,
             load_balancer_source_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             node_port: Optional[pulumi.Input[str]] = None,
             service_port: Optional[pulumi.Input[int]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if annotations is not None:
            _setter("annotations", annotations)
        if cluster_ip is not None:
            _setter("cluster_ip", cluster_ip)
        if external_ips is not None:
            _setter("external_ips", external_ips)
        if external_traffic_policy is not None:
            _setter("external_traffic_policy", external_traffic_policy)
        if load_balancer_ips is not None:
            _setter("load_balancer_ips", load_balancer_ips)
        if load_balancer_source_ranges is not None:
            _setter("load_balancer_source_ranges", load_balancer_source_ranges)
        if node_port is not None:
            _setter("node_port", node_port)
        if service_port is not None:
            _setter("service_port", service_port)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_ip")

    @cluster_ip.setter
    def cluster_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ip", value)

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "external_ips")

    @external_ips.setter
    def external_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_ips", value)

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_traffic_policy")

    @external_traffic_policy.setter
    def external_traffic_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_traffic_policy", value)

    @property
    @pulumi.getter(name="loadBalancerIPs")
    def load_balancer_ips(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancer_ips")

    @load_balancer_ips.setter
    def load_balancer_ips(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_ips", value)

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @load_balancer_source_ranges.setter
    def load_balancer_source_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_source_ranges", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_port", value)

    @property
    @pulumi.getter(name="servicePort")
    def service_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "service_port")

    @service_port.setter
    def service_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "service_port", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ControllerMetricsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 prometheus_rule: Optional[pulumi.Input['ControllerMetricsPrometheusRulesArgs']] = None,
                 service: Optional[pulumi.Input['ControllerMetricsServiceArgs']] = None,
                 service_monitor: Optional[pulumi.Input['ControllerMetricsServiceMonitorArgs']] = None):
        """
        :param pulumi.Input[int] port: if this port is changed, change healthz-port: in extraArgs: accordingly.
        """
        ControllerMetricsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            port=port,
            prometheus_rule=prometheus_rule,
            service=service,
            service_monitor=service_monitor,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             port: Optional[pulumi.Input[int]] = None,
             prometheus_rule: Optional[pulumi.Input['ControllerMetricsPrometheusRulesArgs']] = None,
             service: Optional[pulumi.Input['ControllerMetricsServiceArgs']] = None,
             service_monitor: Optional[pulumi.Input['ControllerMetricsServiceMonitorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if enabled is not None:
            _setter("enabled", enabled)
        if port is not None:
            _setter("port", port)
        if prometheus_rule is not None:
            _setter("prometheus_rule", prometheus_rule)
        if service is not None:
            _setter("service", service)
        if service_monitor is not None:
            _setter("service_monitor", service_monitor)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        if this port is changed, change healthz-port: in extraArgs: accordingly.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="prometheusRule")
    def prometheus_rule(self) -> Optional[pulumi.Input['ControllerMetricsPrometheusRulesArgs']]:
        return pulumi.get(self, "prometheus_rule")

    @prometheus_rule.setter
    def prometheus_rule(self, value: Optional[pulumi.Input['ControllerMetricsPrometheusRulesArgs']]):
        pulumi.set(self, "prometheus_rule", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['ControllerMetricsServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['ControllerMetricsServiceArgs']]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="serviceMonitor")
    def service_monitor(self) -> Optional[pulumi.Input['ControllerMetricsServiceMonitorArgs']]:
        return pulumi.get(self, "service_monitor")

    @service_monitor.setter
    def service_monitor(self, value: Optional[pulumi.Input['ControllerMetricsServiceMonitorArgs']]):
        pulumi.set(self, "service_monitor", value)


@pulumi.input_type
class ControllerPodSecurityPolicyArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        ControllerPodSecurityPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ControllerPortArgs:
    def __init__(__self__, *,
                 http: Optional[pulumi.Input[int]] = None,
                 https: Optional[pulumi.Input[int]] = None):
        ControllerPortArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            http=http,
            https=https,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             http: Optional[pulumi.Input[int]] = None,
             https: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if http is not None:
            _setter("http", http)
        if https is not None:
            _setter("https", https)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def https(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "https")

    @https.setter
    def https(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "https", value)


@pulumi.input_type
class ControllerPublishServiceArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 path_override: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] path_override: Allows overriding of the publish service to bind to. Must be <namespace>/<service_name>.
        """
        ControllerPublishServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            path_override=path_override,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             path_override: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if enabled is not None:
            _setter("enabled", enabled)
        if path_override is not None:
            _setter("path_override", path_override)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="pathOverride")
    def path_override(self) -> Optional[pulumi.Input[str]]:
        """
        Allows overriding of the publish service to bind to. Must be <namespace>/<service_name>.
        """
        return pulumi.get(self, "path_override")

    @path_override.setter
    def path_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_override", value)


@pulumi.input_type
class ControllerRBACArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[bool]] = None,
                 scope: Optional[pulumi.Input[bool]] = None):
        ControllerRBACArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            create=create,
            scope=scope,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             create: Optional[pulumi.Input[bool]] = None,
             scope: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if create is not None:
            _setter("create", create)
        if scope is not None:
            _setter("scope", scope)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class ControllerRollingUpdateArgs:
    def __init__(__self__, *,
                 max_unavailable: Optional[pulumi.Input[int]] = None):
        ControllerRollingUpdateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_unavailable=max_unavailable,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_unavailable: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if max_unavailable is not None:
            _setter("max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_unavailable", value)


@pulumi.input_type
class ControllerScopeArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        ControllerScopeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            namespace=namespace,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             namespace: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if enabled is not None:
            _setter("enabled", enabled)
        if namespace is not None:
            _setter("namespace", namespace)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ControllerServiceAccountArgs:
    def __init__(__self__, *,
                 automount_service_account_token: Optional[pulumi.Input[bool]] = None,
                 create: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        ControllerServiceAccountArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            automount_service_account_token=automount_service_account_token,
            create=create,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             automount_service_account_token: Optional[pulumi.Input[bool]] = None,
             create: Optional[pulumi.Input[bool]] = None,
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if automount_service_account_token is not None:
            _setter("automount_service_account_token", automount_service_account_token)
        if create is not None:
            _setter("create", create)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="automountServiceAccountToken")
    def automount_service_account_token(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "automount_service_account_token")

    @automount_service_account_token.setter
    def automount_service_account_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automount_service_account_token", value)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ControllerServiceInternalArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 external_traffic_policy: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 load_balancer_ips: Optional[pulumi.Input[str]] = None,
                 load_balancer_source_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] external_traffic_policy: Set external traffic policy to: "Local" to preserve source IP on providers supporting it. Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer
        :param pulumi.Input[Sequence[pulumi.Input[str]]] load_balancer_source_ranges: Restrict access For LoadBalancer service. Defaults to 0.0.0.0/0.
        """
        ControllerServiceInternalArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotations=annotations,
            enabled=enabled,
            external_traffic_policy=external_traffic_policy,
            labels=labels,
            load_balancer_ips=load_balancer_ips,
            load_balancer_source_ranges=load_balancer_source_ranges,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             external_traffic_policy: Optional[pulumi.Input[str]] = None,
             labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             load_balancer_ips: Optional[pulumi.Input[str]] = None,
             load_balancer_source_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if annotations is not None:
            _setter("annotations", annotations)
        if enabled is not None:
            _setter("enabled", enabled)
        if external_traffic_policy is not None:
            _setter("external_traffic_policy", external_traffic_policy)
        if labels is not None:
            _setter("labels", labels)
        if load_balancer_ips is not None:
            _setter("load_balancer_ips", load_balancer_ips)
        if load_balancer_source_ranges is not None:
            _setter("load_balancer_source_ranges", load_balancer_source_ranges)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Set external traffic policy to: "Local" to preserve source IP on providers supporting it. Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer
        """
        return pulumi.get(self, "external_traffic_policy")

    @external_traffic_policy.setter
    def external_traffic_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_traffic_policy", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="loadBalancerIPs")
    def load_balancer_ips(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancer_ips")

    @load_balancer_ips.setter
    def load_balancer_ips(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_ips", value)

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Restrict access For LoadBalancer service. Defaults to 0.0.0.0/0.
        """
        return pulumi.get(self, "load_balancer_source_ranges")

    @load_balancer_source_ranges.setter
    def load_balancer_source_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_source_ranges", value)


@pulumi.input_type
class ControllerServiceNodePortsArgs:
    def __init__(__self__, *,
                 http: Optional[pulumi.Input[str]] = None,
                 https: Optional[pulumi.Input[str]] = None,
                 tcp: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 udp: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None):
        ControllerServiceNodePortsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            http=http,
            https=https,
            tcp=tcp,
            udp=udp,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             http: Optional[pulumi.Input[str]] = None,
             https: Optional[pulumi.Input[str]] = None,
             tcp: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             udp: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if http is not None:
            _setter("http", http)
        if https is not None:
            _setter("https", https)
        if tcp is not None:
            _setter("tcp", tcp)
        if udp is not None:
            _setter("udp", udp)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def https(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https")

    @https.setter
    def https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https", value)

    @property
    @pulumi.getter
    def tcp(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        return pulumi.get(self, "tcp")

    @tcp.setter
    def tcp(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "tcp", value)

    @property
    @pulumi.getter
    def udp(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        return pulumi.get(self, "udp")

    @udp.setter
    def udp(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "udp", value)


@pulumi.input_type
class ControllerServiceArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 cluster_ip: Optional[pulumi.Input[str]] = None,
                 enable_http: Optional[pulumi.Input[bool]] = None,
                 enable_https: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_traffic_policy: Optional[pulumi.Input[str]] = None,
                 health_check_node_port: Optional[pulumi.Input[int]] = None,
                 internal: Optional[pulumi.Input['ControllerServiceInternalArgs']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 load_balancer_ips: Optional[pulumi.Input[str]] = None,
                 load_balancer_source_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 node_ports: Optional[pulumi.Input['ControllerServiceNodePortsArgs']] = None,
                 ports: Optional[pulumi.Input['ControllerPortArgs']] = None,
                 session_affinity: Optional[pulumi.Input[str]] = None,
                 target_ports: Optional[pulumi.Input['ControllerPortArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] external_ips: List of IP addresses at which the controller services are available Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
        :param pulumi.Input[str] external_traffic_policy: Set external traffic policy to: "Local" to preserve source IP on providers supporting it. Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer
        :param pulumi.Input[int] health_check_node_port: specifies the health check node port (numeric port number) for the service. If healthCheckNodePort isn’t specified, the service controller allocates a port from your cluster’s NodePort range. Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
        :param pulumi.Input['ControllerServiceInternalArgs'] internal: Enables an additional internal load balancer (besides the external one). Annotations are mandatory for the load balancer to come up. Varies with the cloud service.
        :param pulumi.Input[str] session_affinity: Must be either "None" or "ClientIP" if set. Kubernetes will default to "None". Ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        """
        ControllerServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotations=annotations,
            cluster_ip=cluster_ip,
            enable_http=enable_http,
            enable_https=enable_https,
            enabled=enabled,
            external_ips=external_ips,
            external_traffic_policy=external_traffic_policy,
            health_check_node_port=health_check_node_port,
            internal=internal,
            labels=labels,
            load_balancer_ips=load_balancer_ips,
            load_balancer_source_ranges=load_balancer_source_ranges,
            node_ports=node_ports,
            ports=ports,
            session_affinity=session_affinity,
            target_ports=target_ports,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             cluster_ip: Optional[pulumi.Input[str]] = None,
             enable_http: Optional[pulumi.Input[bool]] = None,
             enable_https: Optional[pulumi.Input[bool]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             external_traffic_policy: Optional[pulumi.Input[str]] = None,
             health_check_node_port: Optional[pulumi.Input[int]] = None,
             internal: Optional[pulumi.Input['ControllerServiceInternalArgs']] = None,
             labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             load_balancer_ips: Optional[pulumi.Input[str]] = None,
             load_balancer_source_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             node_ports: Optional[pulumi.Input['ControllerServiceNodePortsArgs']] = None,
             ports: Optional[pulumi.Input['ControllerPortArgs']] = None,
             session_affinity: Optional[pulumi.Input[str]] = None,
             target_ports: Optional[pulumi.Input['ControllerPortArgs']] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if annotations is not None:
            _setter("annotations", annotations)
        if cluster_ip is not None:
            _setter("cluster_ip", cluster_ip)
        if enable_http is not None:
            _setter("enable_http", enable_http)
        if enable_https is not None:
            _setter("enable_https", enable_https)
        if enabled is not None:
            _setter("enabled", enabled)
        if external_ips is not None:
            _setter("external_ips", external_ips)
        if external_traffic_policy is not None:
            _setter("external_traffic_policy", external_traffic_policy)
        if health_check_node_port is not None:
            _setter("health_check_node_port", health_check_node_port)
        if internal is not None:
            _setter("internal", internal)
        if labels is not None:
            _setter("labels", labels)
        if load_balancer_ips is not None:
            _setter("load_balancer_ips", load_balancer_ips)
        if load_balancer_source_ranges is not None:
            _setter("load_balancer_source_ranges", load_balancer_source_ranges)
        if node_ports is not None:
            _setter("node_ports", node_ports)
        if ports is not None:
            _setter("ports", ports)
        if session_affinity is not None:
            _setter("session_affinity", session_affinity)
        if target_ports is not None:
            _setter("target_ports", target_ports)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="clusterIP")
    def cluster_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_ip")

    @cluster_ip.setter
    def cluster_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ip", value)

    @property
    @pulumi.getter(name="enableHttp")
    def enable_http(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_http")

    @enable_http.setter
    def enable_http(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_http", value)

    @property
    @pulumi.getter(name="enableHttps")
    def enable_https(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_https")

    @enable_https.setter
    def enable_https(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_https", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="externalIPs")
    def external_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of IP addresses at which the controller services are available Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
        """
        return pulumi.get(self, "external_ips")

    @external_ips.setter
    def external_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_ips", value)

    @property
    @pulumi.getter(name="externalTrafficPolicy")
    def external_traffic_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Set external traffic policy to: "Local" to preserve source IP on providers supporting it. Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer
        """
        return pulumi.get(self, "external_traffic_policy")

    @external_traffic_policy.setter
    def external_traffic_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_traffic_policy", value)

    @property
    @pulumi.getter(name="healthCheckNodePort")
    def health_check_node_port(self) -> Optional[pulumi.Input[int]]:
        """
        specifies the health check node port (numeric port number) for the service. If healthCheckNodePort isn’t specified, the service controller allocates a port from your cluster’s NodePort range. Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
        """
        return pulumi.get(self, "health_check_node_port")

    @health_check_node_port.setter
    def health_check_node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_node_port", value)

    @property
    @pulumi.getter
    def internal(self) -> Optional[pulumi.Input['ControllerServiceInternalArgs']]:
        """
        Enables an additional internal load balancer (besides the external one). Annotations are mandatory for the load balancer to come up. Varies with the cloud service.
        """
        return pulumi.get(self, "internal")

    @internal.setter
    def internal(self, value: Optional[pulumi.Input['ControllerServiceInternalArgs']]):
        pulumi.set(self, "internal", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="loadBalancerIPs")
    def load_balancer_ips(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancer_ips")

    @load_balancer_ips.setter
    def load_balancer_ips(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_ips", value)

    @property
    @pulumi.getter(name="loadBalancerSourceRanges")
    def load_balancer_source_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "load_balancer_source_ranges")

    @load_balancer_source_ranges.setter
    def load_balancer_source_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_source_ranges", value)

    @property
    @pulumi.getter(name="nodePorts")
    def node_ports(self) -> Optional[pulumi.Input['ControllerServiceNodePortsArgs']]:
        return pulumi.get(self, "node_ports")

    @node_ports.setter
    def node_ports(self, value: Optional[pulumi.Input['ControllerServiceNodePortsArgs']]):
        pulumi.set(self, "node_ports", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input['ControllerPortArgs']]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input['ControllerPortArgs']]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[pulumi.Input[str]]:
        """
        Must be either "None" or "ClientIP" if set. Kubernetes will default to "None". Ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        """
        return pulumi.get(self, "session_affinity")

    @session_affinity.setter
    def session_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_affinity", value)

    @property
    @pulumi.getter(name="targetPorts")
    def target_ports(self) -> Optional[pulumi.Input['ControllerPortArgs']]:
        return pulumi.get(self, "target_ports")

    @target_ports.setter
    def target_ports(self, value: Optional[pulumi.Input['ControllerPortArgs']]):
        pulumi.set(self, "target_ports", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ControllerTcpArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 config_map_namespace: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations to be added to the tcp config configmap.
        """
        ControllerTcpArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotations=annotations,
            config_map_namespace=config_map_namespace,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             config_map_namespace: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if annotations is not None:
            _setter("annotations", annotations)
        if config_map_namespace is not None:
            _setter("config_map_namespace", config_map_namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations to be added to the tcp config configmap.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="configMapNamespace")
    def config_map_namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config_map_namespace")

    @config_map_namespace.setter
    def config_map_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_map_namespace", value)


@pulumi.input_type
class ControllerUdpArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 config_map_namespace: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations to be added to the udp config configmap.
        """
        ControllerUdpArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotations=annotations,
            config_map_namespace=config_map_namespace,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             config_map_namespace: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if annotations is not None:
            _setter("annotations", annotations)
        if config_map_namespace is not None:
            _setter("config_map_namespace", config_map_namespace)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations to be added to the udp config configmap.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="configMapNamespace")
    def config_map_namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config_map_namespace")

    @config_map_namespace.setter
    def config_map_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_map_namespace", value)


@pulumi.input_type
class ControllerUpdateStrategyArgs:
    def __init__(__self__, *,
                 rolling_update: Optional[pulumi.Input['ControllerRollingUpdateArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        ControllerUpdateStrategyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rolling_update=rolling_update,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rolling_update: Optional[pulumi.Input['ControllerRollingUpdateArgs']] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if rolling_update is not None:
            _setter("rolling_update", rolling_update)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['ControllerRollingUpdateArgs']]:
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['ControllerRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ControllerArgs:
    def __init__(__self__, *,
                 add_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 admission_webhooks: Optional[pulumi.Input['ContollerAdmissionWebhooksArgs']] = None,
                 affinity: Optional[pulumi.Input['pulumi_kubernetes.core.v1.AffinityArgs']] = None,
                 allow_snippet_annotations: Optional[pulumi.Input[bool]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 autoscaling: Optional[pulumi.Input['AutoscalingArgs']] = None,
                 autoscaling_template: Optional[pulumi.Input[Sequence[pulumi.Input['AutoscalingTemplateArgs']]]] = None,
                 config: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 config_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 config_map_namespace: Optional[pulumi.Input[str]] = None,
                 container_name: Optional[pulumi.Input[str]] = None,
                 container_port: Optional[pulumi.Input['ControllerPortArgs']] = None,
                 custom_template: Optional[pulumi.Input['ControllerCustomTemplateArgs']] = None,
                 dns_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 dns_policy: Optional[pulumi.Input[str]] = None,
                 election_id: Optional[pulumi.Input[str]] = None,
                 enable_mimalloc: Optional[pulumi.Input[bool]] = None,
                 existing_psp: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 extra_containers: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.ContainerArgs']]]] = None,
                 extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.EnvVarArgs']]]] = None,
                 extra_init_containers: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.ContainerArgs']]]] = None,
                 extra_volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeMountArgs']]]] = None,
                 extra_volumes: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeArgs']]]] = None,
                 health_check_path: Optional[pulumi.Input[str]] = None,
                 heath_check_host: Optional[pulumi.Input[str]] = None,
                 host_network: Optional[pulumi.Input[bool]] = None,
                 host_port: Optional[pulumi.Input['ControllerHostPortArgs']] = None,
                 hostname: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 image: Optional[pulumi.Input['ControllerImageArgs']] = None,
                 ingress_class_by_name: Optional[pulumi.Input[bool]] = None,
                 ingress_class_resource: Optional[pulumi.Input['ControllerIngressClassResourceArgs']] = None,
                 keda: Optional[pulumi.Input['KedaArgs']] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 lifecycle: Optional[pulumi.Input['pulumi_kubernetes.core.v1.LifecycleArgs']] = None,
                 liveness_probe: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs']] = None,
                 maxmind_license_key: Optional[pulumi.Input[str]] = None,
                 metrics: Optional[pulumi.Input['ControllerMetricsArgs']] = None,
                 min_available: Optional[pulumi.Input[int]] = None,
                 min_ready_seconds: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 pod_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 pod_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 pod_security_context: Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodSecurityContextArgs']] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 proxy_set_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 publish_service: Optional[pulumi.Input['ControllerPublishServiceArgs']] = None,
                 readiness_probe: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs']] = None,
                 replica_count: Optional[pulumi.Input[int]] = None,
                 report_node_internal_ip: Optional[pulumi.Input[bool]] = None,
                 resources: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ResourceRequirementsArgs']] = None,
                 scope: Optional[pulumi.Input['ControllerScopeArgs']] = None,
                 service: Optional[pulumi.Input['ControllerServiceArgs']] = None,
                 startup_probe: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs']] = None,
                 sysctls: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 tcp: Optional[pulumi.Input['ControllerTcpArgs']] = None,
                 terminate_grace_period_seconds: Optional[pulumi.Input[int]] = None,
                 tolerations: Optional[pulumi.Input['pulumi_kubernetes.core.v1.TolerationArgs']] = None,
                 topology_spread_constraints: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.TopologySpreadConstraintArgs']]]] = None,
                 udp: Optional[pulumi.Input['ControllerUdpArgs']] = None,
                 update_strategy: Optional[pulumi.Input['ControllerUpdateStrategyArgs']] = None,
                 watch_ingress_without_class: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] add_headers: Will add custom headers before sending response traffic to the client according to: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#add-headers.
        :param pulumi.Input['pulumi_kubernetes.core.v1.AffinityArgs'] affinity: Affinity and anti-affinity Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity.
        :param pulumi.Input[bool] allow_snippet_annotations: This configuration defines if Ingress Controller should allow users to set their own *-snippet annotations, otherwise this is forbidden / dropped when users add those annotations. Global snippets in ConfigMap are still respected.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations to be added to the controller Deployment or DaemonSet.
        :param pulumi.Input['AutoscalingArgs'] autoscaling: Mutually exclusive with keda autoscaling.
        :param pulumi.Input[Sequence[pulumi.Input['AutoscalingTemplateArgs']]] autoscaling_template: Custom or additional autoscaling metrics ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-custom-metrics
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] config: Will add custom configuration options to Nginx https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/.
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] config_annotations: Annotations to be added to the controller config configuration configmap.
        :param pulumi.Input[str] config_map_namespace: Allows customization of the configmap / nginx-configmap namespace.
        :param pulumi.Input[str] container_name: Configures the controller container name.
        :param pulumi.Input['ControllerPortArgs'] container_port: Configures the ports the nginx-controller listens on.
        :param pulumi.Input['ControllerCustomTemplateArgs'] custom_template: Override NGINX template.
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] dns_config: Optionally customize the pod dnsConfig.
        :param pulumi.Input[str] dns_policy: Optionally change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'. By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.
        :param pulumi.Input[str] election_id: Election ID to use for status update.
        :param pulumi.Input[bool] enable_mimalloc: Enable mimalloc as a drop-in replacement for malloc. ref: https://github.com/microsoft/mimalloc.
        :param pulumi.Input[str] existing_psp: Use an existing PSP instead of creating one.
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] extra_args: Additional command line arguments to pass to nginx-ingress-controller E.g. to specify the default SSL certificate you can use `default-ssl-certificate: "<namespace>/<secret_name>"`.
        :param pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.ContainerArgs']]] extra_containers: Additional containers to be added to the controller pod. See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.
        :param pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.EnvVarArgs']]] extra_envs: Additional environment variables to set.
        :param pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.ContainerArgs']]] extra_init_containers: Containers, which are run before the app containers are started. - name: init-myservice   image: busybox   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']
        :param pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeMountArgs']]] extra_volume_mounts: Additional volumeMounts to the controller main container.  - name: copy-portal-skins    mountPath: /var/lib/lemonldap-ng/portal/skins
        :param pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeArgs']]] extra_volumes: Additional volumes to the controller pod.  - name: copy-portal-skins    emptyDir: {}
        :param pulumi.Input[str] health_check_path: Path of the health check endpoint. All requests received on the port defined by the healthz-port parameter are forwarded internally to this path.
        :param pulumi.Input[str] heath_check_host: Address to bind the health check endpoint. It is better to set this option to the internal node address if the ingress nginx controller is running in the hostNetwork: true mode.
        :param pulumi.Input[bool] host_network: Required for use with CNI based kubernetes installations (such as ones set up by kubeadm), since CNI and hostport don't mix yet. Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920 is merged.
        :param pulumi.Input['ControllerHostPortArgs'] host_port: Use host ports 80 and 443. Disabled by default.
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] hostname: Optionally customize the pod hostname.
        :param pulumi.Input[bool] ingress_class_by_name: Process IngressClass per name (additionally as per spec.controller).
        :param pulumi.Input['ControllerIngressClassResourceArgs'] ingress_class_resource: This section refers to the creation of the IngressClass resource. IngressClass resources are supported since k8s >= 1.18 and required since k8s >= 1.19
        :param pulumi.Input['KedaArgs'] keda: Mutually exclusive with hpa autoscaling.
        :param pulumi.Input[str] kind: DaemonSet or Deployment.
        :param pulumi.Input['pulumi_kubernetes.core.v1.LifecycleArgs'] lifecycle: Improve connection draining when ingress controller pod is deleted using a lifecycle hook: With this new hook, we increased the default terminationGracePeriodSeconds from 30 seconds to 300, allowing the draining of connections up to five minutes. If the active connections end before that, the pod will terminate gracefully at that time. To effectively take advantage of this feature, the Configmap feature worker-shutdown-timeout new value is 240s instead of 10s.
        :param pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs'] liveness_probe: Liveness probe values Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
        :param pulumi.Input[str] maxmind_license_key: Maxmind license key to download GeoLite2 Databases https://blog.maxmind.com/2019/12/18/significant-changes-to-accessing-and-using-geolite2-databases.
        :param pulumi.Input[int] min_ready_seconds: minReadySeconds to avoid killing pods before we are ready.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_selector: Node labels for controller pod assignment Ref: https://kubernetes.io/docs/user-guide/node-selection/.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pod_annotations: Annotations to be added to controller pods.
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] pod_labels: labels to add to the pod container metadata.
        :param pulumi.Input['pulumi_kubernetes.core.v1.PodSecurityContextArgs'] pod_security_context: Security Context policies for controller pods.
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] proxy_set_headers: Will add custom headers before sending traffic to backends according to https://github.com/kubernetes/ingress-nginx/tree/main/docs/examples/customization/custom-headers.
        :param pulumi.Input['ControllerPublishServiceArgs'] publish_service: Allows customization of the source of the IP address or FQDN to report in the ingress status field. By default, it reads the information provided by the service. If disable, the status field reports the IP address of the node or nodes where an ingress controller pod is running.
        :param pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs'] readiness_probe: Readiness probe values Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
        :param pulumi.Input[bool] report_node_internal_ip: Bare-metal considerations via the host network https://kubernetes.github.io/ingress-nginx/deploy/baremetal/#via-the-host-network Ingress status was blank because there is no Service exposing the NGINX Ingress controller in a configuration using the host network, the default --publish-service flag used in standard cloud setups does not apply.
        :param pulumi.Input['pulumi_kubernetes.core.v1.ResourceRequirementsArgs'] resources: Define requests resources to avoid probe issues due to CPU utilization in busy nodes ref: https://github.com/kubernetes/ingress-nginx/issues/4735#issuecomment-551204903 Ideally, there should be no limits. https://engineering.indeedblog.com/blog/2019/12/cpu-throttling-regression-fix/
        :param pulumi.Input['ControllerScopeArgs'] scope: Limit the scope of the controller.
        :param pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs'] startup_probe: Startup probe values Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]] sysctls: See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for notes on enabling and using sysctls.
        :param pulumi.Input['ControllerTcpArgs'] tcp: Allows customization of the tcp-services-configmap.
        :param pulumi.Input[int] terminate_grace_period_seconds: How long to wait for the drain of connections.
        :param pulumi.Input['pulumi_kubernetes.core.v1.TolerationArgs'] tolerations: Node tolerations for server scheduling to nodes with taints Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
        :param pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.TopologySpreadConstraintArgs']]] topology_spread_constraints: Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/.
        :param pulumi.Input['ControllerUpdateStrategyArgs'] update_strategy: The update strategy to apply to the Deployment or DaemonSet.
        :param pulumi.Input[bool] watch_ingress_without_class: Process Ingress objects without ingressClass annotation/ingressClassName field. Overrides value for --watch-ingress-without-class flag of the controller binary. Defaults to false.
        """
        ControllerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            add_headers=add_headers,
            admission_webhooks=admission_webhooks,
            affinity=affinity,
            allow_snippet_annotations=allow_snippet_annotations,
            annotations=annotations,
            autoscaling=autoscaling,
            autoscaling_template=autoscaling_template,
            config=config,
            config_annotations=config_annotations,
            config_map_namespace=config_map_namespace,
            container_name=container_name,
            container_port=container_port,
            custom_template=custom_template,
            dns_config=dns_config,
            dns_policy=dns_policy,
            election_id=election_id,
            enable_mimalloc=enable_mimalloc,
            existing_psp=existing_psp,
            extra_args=extra_args,
            extra_containers=extra_containers,
            extra_envs=extra_envs,
            extra_init_containers=extra_init_containers,
            extra_volume_mounts=extra_volume_mounts,
            extra_volumes=extra_volumes,
            health_check_path=health_check_path,
            heath_check_host=heath_check_host,
            host_network=host_network,
            host_port=host_port,
            hostname=hostname,
            image=image,
            ingress_class_by_name=ingress_class_by_name,
            ingress_class_resource=ingress_class_resource,
            keda=keda,
            kind=kind,
            lifecycle=lifecycle,
            liveness_probe=liveness_probe,
            maxmind_license_key=maxmind_license_key,
            metrics=metrics,
            min_available=min_available,
            min_ready_seconds=min_ready_seconds,
            name=name,
            node_selector=node_selector,
            pod_annotations=pod_annotations,
            pod_labels=pod_labels,
            pod_security_context=pod_security_context,
            priority_class_name=priority_class_name,
            proxy_set_headers=proxy_set_headers,
            publish_service=publish_service,
            readiness_probe=readiness_probe,
            replica_count=replica_count,
            report_node_internal_ip=report_node_internal_ip,
            resources=resources,
            scope=scope,
            service=service,
            startup_probe=startup_probe,
            sysctls=sysctls,
            tcp=tcp,
            terminate_grace_period_seconds=terminate_grace_period_seconds,
            tolerations=tolerations,
            topology_spread_constraints=topology_spread_constraints,
            udp=udp,
            update_strategy=update_strategy,
            watch_ingress_without_class=watch_ingress_without_class,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             add_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             admission_webhooks: Optional[pulumi.Input['ContollerAdmissionWebhooksArgs']] = None,
             affinity: Optional[pulumi.Input['pulumi_kubernetes.core.v1.AffinityArgs']] = None,
             allow_snippet_annotations: Optional[pulumi.Input[bool]] = None,
             annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             autoscaling: Optional[pulumi.Input['AutoscalingArgs']] = None,
             autoscaling_template: Optional[pulumi.Input[Sequence[pulumi.Input['AutoscalingTemplateArgs']]]] = None,
             config: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             config_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             config_map_namespace: Optional[pulumi.Input[str]] = None,
             container_name: Optional[pulumi.Input[str]] = None,
             container_port: Optional[pulumi.Input['ControllerPortArgs']] = None,
             custom_template: Optional[pulumi.Input['ControllerCustomTemplateArgs']] = None,
             dns_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             dns_policy: Optional[pulumi.Input[str]] = None,
             election_id: Optional[pulumi.Input[str]] = None,
             enable_mimalloc: Optional[pulumi.Input[bool]] = None,
             existing_psp: Optional[pulumi.Input[str]] = None,
             extra_args: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             extra_containers: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.ContainerArgs']]]] = None,
             extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.EnvVarArgs']]]] = None,
             extra_init_containers: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.ContainerArgs']]]] = None,
             extra_volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeMountArgs']]]] = None,
             extra_volumes: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeArgs']]]] = None,
             health_check_path: Optional[pulumi.Input[str]] = None,
             heath_check_host: Optional[pulumi.Input[str]] = None,
             host_network: Optional[pulumi.Input[bool]] = None,
             host_port: Optional[pulumi.Input['ControllerHostPortArgs']] = None,
             hostname: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             image: Optional[pulumi.Input['ControllerImageArgs']] = None,
             ingress_class_by_name: Optional[pulumi.Input[bool]] = None,
             ingress_class_resource: Optional[pulumi.Input['ControllerIngressClassResourceArgs']] = None,
             keda: Optional[pulumi.Input['KedaArgs']] = None,
             kind: Optional[pulumi.Input[str]] = None,
             lifecycle: Optional[pulumi.Input['pulumi_kubernetes.core.v1.LifecycleArgs']] = None,
             liveness_probe: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs']] = None,
             maxmind_license_key: Optional[pulumi.Input[str]] = None,
             metrics: Optional[pulumi.Input['ControllerMetricsArgs']] = None,
             min_available: Optional[pulumi.Input[int]] = None,
             min_ready_seconds: Optional[pulumi.Input[int]] = None,
             name: Optional[pulumi.Input[str]] = None,
             node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             pod_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             pod_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             pod_security_context: Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodSecurityContextArgs']] = None,
             priority_class_name: Optional[pulumi.Input[str]] = None,
             proxy_set_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             publish_service: Optional[pulumi.Input['ControllerPublishServiceArgs']] = None,
             readiness_probe: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs']] = None,
             replica_count: Optional[pulumi.Input[int]] = None,
             report_node_internal_ip: Optional[pulumi.Input[bool]] = None,
             resources: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ResourceRequirementsArgs']] = None,
             scope: Optional[pulumi.Input['ControllerScopeArgs']] = None,
             service: Optional[pulumi.Input['ControllerServiceArgs']] = None,
             startup_probe: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs']] = None,
             sysctls: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             tcp: Optional[pulumi.Input['ControllerTcpArgs']] = None,
             terminate_grace_period_seconds: Optional[pulumi.Input[int]] = None,
             tolerations: Optional[pulumi.Input['pulumi_kubernetes.core.v1.TolerationArgs']] = None,
             topology_spread_constraints: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.TopologySpreadConstraintArgs']]]] = None,
             udp: Optional[pulumi.Input['ControllerUdpArgs']] = None,
             update_strategy: Optional[pulumi.Input['ControllerUpdateStrategyArgs']] = None,
             watch_ingress_without_class: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if add_headers is not None:
            _setter("add_headers", add_headers)
        if admission_webhooks is not None:
            _setter("admission_webhooks", admission_webhooks)
        if affinity is not None:
            _setter("affinity", affinity)
        if allow_snippet_annotations is not None:
            _setter("allow_snippet_annotations", allow_snippet_annotations)
        if annotations is not None:
            _setter("annotations", annotations)
        if autoscaling is not None:
            _setter("autoscaling", autoscaling)
        if autoscaling_template is not None:
            _setter("autoscaling_template", autoscaling_template)
        if config is not None:
            _setter("config", config)
        if config_annotations is not None:
            _setter("config_annotations", config_annotations)
        if config_map_namespace is not None:
            _setter("config_map_namespace", config_map_namespace)
        if container_name is not None:
            _setter("container_name", container_name)
        if container_port is not None:
            _setter("container_port", container_port)
        if custom_template is not None:
            _setter("custom_template", custom_template)
        if dns_config is not None:
            _setter("dns_config", dns_config)
        if dns_policy is not None:
            _setter("dns_policy", dns_policy)
        if election_id is not None:
            _setter("election_id", election_id)
        if enable_mimalloc is not None:
            _setter("enable_mimalloc", enable_mimalloc)
        if existing_psp is not None:
            _setter("existing_psp", existing_psp)
        if extra_args is not None:
            _setter("extra_args", extra_args)
        if extra_containers is not None:
            _setter("extra_containers", extra_containers)
        if extra_envs is not None:
            _setter("extra_envs", extra_envs)
        if extra_init_containers is not None:
            _setter("extra_init_containers", extra_init_containers)
        if extra_volume_mounts is not None:
            _setter("extra_volume_mounts", extra_volume_mounts)
        if extra_volumes is not None:
            _setter("extra_volumes", extra_volumes)
        if health_check_path is not None:
            _setter("health_check_path", health_check_path)
        if heath_check_host is not None:
            _setter("heath_check_host", heath_check_host)
        if host_network is not None:
            _setter("host_network", host_network)
        if host_port is not None:
            _setter("host_port", host_port)
        if hostname is not None:
            _setter("hostname", hostname)
        if image is not None:
            _setter("image", image)
        if ingress_class_by_name is not None:
            _setter("ingress_class_by_name", ingress_class_by_name)
        if ingress_class_resource is not None:
            _setter("ingress_class_resource", ingress_class_resource)
        if keda is not None:
            _setter("keda", keda)
        if kind is not None:
            _setter("kind", kind)
        if lifecycle is not None:
            _setter("lifecycle", lifecycle)
        if liveness_probe is not None:
            _setter("liveness_probe", liveness_probe)
        if maxmind_license_key is not None:
            _setter("maxmind_license_key", maxmind_license_key)
        if metrics is not None:
            _setter("metrics", metrics)
        if min_available is not None:
            _setter("min_available", min_available)
        if min_ready_seconds is not None:
            _setter("min_ready_seconds", min_ready_seconds)
        if name is not None:
            _setter("name", name)
        if node_selector is not None:
            _setter("node_selector", node_selector)
        if pod_annotations is not None:
            _setter("pod_annotations", pod_annotations)
        if pod_labels is not None:
            _setter("pod_labels", pod_labels)
        if pod_security_context is not None:
            _setter("pod_security_context", pod_security_context)
        if priority_class_name is not None:
            _setter("priority_class_name", priority_class_name)
        if proxy_set_headers is not None:
            _setter("proxy_set_headers", proxy_set_headers)
        if publish_service is not None:
            _setter("publish_service", publish_service)
        if readiness_probe is not None:
            _setter("readiness_probe", readiness_probe)
        if replica_count is not None:
            _setter("replica_count", replica_count)
        if report_node_internal_ip is not None:
            _setter("report_node_internal_ip", report_node_internal_ip)
        if resources is not None:
            _setter("resources", resources)
        if scope is not None:
            _setter("scope", scope)
        if service is not None:
            _setter("service", service)
        if startup_probe is not None:
            _setter("startup_probe", startup_probe)
        if sysctls is not None:
            _setter("sysctls", sysctls)
        if tcp is not None:
            _setter("tcp", tcp)
        if terminate_grace_period_seconds is not None:
            _setter("terminate_grace_period_seconds", terminate_grace_period_seconds)
        if tolerations is not None:
            _setter("tolerations", tolerations)
        if topology_spread_constraints is not None:
            _setter("topology_spread_constraints", topology_spread_constraints)
        if udp is not None:
            _setter("udp", udp)
        if update_strategy is not None:
            _setter("update_strategy", update_strategy)
        if watch_ingress_without_class is not None:
            _setter("watch_ingress_without_class", watch_ingress_without_class)

    @property
    @pulumi.getter(name="addHeaders")
    def add_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Will add custom headers before sending response traffic to the client according to: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#add-headers.
        """
        return pulumi.get(self, "add_headers")

    @add_headers.setter
    def add_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "add_headers", value)

    @property
    @pulumi.getter(name="admissionWebhooks")
    def admission_webhooks(self) -> Optional[pulumi.Input['ContollerAdmissionWebhooksArgs']]:
        return pulumi.get(self, "admission_webhooks")

    @admission_webhooks.setter
    def admission_webhooks(self, value: Optional[pulumi.Input['ContollerAdmissionWebhooksArgs']]):
        pulumi.set(self, "admission_webhooks", value)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.AffinityArgs']]:
        """
        Affinity and anti-affinity Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity.
        """
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.AffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter(name="allowSnippetAnnotations")
    def allow_snippet_annotations(self) -> Optional[pulumi.Input[bool]]:
        """
        This configuration defines if Ingress Controller should allow users to set their own *-snippet annotations, otherwise this is forbidden / dropped when users add those annotations. Global snippets in ConfigMap are still respected.
        """
        return pulumi.get(self, "allow_snippet_annotations")

    @allow_snippet_annotations.setter
    def allow_snippet_annotations(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_snippet_annotations", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations to be added to the controller Deployment or DaemonSet.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def autoscaling(self) -> Optional[pulumi.Input['AutoscalingArgs']]:
        """
        Mutually exclusive with keda autoscaling.
        """
        return pulumi.get(self, "autoscaling")

    @autoscaling.setter
    def autoscaling(self, value: Optional[pulumi.Input['AutoscalingArgs']]):
        pulumi.set(self, "autoscaling", value)

    @property
    @pulumi.getter(name="autoscalingTemplate")
    def autoscaling_template(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutoscalingTemplateArgs']]]]:
        """
        Custom or additional autoscaling metrics ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-custom-metrics
        """
        return pulumi.get(self, "autoscaling_template")

    @autoscaling_template.setter
    def autoscaling_template(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutoscalingTemplateArgs']]]]):
        pulumi.set(self, "autoscaling_template", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Will add custom configuration options to Nginx https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="configAnnotations")
    def config_annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Annotations to be added to the controller config configuration configmap.
        """
        return pulumi.get(self, "config_annotations")

    @config_annotations.setter
    def config_annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "config_annotations", value)

    @property
    @pulumi.getter(name="configMapNamespace")
    def config_map_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Allows customization of the configmap / nginx-configmap namespace.
        """
        return pulumi.get(self, "config_map_namespace")

    @config_map_namespace.setter
    def config_map_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_map_namespace", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Configures the controller container name.
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> Optional[pulumi.Input['ControllerPortArgs']]:
        """
        Configures the ports the nginx-controller listens on.
        """
        return pulumi.get(self, "container_port")

    @container_port.setter
    def container_port(self, value: Optional[pulumi.Input['ControllerPortArgs']]):
        pulumi.set(self, "container_port", value)

    @property
    @pulumi.getter(name="customTemplate")
    def custom_template(self) -> Optional[pulumi.Input['ControllerCustomTemplateArgs']]:
        """
        Override NGINX template.
        """
        return pulumi.get(self, "custom_template")

    @custom_template.setter
    def custom_template(self, value: Optional[pulumi.Input['ControllerCustomTemplateArgs']]):
        pulumi.set(self, "custom_template", value)

    @property
    @pulumi.getter(name="dnsConfig")
    def dns_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Optionally customize the pod dnsConfig.
        """
        return pulumi.get(self, "dns_config")

    @dns_config.setter
    def dns_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "dns_config", value)

    @property
    @pulumi.getter(name="dnsPolicy")
    def dns_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Optionally change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'. By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.
        """
        return pulumi.get(self, "dns_policy")

    @dns_policy.setter
    def dns_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_policy", value)

    @property
    @pulumi.getter(name="electionID")
    def election_id(self) -> Optional[pulumi.Input[str]]:
        """
        Election ID to use for status update.
        """
        return pulumi.get(self, "election_id")

    @election_id.setter
    def election_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "election_id", value)

    @property
    @pulumi.getter(name="enableMimalloc")
    def enable_mimalloc(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable mimalloc as a drop-in replacement for malloc. ref: https://github.com/microsoft/mimalloc.
        """
        return pulumi.get(self, "enable_mimalloc")

    @enable_mimalloc.setter
    def enable_mimalloc(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_mimalloc", value)

    @property
    @pulumi.getter(name="existingPsp")
    def existing_psp(self) -> Optional[pulumi.Input[str]]:
        """
        Use an existing PSP instead of creating one.
        """
        return pulumi.get(self, "existing_psp")

    @existing_psp.setter
    def existing_psp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "existing_psp", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Additional command line arguments to pass to nginx-ingress-controller E.g. to specify the default SSL certificate you can use `default-ssl-certificate: "<namespace>/<secret_name>"`.
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="extraContainers")
    def extra_containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.ContainerArgs']]]]:
        """
        Additional containers to be added to the controller pod. See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.
        """
        return pulumi.get(self, "extra_containers")

    @extra_containers.setter
    def extra_containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.ContainerArgs']]]]):
        pulumi.set(self, "extra_containers", value)

    @property
    @pulumi.getter(name="extraEnvs")
    def extra_envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.EnvVarArgs']]]]:
        """
        Additional environment variables to set.
        """
        return pulumi.get(self, "extra_envs")

    @extra_envs.setter
    def extra_envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.EnvVarArgs']]]]):
        pulumi.set(self, "extra_envs", value)

    @property
    @pulumi.getter(name="extraInitContainers")
    def extra_init_containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.ContainerArgs']]]]:
        """
        Containers, which are run before the app containers are started. - name: init-myservice   image: busybox   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']
        """
        return pulumi.get(self, "extra_init_containers")

    @extra_init_containers.setter
    def extra_init_containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.ContainerArgs']]]]):
        pulumi.set(self, "extra_init_containers", value)

    @property
    @pulumi.getter(name="extraVolumeMounts")
    def extra_volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeMountArgs']]]]:
        """
        Additional volumeMounts to the controller main container.  - name: copy-portal-skins    mountPath: /var/lib/lemonldap-ng/portal/skins
        """
        return pulumi.get(self, "extra_volume_mounts")

    @extra_volume_mounts.setter
    def extra_volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeMountArgs']]]]):
        pulumi.set(self, "extra_volume_mounts", value)

    @property
    @pulumi.getter(name="extraVolumes")
    def extra_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeArgs']]]]:
        """
        Additional volumes to the controller pod.  - name: copy-portal-skins    emptyDir: {}
        """
        return pulumi.get(self, "extra_volumes")

    @extra_volumes.setter
    def extra_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.VolumeArgs']]]]):
        pulumi.set(self, "extra_volumes", value)

    @property
    @pulumi.getter(name="healthCheckPath")
    def health_check_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of the health check endpoint. All requests received on the port defined by the healthz-port parameter are forwarded internally to this path.
        """
        return pulumi.get(self, "health_check_path")

    @health_check_path.setter
    def health_check_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_path", value)

    @property
    @pulumi.getter(name="heathCheckHost")
    def heath_check_host(self) -> Optional[pulumi.Input[str]]:
        """
        Address to bind the health check endpoint. It is better to set this option to the internal node address if the ingress nginx controller is running in the hostNetwork: true mode.
        """
        return pulumi.get(self, "heath_check_host")

    @heath_check_host.setter
    def heath_check_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "heath_check_host", value)

    @property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> Optional[pulumi.Input[bool]]:
        """
        Required for use with CNI based kubernetes installations (such as ones set up by kubeadm), since CNI and hostport don't mix yet. Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920 is merged.
        """
        return pulumi.get(self, "host_network")

    @host_network.setter
    def host_network(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "host_network", value)

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[pulumi.Input['ControllerHostPortArgs']]:
        """
        Use host ports 80 and 443. Disabled by default.
        """
        return pulumi.get(self, "host_port")

    @host_port.setter
    def host_port(self, value: Optional[pulumi.Input['ControllerHostPortArgs']]):
        pulumi.set(self, "host_port", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Optionally customize the pod hostname.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['ControllerImageArgs']]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['ControllerImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="ingressClassByName")
    def ingress_class_by_name(self) -> Optional[pulumi.Input[bool]]:
        """
        Process IngressClass per name (additionally as per spec.controller).
        """
        return pulumi.get(self, "ingress_class_by_name")

    @ingress_class_by_name.setter
    def ingress_class_by_name(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ingress_class_by_name", value)

    @property
    @pulumi.getter(name="ingressClassResource")
    def ingress_class_resource(self) -> Optional[pulumi.Input['ControllerIngressClassResourceArgs']]:
        """
        This section refers to the creation of the IngressClass resource. IngressClass resources are supported since k8s >= 1.18 and required since k8s >= 1.19
        """
        return pulumi.get(self, "ingress_class_resource")

    @ingress_class_resource.setter
    def ingress_class_resource(self, value: Optional[pulumi.Input['ControllerIngressClassResourceArgs']]):
        pulumi.set(self, "ingress_class_resource", value)

    @property
    @pulumi.getter
    def keda(self) -> Optional[pulumi.Input['KedaArgs']]:
        """
        Mutually exclusive with hpa autoscaling.
        """
        return pulumi.get(self, "keda")

    @keda.setter
    def keda(self, value: Optional[pulumi.Input['KedaArgs']]):
        pulumi.set(self, "keda", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        DaemonSet or Deployment.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.LifecycleArgs']]:
        """
        Improve connection draining when ingress controller pod is deleted using a lifecycle hook: With this new hook, we increased the default terminationGracePeriodSeconds from 30 seconds to 300, allowing the draining of connections up to five minutes. If the active connections end before that, the pod will terminate gracefully at that time. To effectively take advantage of this feature, the Configmap feature worker-shutdown-timeout new value is 240s instead of 10s.
        """
        return pulumi.get(self, "lifecycle")

    @lifecycle.setter
    def lifecycle(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.LifecycleArgs']]):
        pulumi.set(self, "lifecycle", value)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs']]:
        """
        Liveness probe values Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
        """
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @property
    @pulumi.getter(name="maxmindLicenseKey")
    def maxmind_license_key(self) -> Optional[pulumi.Input[str]]:
        """
        Maxmind license key to download GeoLite2 Databases https://blog.maxmind.com/2019/12/18/significant-changes-to-accessing-and-using-geolite2-databases.
        """
        return pulumi.get(self, "maxmind_license_key")

    @maxmind_license_key.setter
    def maxmind_license_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maxmind_license_key", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input['ControllerMetricsArgs']]:
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input['ControllerMetricsArgs']]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter(name="minAvailable")
    def min_available(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_available")

    @min_available.setter
    def min_available(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_available", value)

    @property
    @pulumi.getter(name="minReadySeconds")
    def min_ready_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        minReadySeconds to avoid killing pods before we are ready.
        """
        return pulumi.get(self, "min_ready_seconds")

    @min_ready_seconds.setter
    def min_ready_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_ready_seconds", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Node labels for controller pod assignment Ref: https://kubernetes.io/docs/user-guide/node-selection/.
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="podAnnotations")
    def pod_annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations to be added to controller pods.
        """
        return pulumi.get(self, "pod_annotations")

    @pod_annotations.setter
    def pod_annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "pod_annotations", value)

    @property
    @pulumi.getter(name="podLabels")
    def pod_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        labels to add to the pod container metadata.
        """
        return pulumi.get(self, "pod_labels")

    @pod_labels.setter
    def pod_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "pod_labels", value)

    @property
    @pulumi.getter(name="podSecurityContext")
    def pod_security_context(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodSecurityContextArgs']]:
        """
        Security Context policies for controller pods.
        """
        return pulumi.get(self, "pod_security_context")

    @pod_security_context.setter
    def pod_security_context(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodSecurityContextArgs']]):
        pulumi.set(self, "pod_security_context", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter(name="proxySetHeaders")
    def proxy_set_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Will add custom headers before sending traffic to backends according to https://github.com/kubernetes/ingress-nginx/tree/main/docs/examples/customization/custom-headers.
        """
        return pulumi.get(self, "proxy_set_headers")

    @proxy_set_headers.setter
    def proxy_set_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "proxy_set_headers", value)

    @property
    @pulumi.getter(name="publishService")
    def publish_service(self) -> Optional[pulumi.Input['ControllerPublishServiceArgs']]:
        """
        Allows customization of the source of the IP address or FQDN to report in the ingress status field. By default, it reads the information provided by the service. If disable, the status field reports the IP address of the node or nodes where an ingress controller pod is running.
        """
        return pulumi.get(self, "publish_service")

    @publish_service.setter
    def publish_service(self, value: Optional[pulumi.Input['ControllerPublishServiceArgs']]):
        pulumi.set(self, "publish_service", value)

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs']]:
        """
        Readiness probe values Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
        """
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)

    @property
    @pulumi.getter(name="replicaCount")
    def replica_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replica_count")

    @replica_count.setter
    def replica_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replica_count", value)

    @property
    @pulumi.getter(name="reportNodeInternalIp")
    def report_node_internal_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        Bare-metal considerations via the host network https://kubernetes.github.io/ingress-nginx/deploy/baremetal/#via-the-host-network Ingress status was blank because there is no Service exposing the NGINX Ingress controller in a configuration using the host network, the default --publish-service flag used in standard cloud setups does not apply.
        """
        return pulumi.get(self, "report_node_internal_ip")

    @report_node_internal_ip.setter
    def report_node_internal_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "report_node_internal_ip", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.ResourceRequirementsArgs']]:
        """
        Define requests resources to avoid probe issues due to CPU utilization in busy nodes ref: https://github.com/kubernetes/ingress-nginx/issues/4735#issuecomment-551204903 Ideally, there should be no limits. https://engineering.indeedblog.com/blog/2019/12/cpu-throttling-regression-fix/
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ResourceRequirementsArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input['ControllerScopeArgs']]:
        """
        Limit the scope of the controller.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input['ControllerScopeArgs']]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['ControllerServiceArgs']]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['ControllerServiceArgs']]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs']]:
        """
        Startup probe values Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes.
        """
        return pulumi.get(self, "startup_probe")

    @startup_probe.setter
    def startup_probe(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.ProbeArgs']]):
        pulumi.set(self, "startup_probe", value)

    @property
    @pulumi.getter
    def sysctls(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for notes on enabling and using sysctls.
        """
        return pulumi.get(self, "sysctls")

    @sysctls.setter
    def sysctls(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "sysctls", value)

    @property
    @pulumi.getter
    def tcp(self) -> Optional[pulumi.Input['ControllerTcpArgs']]:
        """
        Allows customization of the tcp-services-configmap.
        """
        return pulumi.get(self, "tcp")

    @tcp.setter
    def tcp(self, value: Optional[pulumi.Input['ControllerTcpArgs']]):
        pulumi.set(self, "tcp", value)

    @property
    @pulumi.getter(name="terminateGracePeriodSeconds")
    def terminate_grace_period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How long to wait for the drain of connections.
        """
        return pulumi.get(self, "terminate_grace_period_seconds")

    @terminate_grace_period_seconds.setter
    def terminate_grace_period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "terminate_grace_period_seconds", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.TolerationArgs']]:
        """
        Node tolerations for server scheduling to nodes with taints Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.TolerationArgs']]):
        pulumi.set(self, "tolerations", value)

    @property
    @pulumi.getter(name="topologySpreadConstraints")
    def topology_spread_constraints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.TopologySpreadConstraintArgs']]]]:
        """
        Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in. Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/.
        """
        return pulumi.get(self, "topology_spread_constraints")

    @topology_spread_constraints.setter
    def topology_spread_constraints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['pulumi_kubernetes.core.v1.TopologySpreadConstraintArgs']]]]):
        pulumi.set(self, "topology_spread_constraints", value)

    @property
    @pulumi.getter
    def udp(self) -> Optional[pulumi.Input['ControllerUdpArgs']]:
        return pulumi.get(self, "udp")

    @udp.setter
    def udp(self, value: Optional[pulumi.Input['ControllerUdpArgs']]):
        pulumi.set(self, "udp", value)

    @property
    @pulumi.getter(name="updateStrategy")
    def update_strategy(self) -> Optional[pulumi.Input['ControllerUpdateStrategyArgs']]:
        """
        The update strategy to apply to the Deployment or DaemonSet.
        """
        return pulumi.get(self, "update_strategy")

    @update_strategy.setter
    def update_strategy(self, value: Optional[pulumi.Input['ControllerUpdateStrategyArgs']]):
        pulumi.set(self, "update_strategy", value)

    @property
    @pulumi.getter(name="watchIngressWithoutClass")
    def watch_ingress_without_class(self) -> Optional[pulumi.Input[bool]]:
        """
        Process Ingress objects without ingressClass annotation/ingressClassName field. Overrides value for --watch-ingress-without-class flag of the controller binary. Defaults to false.
        """
        return pulumi.get(self, "watch_ingress_without_class")

    @watch_ingress_without_class.setter
    def watch_ingress_without_class(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "watch_ingress_without_class", value)


@pulumi.input_type
class KedaScaledObjectArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Custom annotations for ScaledObject resource.
        """
        KedaScaledObjectArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotations=annotations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if annotations is not None:
            _setter("annotations", annotations)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Custom annotations for ScaledObject resource.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)


@pulumi.input_type
class KedaTriggerArgs:
    def __init__(__self__, *,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        KedaTriggerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metadata=metadata,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metadata is not None:
            _setter("metadata", metadata)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class KedaArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 behavior: Optional[pulumi.Input['AutoscalingBehaviorArgs']] = None,
                 cooldown_period: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 max_replicas: Optional[pulumi.Input[int]] = None,
                 min_replicas: Optional[pulumi.Input[int]] = None,
                 polling_interval: Optional[pulumi.Input[int]] = None,
                 restore_to_original_replica_count: Optional[pulumi.Input[bool]] = None,
                 scaled_object: Optional[pulumi.Input['KedaScaledObjectArgs']] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input['KedaTriggerArgs']]]] = None):
        """
        :param pulumi.Input[str] api_version: apiVersion changes with keda 1.x vs 2.x: 2.x = keda.sh/v1alpha1, 1.x = keda.k8s.io/v1alpha1.
        """
        KedaArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            api_version=api_version,
            behavior=behavior,
            cooldown_period=cooldown_period,
            enabled=enabled,
            max_replicas=max_replicas,
            min_replicas=min_replicas,
            polling_interval=polling_interval,
            restore_to_original_replica_count=restore_to_original_replica_count,
            scaled_object=scaled_object,
            triggers=triggers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             api_version: Optional[pulumi.Input[str]] = None,
             behavior: Optional[pulumi.Input['AutoscalingBehaviorArgs']] = None,
             cooldown_period: Optional[pulumi.Input[int]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             max_replicas: Optional[pulumi.Input[int]] = None,
             min_replicas: Optional[pulumi.Input[int]] = None,
             polling_interval: Optional[pulumi.Input[int]] = None,
             restore_to_original_replica_count: Optional[pulumi.Input[bool]] = None,
             scaled_object: Optional[pulumi.Input['KedaScaledObjectArgs']] = None,
             triggers: Optional[pulumi.Input[Sequence[pulumi.Input['KedaTriggerArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if api_version is not None:
            _setter("api_version", api_version)
        if behavior is not None:
            _setter("behavior", behavior)
        if cooldown_period is not None:
            _setter("cooldown_period", cooldown_period)
        if enabled is not None:
            _setter("enabled", enabled)
        if max_replicas is not None:
            _setter("max_replicas", max_replicas)
        if min_replicas is not None:
            _setter("min_replicas", min_replicas)
        if polling_interval is not None:
            _setter("polling_interval", polling_interval)
        if restore_to_original_replica_count is not None:
            _setter("restore_to_original_replica_count", restore_to_original_replica_count)
        if scaled_object is not None:
            _setter("scaled_object", scaled_object)
        if triggers is not None:
            _setter("triggers", triggers)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        apiVersion changes with keda 1.x vs 2.x: 2.x = keda.sh/v1alpha1, 1.x = keda.k8s.io/v1alpha1.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[pulumi.Input['AutoscalingBehaviorArgs']]:
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[pulumi.Input['AutoscalingBehaviorArgs']]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter(name="cooldownPeriod")
    def cooldown_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cooldown_period")

    @cooldown_period.setter
    def cooldown_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cooldown_period", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter(name="pollingInterval")
    def polling_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "polling_interval")

    @polling_interval.setter
    def polling_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "polling_interval", value)

    @property
    @pulumi.getter(name="restoreToOriginalReplicaCount")
    def restore_to_original_replica_count(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "restore_to_original_replica_count")

    @restore_to_original_replica_count.setter
    def restore_to_original_replica_count(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restore_to_original_replica_count", value)

    @property
    @pulumi.getter(name="scaledObject")
    def scaled_object(self) -> Optional[pulumi.Input['KedaScaledObjectArgs']]:
        return pulumi.get(self, "scaled_object")

    @scaled_object.setter
    def scaled_object(self, value: Optional[pulumi.Input['KedaScaledObjectArgs']]):
        pulumi.set(self, "scaled_object", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KedaTriggerArgs']]]]:
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KedaTriggerArgs']]]]):
        pulumi.set(self, "triggers", value)


@pulumi.input_type
class ReleaseArgs:
    def __init__(__self__, *,
                 atomic: Optional[pulumi.Input[bool]] = None,
                 chart: Optional[pulumi.Input[str]] = None,
                 cleanup_on_fail: Optional[pulumi.Input[bool]] = None,
                 create_namespace: Optional[pulumi.Input[bool]] = None,
                 dependency_update: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 devel: Optional[pulumi.Input[bool]] = None,
                 disable_crd_hooks: Optional[pulumi.Input[bool]] = None,
                 disable_openapi_validation: Optional[pulumi.Input[bool]] = None,
                 disable_webhooks: Optional[pulumi.Input[bool]] = None,
                 force_update: Optional[pulumi.Input[bool]] = None,
                 keyring: Optional[pulumi.Input[str]] = None,
                 lint: Optional[pulumi.Input[bool]] = None,
                 manifest: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 max_history: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 postrender: Optional[pulumi.Input[str]] = None,
                 recreate_pods: Optional[pulumi.Input[bool]] = None,
                 render_subchart_notes: Optional[pulumi.Input[bool]] = None,
                 replace: Optional[pulumi.Input[bool]] = None,
                 repository_opts: Optional[pulumi.Input['RepositoryOptsArgs']] = None,
                 reset_values: Optional[pulumi.Input[bool]] = None,
                 resource_names: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 reuse_values: Optional[pulumi.Input[bool]] = None,
                 skip_await: Optional[pulumi.Input[bool]] = None,
                 skip_crds: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 value_yaml_files: Optional[pulumi.Input[Sequence[pulumi.Input[Union[pulumi.Asset, pulumi.Archive]]]]] = None,
                 values: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 verify: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 wait_for_jobs: Optional[pulumi.Input[bool]] = None):
        """
        A Release is an instance of a chart running in a Kubernetes cluster.
        A Chart is a Helm package. It contains all of the resource definitions necessary to run an application, tool, or service inside of a Kubernetes cluster.
        Note - Helm Release is currently in BETA and may change. Use in production environment is discouraged.
        :param pulumi.Input[bool] atomic: If set, installation process purges chart on fail. `skipAwait` will be disabled automatically if atomic is used.
        :param pulumi.Input[str] chart: Chart name to be installed. A path may be used.
        :param pulumi.Input[bool] cleanup_on_fail: Allow deletion of new resources created in this upgrade when upgrade fails.
        :param pulumi.Input[bool] create_namespace: Create the namespace if it does not exist.
        :param pulumi.Input[bool] dependency_update: Run helm dependency update before installing the chart.
        :param pulumi.Input[str] description: Add a custom description
        :param pulumi.Input[bool] devel: Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored.
        :param pulumi.Input[bool] disable_crd_hooks: Prevent CRD hooks from, running, but run other hooks.  See helm install --no-crd-hook
        :param pulumi.Input[bool] disable_openapi_validation: If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
        :param pulumi.Input[bool] disable_webhooks: Prevent hooks from running.
        :param pulumi.Input[bool] force_update: Force resource update through delete/recreate if needed.
        :param pulumi.Input[str] keyring: Location of public keys used for verification. Used only if `verify` is true
        :param pulumi.Input[bool] lint: Run helm lint when planning.
        :param pulumi.Input[Mapping[str, Any]] manifest: The rendered manifests as JSON. Not yet supported.
        :param pulumi.Input[int] max_history: Limit the maximum number of revisions saved per release. Use 0 for no limit.
        :param pulumi.Input[str] name: Release name.
        :param pulumi.Input[str] namespace: Namespace to install the release into.
        :param pulumi.Input[str] postrender: Postrender command to run.
        :param pulumi.Input[bool] recreate_pods: Perform pods restart during upgrade/rollback.
        :param pulumi.Input[bool] render_subchart_notes: If set, render subchart notes along with the parent.
        :param pulumi.Input[bool] replace: Re-use the given name, even if that name is already used. This is unsafe in production
        :param pulumi.Input['RepositoryOptsArgs'] repository_opts: Specification defining the Helm chart repository to use.
        :param pulumi.Input[bool] reset_values: When upgrading, reset the values to the ones built into the chart.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] resource_names: Names of resources created by the release grouped by "kind/version".
        :param pulumi.Input[bool] reuse_values: When upgrading, reuse the last release's values and merge in any overrides. If 'resetValues' is specified, this is ignored
        :param pulumi.Input[bool] skip_await: By default, the provider waits until all resources are in a ready state before marking the release as successful. Setting this to true will skip such await logic.
        :param pulumi.Input[bool] skip_crds: If set, no CRDs will be installed. By default, CRDs are installed if not already present.
        :param pulumi.Input[int] timeout: Time in seconds to wait for any individual kubernetes operation.
        :param pulumi.Input[Sequence[pulumi.Input[Union[pulumi.Asset, pulumi.Archive]]]] value_yaml_files: List of assets (raw yaml files). Content is read and merged with values. Not yet supported.
        :param pulumi.Input[Mapping[str, Any]] values: Custom values set for the release.
        :param pulumi.Input[bool] verify: Verify the package before installing it.
        :param pulumi.Input[str] version: Specify the exact chart version to install. If this is not specified, the latest version is installed.
        :param pulumi.Input[bool] wait_for_jobs: Will wait until all Jobs have been completed before marking the release as successful. This is ignored if `skipAwait` is enabled.
        """
        ReleaseArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            atomic=atomic,
            chart=chart,
            cleanup_on_fail=cleanup_on_fail,
            create_namespace=create_namespace,
            dependency_update=dependency_update,
            description=description,
            devel=devel,
            disable_crd_hooks=disable_crd_hooks,
            disable_openapi_validation=disable_openapi_validation,
            disable_webhooks=disable_webhooks,
            force_update=force_update,
            keyring=keyring,
            lint=lint,
            manifest=manifest,
            max_history=max_history,
            name=name,
            namespace=namespace,
            postrender=postrender,
            recreate_pods=recreate_pods,
            render_subchart_notes=render_subchart_notes,
            replace=replace,
            repository_opts=repository_opts,
            reset_values=reset_values,
            resource_names=resource_names,
            reuse_values=reuse_values,
            skip_await=skip_await,
            skip_crds=skip_crds,
            timeout=timeout,
            value_yaml_files=value_yaml_files,
            values=values,
            verify=verify,
            version=version,
            wait_for_jobs=wait_for_jobs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             atomic: Optional[pulumi.Input[bool]] = None,
             chart: Optional[pulumi.Input[str]] = None,
             cleanup_on_fail: Optional[pulumi.Input[bool]] = None,
             create_namespace: Optional[pulumi.Input[bool]] = None,
             dependency_update: Optional[pulumi.Input[bool]] = None,
             description: Optional[pulumi.Input[str]] = None,
             devel: Optional[pulumi.Input[bool]] = None,
             disable_crd_hooks: Optional[pulumi.Input[bool]] = None,
             disable_openapi_validation: Optional[pulumi.Input[bool]] = None,
             disable_webhooks: Optional[pulumi.Input[bool]] = None,
             force_update: Optional[pulumi.Input[bool]] = None,
             keyring: Optional[pulumi.Input[str]] = None,
             lint: Optional[pulumi.Input[bool]] = None,
             manifest: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             max_history: Optional[pulumi.Input[int]] = None,
             name: Optional[pulumi.Input[str]] = None,
             namespace: Optional[pulumi.Input[str]] = None,
             postrender: Optional[pulumi.Input[str]] = None,
             recreate_pods: Optional[pulumi.Input[bool]] = None,
             render_subchart_notes: Optional[pulumi.Input[bool]] = None,
             replace: Optional[pulumi.Input[bool]] = None,
             repository_opts: Optional[pulumi.Input['RepositoryOptsArgs']] = None,
             reset_values: Optional[pulumi.Input[bool]] = None,
             resource_names: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
             reuse_values: Optional[pulumi.Input[bool]] = None,
             skip_await: Optional[pulumi.Input[bool]] = None,
             skip_crds: Optional[pulumi.Input[bool]] = None,
             timeout: Optional[pulumi.Input[int]] = None,
             value_yaml_files: Optional[pulumi.Input[Sequence[pulumi.Input[Union[pulumi.Asset, pulumi.Archive]]]]] = None,
             values: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             verify: Optional[pulumi.Input[bool]] = None,
             version: Optional[pulumi.Input[str]] = None,
             wait_for_jobs: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if atomic is not None:
            _setter("atomic", atomic)
        if chart is not None:
            _setter("chart", chart)
        if cleanup_on_fail is not None:
            _setter("cleanup_on_fail", cleanup_on_fail)
        if create_namespace is not None:
            _setter("create_namespace", create_namespace)
        if dependency_update is not None:
            _setter("dependency_update", dependency_update)
        if description is not None:
            _setter("description", description)
        if devel is not None:
            _setter("devel", devel)
        if disable_crd_hooks is not None:
            _setter("disable_crd_hooks", disable_crd_hooks)
        if disable_openapi_validation is not None:
            _setter("disable_openapi_validation", disable_openapi_validation)
        if disable_webhooks is not None:
            _setter("disable_webhooks", disable_webhooks)
        if force_update is not None:
            _setter("force_update", force_update)
        if keyring is not None:
            _setter("keyring", keyring)
        if lint is not None:
            _setter("lint", lint)
        if manifest is not None:
            _setter("manifest", manifest)
        if max_history is not None:
            _setter("max_history", max_history)
        if name is not None:
            _setter("name", name)
        if namespace is not None:
            _setter("namespace", namespace)
        if postrender is not None:
            _setter("postrender", postrender)
        if recreate_pods is not None:
            _setter("recreate_pods", recreate_pods)
        if render_subchart_notes is not None:
            _setter("render_subchart_notes", render_subchart_notes)
        if replace is not None:
            _setter("replace", replace)
        if repository_opts is not None:
            _setter("repository_opts", repository_opts)
        if reset_values is not None:
            _setter("reset_values", reset_values)
        if resource_names is not None:
            _setter("resource_names", resource_names)
        if reuse_values is not None:
            _setter("reuse_values", reuse_values)
        if skip_await is not None:
            _setter("skip_await", skip_await)
        if skip_crds is not None:
            _setter("skip_crds", skip_crds)
        if timeout is not None:
            _setter("timeout", timeout)
        if value_yaml_files is not None:
            _setter("value_yaml_files", value_yaml_files)
        if values is not None:
            _setter("values", values)
        if verify is not None:
            _setter("verify", verify)
        if version is not None:
            _setter("version", version)
        if wait_for_jobs is not None:
            _setter("wait_for_jobs", wait_for_jobs)

    @property
    @pulumi.getter
    def atomic(self) -> Optional[pulumi.Input[bool]]:
        """
        If set, installation process purges chart on fail. `skipAwait` will be disabled automatically if atomic is used.
        """
        return pulumi.get(self, "atomic")

    @atomic.setter
    def atomic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "atomic", value)

    @property
    @pulumi.getter
    def chart(self) -> Optional[pulumi.Input[str]]:
        """
        Chart name to be installed. A path may be used.
        """
        return pulumi.get(self, "chart")

    @chart.setter
    def chart(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart", value)

    @property
    @pulumi.getter(name="cleanupOnFail")
    def cleanup_on_fail(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow deletion of new resources created in this upgrade when upgrade fails.
        """
        return pulumi.get(self, "cleanup_on_fail")

    @cleanup_on_fail.setter
    def cleanup_on_fail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cleanup_on_fail", value)

    @property
    @pulumi.getter(name="createNamespace")
    def create_namespace(self) -> Optional[pulumi.Input[bool]]:
        """
        Create the namespace if it does not exist.
        """
        return pulumi.get(self, "create_namespace")

    @create_namespace.setter
    def create_namespace(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_namespace", value)

    @property
    @pulumi.getter(name="dependencyUpdate")
    def dependency_update(self) -> Optional[pulumi.Input[bool]]:
        """
        Run helm dependency update before installing the chart.
        """
        return pulumi.get(self, "dependency_update")

    @dependency_update.setter
    def dependency_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dependency_update", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Add a custom description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def devel(self) -> Optional[pulumi.Input[bool]]:
        """
        Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored.
        """
        return pulumi.get(self, "devel")

    @devel.setter
    def devel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "devel", value)

    @property
    @pulumi.getter(name="disableCRDHooks")
    def disable_crd_hooks(self) -> Optional[pulumi.Input[bool]]:
        """
        Prevent CRD hooks from, running, but run other hooks.  See helm install --no-crd-hook
        """
        return pulumi.get(self, "disable_crd_hooks")

    @disable_crd_hooks.setter
    def disable_crd_hooks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_crd_hooks", value)

    @property
    @pulumi.getter(name="disableOpenapiValidation")
    def disable_openapi_validation(self) -> Optional[pulumi.Input[bool]]:
        """
        If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
        """
        return pulumi.get(self, "disable_openapi_validation")

    @disable_openapi_validation.setter
    def disable_openapi_validation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_openapi_validation", value)

    @property
    @pulumi.getter(name="disableWebhooks")
    def disable_webhooks(self) -> Optional[pulumi.Input[bool]]:
        """
        Prevent hooks from running.
        """
        return pulumi.get(self, "disable_webhooks")

    @disable_webhooks.setter
    def disable_webhooks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_webhooks", value)

    @property
    @pulumi.getter(name="forceUpdate")
    def force_update(self) -> Optional[pulumi.Input[bool]]:
        """
        Force resource update through delete/recreate if needed.
        """
        return pulumi.get(self, "force_update")

    @force_update.setter
    def force_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_update", value)

    @property
    @pulumi.getter
    def keyring(self) -> Optional[pulumi.Input[str]]:
        """
        Location of public keys used for verification. Used only if `verify` is true
        """
        return pulumi.get(self, "keyring")

    @keyring.setter
    def keyring(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyring", value)

    @property
    @pulumi.getter
    def lint(self) -> Optional[pulumi.Input[bool]]:
        """
        Run helm lint when planning.
        """
        return pulumi.get(self, "lint")

    @lint.setter
    def lint(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lint", value)

    @property
    @pulumi.getter
    def manifest(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The rendered manifests as JSON. Not yet supported.
        """
        return pulumi.get(self, "manifest")

    @manifest.setter
    def manifest(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "manifest", value)

    @property
    @pulumi.getter(name="maxHistory")
    def max_history(self) -> Optional[pulumi.Input[int]]:
        """
        Limit the maximum number of revisions saved per release. Use 0 for no limit.
        """
        return pulumi.get(self, "max_history")

    @max_history.setter
    def max_history(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_history", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Release name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace to install the release into.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def postrender(self) -> Optional[pulumi.Input[str]]:
        """
        Postrender command to run.
        """
        return pulumi.get(self, "postrender")

    @postrender.setter
    def postrender(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "postrender", value)

    @property
    @pulumi.getter(name="recreatePods")
    def recreate_pods(self) -> Optional[pulumi.Input[bool]]:
        """
        Perform pods restart during upgrade/rollback.
        """
        return pulumi.get(self, "recreate_pods")

    @recreate_pods.setter
    def recreate_pods(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recreate_pods", value)

    @property
    @pulumi.getter(name="renderSubchartNotes")
    def render_subchart_notes(self) -> Optional[pulumi.Input[bool]]:
        """
        If set, render subchart notes along with the parent.
        """
        return pulumi.get(self, "render_subchart_notes")

    @render_subchart_notes.setter
    def render_subchart_notes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "render_subchart_notes", value)

    @property
    @pulumi.getter
    def replace(self) -> Optional[pulumi.Input[bool]]:
        """
        Re-use the given name, even if that name is already used. This is unsafe in production
        """
        return pulumi.get(self, "replace")

    @replace.setter
    def replace(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "replace", value)

    @property
    @pulumi.getter(name="repositoryOpts")
    def repository_opts(self) -> Optional[pulumi.Input['RepositoryOptsArgs']]:
        """
        Specification defining the Helm chart repository to use.
        """
        return pulumi.get(self, "repository_opts")

    @repository_opts.setter
    def repository_opts(self, value: Optional[pulumi.Input['RepositoryOptsArgs']]):
        pulumi.set(self, "repository_opts", value)

    @property
    @pulumi.getter(name="resetValues")
    def reset_values(self) -> Optional[pulumi.Input[bool]]:
        """
        When upgrading, reset the values to the ones built into the chart.
        """
        return pulumi.get(self, "reset_values")

    @reset_values.setter
    def reset_values(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reset_values", value)

    @property
    @pulumi.getter(name="resourceNames")
    def resource_names(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        """
        Names of resources created by the release grouped by "kind/version".
        """
        return pulumi.get(self, "resource_names")

    @resource_names.setter
    def resource_names(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "resource_names", value)

    @property
    @pulumi.getter(name="reuseValues")
    def reuse_values(self) -> Optional[pulumi.Input[bool]]:
        """
        When upgrading, reuse the last release's values and merge in any overrides. If 'resetValues' is specified, this is ignored
        """
        return pulumi.get(self, "reuse_values")

    @reuse_values.setter
    def reuse_values(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reuse_values", value)

    @property
    @pulumi.getter(name="skipAwait")
    def skip_await(self) -> Optional[pulumi.Input[bool]]:
        """
        By default, the provider waits until all resources are in a ready state before marking the release as successful. Setting this to true will skip such await logic.
        """
        return pulumi.get(self, "skip_await")

    @skip_await.setter
    def skip_await(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_await", value)

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> Optional[pulumi.Input[bool]]:
        """
        If set, no CRDs will be installed. By default, CRDs are installed if not already present.
        """
        return pulumi.get(self, "skip_crds")

    @skip_crds.setter
    def skip_crds(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_crds", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time in seconds to wait for any individual kubernetes operation.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="valueYamlFiles")
    def value_yaml_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Union[pulumi.Asset, pulumi.Archive]]]]]:
        """
        List of assets (raw yaml files). Content is read and merged with values. Not yet supported.
        """
        return pulumi.get(self, "value_yaml_files")

    @value_yaml_files.setter
    def value_yaml_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Union[pulumi.Asset, pulumi.Archive]]]]]):
        pulumi.set(self, "value_yaml_files", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Custom values set for the release.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def verify(self) -> Optional[pulumi.Input[bool]]:
        """
        Verify the package before installing it.
        """
        return pulumi.get(self, "verify")

    @verify.setter
    def verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the exact chart version to install. If this is not specified, the latest version is installed.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="waitForJobs")
    def wait_for_jobs(self) -> Optional[pulumi.Input[bool]]:
        """
        Will wait until all Jobs have been completed before marking the release as successful. This is ignored if `skipAwait` is enabled.
        """
        return pulumi.get(self, "wait_for_jobs")

    @wait_for_jobs.setter
    def wait_for_jobs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wait_for_jobs", value)


@pulumi.input_type
class RepositoryOptsArgs:
    def __init__(__self__, *,
                 ca_file: Optional[pulumi.Input[str]] = None,
                 cert_file: Optional[pulumi.Input[str]] = None,
                 key_file: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 repo: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Specification defining the Helm chart repository to use.
        :param pulumi.Input[str] ca_file: The Repository's CA File
        :param pulumi.Input[str] cert_file: The repository's cert file
        :param pulumi.Input[str] key_file: The repository's cert key file
        :param pulumi.Input[str] password: Password for HTTP basic authentication
        :param pulumi.Input[str] repo: Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
        :param pulumi.Input[str] username: Username for HTTP basic authentication
        """
        RepositoryOptsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ca_file=ca_file,
            cert_file=cert_file,
            key_file=key_file,
            password=password,
            repo=repo,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ca_file: Optional[pulumi.Input[str]] = None,
             cert_file: Optional[pulumi.Input[str]] = None,
             key_file: Optional[pulumi.Input[str]] = None,
             password: Optional[pulumi.Input[str]] = None,
             repo: Optional[pulumi.Input[str]] = None,
             username: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if ca_file is not None:
            _setter("ca_file", ca_file)
        if cert_file is not None:
            _setter("cert_file", cert_file)
        if key_file is not None:
            _setter("key_file", key_file)
        if password is not None:
            _setter("password", password)
        if repo is not None:
            _setter("repo", repo)
        if username is not None:
            _setter("username", username)

    @property
    @pulumi.getter(name="caFile")
    def ca_file(self) -> Optional[pulumi.Input[str]]:
        """
        The Repository's CA File
        """
        return pulumi.get(self, "ca_file")

    @ca_file.setter
    def ca_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_file", value)

    @property
    @pulumi.getter(name="certFile")
    def cert_file(self) -> Optional[pulumi.Input[str]]:
        """
        The repository's cert file
        """
        return pulumi.get(self, "cert_file")

    @cert_file.setter
    def cert_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_file", value)

    @property
    @pulumi.getter(name="keyFile")
    def key_file(self) -> Optional[pulumi.Input[str]]:
        """
        The repository's cert key file
        """
        return pulumi.get(self, "key_file")

    @key_file.setter
    def key_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_file", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for HTTP basic authentication
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def repo(self) -> Optional[pulumi.Input[str]]:
        """
        Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
        """
        return pulumi.get(self, "repo")

    @repo.setter
    def repo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for HTTP basic authentication
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


